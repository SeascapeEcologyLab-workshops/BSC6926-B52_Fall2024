[
  {
    "objectID": "ws9.html",
    "href": "ws9.html",
    "title": "Workshop 9: Community data: trajectories",
    "section": "",
    "text": "This workshop discusses working with community data by conducting trajectory analyses and introducing the package ecotraj.\nR script: github\nR script of workshop 8\ndata"
  },
  {
    "objectID": "ws9.html#community-trajectory-analysis",
    "href": "ws9.html#community-trajectory-analysis",
    "title": "Workshop 9: Community data: trajectories",
    "section": "Community Trajectory Analysis",
    "text": "Community Trajectory Analysis\nCommunity Trajectory Analysis (CTA) is a framework to analyze community dynamics described as trajectories. Community trajectory analysis takes trajectories as objects to be analyzed and compared geometrically.\nWe will be using the package ecotraj, and they have a great overview of the package with vignettes found here\n\nTrajectory data\nTo specify community dynamics, we need three data items:  - set of community states (i.e. coordinates in a space Ω), described using a distance matrix d\n- A vector specifying the site (i.e. sampling unit) corresponding to each community state\n- A vector specifying the survey (i.e. time point) corresponding to the sampling of each community state.\n\nCTA is based on the analysis of information in the distance matrix Δ = [d]. Therefore, it does not require explicit coordinates. This is an advantage because it allows the analysis to be conducted on arbitrary metric (or semi-metric) spaces. The choice of d is left to the user and will depend on the problem at hand.\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nlibrary(ecotraj)\n## Loading required package: Rcpp\nlibrary(vegan)\n## Loading required package: permute\n## Loading required package: lattice\n## This is vegan 2.6-8\n# load data and create community matrix\ndf = read_csv('data/LDWFseine_monthly2007.csv') \n## Rows: 60 Columns: 127\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr   (1): basin\n## dbl (126): month, Atlantic Croaker, Atlantic Stingray, Bay Anchovy, Bay Whif...\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ndf\n## # A tibble: 60 × 127\n##    basin  month `Atlantic Croaker` `Atlantic Stingray` `Bay Anchovy` `Bay Whiff`\n##    &lt;chr&gt;  &lt;dbl&gt;              &lt;dbl&gt;               &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n##  1 Barat…     1               4.67                   1         54.2            1\n##  2 Barat…     2              13.3                    0          1.43           2\n##  3 Barat…     3              11.7                    0          4.62           1\n##  4 Barat…     4              10.3                    0         39.3            0\n##  5 Barat…     5               4.1                    0         87.9            1\n##  6 Barat…     6               2.57                   0        143.            12\n##  7 Barat…     7               1.67                   0         41.7            1\n##  8 Barat…     8               3.2                    0         57              0\n##  9 Barat…     9               1                      1         37              0\n## 10 Barat…    10               2.33                   0         69.3            1\n## # ℹ 50 more rows\n## # ℹ 121 more variables: `Blue Crab` &lt;dbl&gt;, `Brown Shrimp` &lt;dbl&gt;,\n## #   `Darter Goby` &lt;dbl&gt;, `Diamond Killifish` &lt;dbl&gt;, `Grass Shrimp Spp.` &lt;dbl&gt;,\n## #   `Gulf Killifish` &lt;dbl&gt;, `Gulf Menhaden` &lt;dbl&gt;, `Gulf Pipefish` &lt;dbl&gt;,\n## #   `Inland Silverside` &lt;dbl&gt;, `Mosquito Fish` &lt;dbl&gt;, `Naked Goby` &lt;dbl&gt;,\n## #   `Sharptail Goby` &lt;dbl&gt;, `Sheepshead Minnow` &lt;dbl&gt;, Skilletfish &lt;dbl&gt;,\n## #   `Spotted Porcelain Crab` &lt;dbl&gt;, `Spotted Seatrout` &lt;dbl&gt;, …\n#community matrix \ncomm_matrix = df |&gt; select(-basin, -month)\n\n# site data\nsite = df$basin\n\n# survey \nsurvey = df$month\n\n# create bray curtis dissimilarity matrix\nb_dist = vegdist(comm_matrix, method = \"bray\")\n\n\n\nDisplaying trajectories\nTo begin our analysis of the three trajectories, we display them in an ordination space, using function trajectoryPCoA(). Since Ω has only two dimensions in this example, the Principal Coordinates Analysis (PCoA) on d displays the complete space:\n\n# plot trajectories\ntrajectoryPCoA(d = b_dist, \n               sites = site, \n               surveys = survey, \n               traj.colors = c(\"black\",\"red\", \"blue\", 'lightblue3', 'purple', 'pink'), \n               lwd = 2,\n               survey.labels = T)\n\nlegend(\"bottomleft\", col=c(\"black\",\"red\", \"blue\", 'lightblue3', 'purple', 'pink'), \n       legend=unique(df$basin), bty=\"n\", lty=1, lwd = 2)\n\n\n\n\n\n\n\n\ntrajectoryPCoA() uses PCoA to display the dissimilarity matrix, but other methods can be used. We can use trajectoryPlot() on visualizations (e.g., nMDS) as long as we have x and y coordinates\n\n\n# can be done with other ways\nnmds = metaMDS(comm_matrix, distance = \"bray\", k = 2, try = 100)\n## Square root transformation\n## Wisconsin double standardization\n## Run 0 stress 0.2274282 \n## Run 1 stress 0.2274282 \n## ... Procrustes: rmse 1.180842e-05  max resid 4.736353e-05 \n## ... Similar to previous best\n## Run 2 stress 0.2291718 \n## Run 3 stress 0.2297463 \n## Run 4 stress 0.2593159 \n## Run 5 stress 0.2274331 \n## ... Procrustes: rmse 0.00169924  max resid 0.009863031 \n## ... Similar to previous best\n## Run 6 stress 0.2297582 \n## Run 7 stress 0.2297462 \n## Run 8 stress 0.2274282 \n## ... New best solution\n## ... Procrustes: rmse 1.221638e-05  max resid 6.040869e-05 \n## ... Similar to previous best\n## Run 9 stress 0.2274282 \n## ... Procrustes: rmse 1.517141e-06  max resid 4.099648e-06 \n## ... Similar to previous best\n## Run 10 stress 0.2274331 \n## ... Procrustes: rmse 0.001712677  max resid 0.009948331 \n## ... Similar to previous best\n## Run 11 stress 0.2274331 \n## ... Procrustes: rmse 0.00172207  max resid 0.010007 \n## Run 12 stress 0.2293732 \n## Run 13 stress 0.2293731 \n## Run 14 stress 0.2380905 \n## Run 15 stress 0.2666441 \n## Run 16 stress 0.2274331 \n## ... Procrustes: rmse 0.001712044  max resid 0.009946182 \n## ... Similar to previous best\n## Run 17 stress 0.2439079 \n## Run 18 stress 0.2295724 \n## Run 19 stress 0.2380905 \n## Run 20 stress 0.2297654 \n## *** Best solution repeated 4 times\n\ntrajectoryPlot(x = nmds$points, \n               sites = df$basin, \n               surveys = df$month, \n               traj.colors = c(\"black\",\"red\", \"blue\", 'lightblue3', 'purple', 'pink'), \n               lwd = 2,\n               survey.labels = T)\n\nlegend(\"bottomleft\", col=c(\"black\",\"red\", \"blue\", 'lightblue3', 'purple', 'pink'), \n       legend=unique(df$basin), bty=\"n\", lty=1, lwd = 2)\n\n\n\n\n\n\n\n\nWe can also specify selection = in trajectoryPCoA() and trajectoryPlot() to highlight specific trajectories\n\ntrajectoryPCoA(d = b_dist, \n               sites = df$basin, \n               surveys = df$month, \n               selection = 'Calcasieu',\n               traj.colors = c(\"red\"), \n               lwd = 2,\n               survey.labels = T)\n\n\n\n\n\n\n\n\nWe can also extract the raw information and plot ourselves in ggplot so it is easier to visualize\n\n# convert nMDS to tibble\ndf_nmds = tibble(basin = site, \n                 month = survey, \n                 data.frame(nmds[[\"points\"]])) |&gt; \n      # add end points of each segment for arrow\n      group_by(basin) |&gt; \n      mutate(xend = lead(MDS1), yend = lead(MDS2))\n\nlibrary(viridis)\nlibrary(ggrepel)\n\n# plot \nggplot(df_nmds, aes(MDS1, MDS2))+\n      geom_segment(aes(xend = xend, yend = yend, color = basin),\n                   linewidth = 1,\n                   arrow = arrow(length = unit(0.25, \"cm\")))+\n      ggrepel::geom_text_repel(aes(label=month))+\n      facet_wrap(~basin)+\n      labs(x = 'NMDS1', y = 'NMDS2',\n           color = 'Basin')+\n      scale_color_viridis_d()+\n      theme_bw()+\n      theme(legend.position = 'none')\n## Warning: Removed 1 row containing missing values or values outside the scale range\n## (`geom_segment()`).\n## Removed 1 row containing missing values or values outside the scale range\n## (`geom_segment()`).\n## Removed 1 row containing missing values or values outside the scale range\n## (`geom_segment()`).\n## Removed 1 row containing missing values or values outside the scale range\n## (`geom_segment()`).\n## Removed 1 row containing missing values or values outside the scale range\n## (`geom_segment()`).\n\n\n\n\n\n\n\n\n\n\nTrajectory segment length and total length\ntrajectoryLengths() can be used to get the segment length of each time step and the overall distance.\n\ntrajectoryLengths(b_dist, site, survey)\n##                        S1        S2        S3        S4        S5        S6\n## Barataria       0.6058196 0.1863335 0.6951996 0.3683322 0.5040565 0.6466593\n## Calcasieu       0.6544267 0.7369193 0.6674954 0.7741885 0.9074733 0.8266994\n## Pontchartrain   0.4434848 0.5541205 0.6840378 0.1808410 0.7703344 0.5172024\n## Terrebonne      0.3750622 0.4680416 0.3337381 0.2084657 0.4490802 0.5084592\n## Vermilion-Teche 0.7783232 0.8348226 0.4576137 0.6049397 0.4322798 0.4533951\n##                        S7        S8        S9       S10       S11 Trajectory\n## Barataria       0.5796817 0.4373050 0.6131810 0.6098492 0.4720391   5.718457\n## Calcasieu       0.3896172 0.2640077 0.5755067 0.3544309 0.2518182   6.402583\n## Pontchartrain   0.4283926 0.4108200 0.3269928 0.3390632 0.3771031   5.032393\n## Terrebonne      0.4495234 0.3698038 0.5004380 0.3356094 0.7072511   4.705473\n## Vermilion-Teche 0.4191935 0.5012365 0.3794442 0.3430388 0.5488932   5.753180\n\ntl = trajectoryLengths(b_dist, site, survey) |&gt; \n      rownames_to_column(var = 'basin') |&gt; \n      as_tibble()\n\n# total trajectory length \nggplot(tl, aes(basin, Trajectory, fill = basin))+\n      geom_col()+\n      labs(x = 'Basin', y = 'Trajectory total distance')+\n      scale_fill_viridis_d()+\n      theme_bw()+\n      theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n# segment length \ntll = tl |&gt; \n      pivot_longer(S1:S11, names_to = 'seg', values_to = 'len') |&gt; \n      mutate(seg = factor(seg, levels = c('S1', 'S2','S3', 'S4',\n                                          'S5', 'S6','S7', 'S8',\n                                          'S9', 'S10','S11')))\n\ntll |&gt; group_by(basin) |&gt; \n      summarize(mean = mean(len, na.rm = T),\n                sd = sd(len, na.rm = T))\n## # A tibble: 5 × 3\n##   basin            mean    sd\n##   &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n## 1 Barataria       0.520 0.148\n## 2 Calcasieu       0.582 0.232\n## 3 Pontchartrain   0.457 0.167\n## 4 Terrebonne      0.428 0.128\n## 5 Vermilion-Teche 0.523 0.159\n\nggplot(tll, aes(basin, len, fill = basin))+\n      geom_point(aes(color = basin), size = 1,\n                 position = position_jitterdodge())+\n      geom_boxplot(outliers = F, alpha = 0.6)+\n      labs(x = 'Basin', y = 'Segment length')+\n      scale_fill_viridis_d()+\n      scale_color_viridis_d()+\n      theme_bw()+\n      theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\n\nSpeed of change\nThe speed of change is represented by the segment length divided by the time of change and is calculated with the formula \\[ S(s_i) = {L(s_i)}/{t_{i+1}-t_i}\\] where \\(S(s_i)\\) is the speed of segment \\(i\\), \\(L(s_i)\\) is the length of segment \\(i\\), \\(t_i\\) start time for segment \\(i\\), and \\(t_{i+1}\\) is the time at end of segment \\(i\\).\n\n\n# plot \nggplot(tll, aes(seg, len, group = basin, color = basin))+\n      geom_point(size = 2.5)+\n      geom_line(linewidth = 1)+\n      labs(x = 'Segment', y = 'Speed of change')+\n      scale_x_discrete(labels =c('Jan-Feb', 'Feb-Mar', 'Mar-Apr',\n                      'Apr-May', 'May-Jun', 'Jun-Jul',\n                      'Jul-Aug', 'Aug-Sep', 'Sep-Oct',\n                      'Oct-Nov', 'Nov-Dec'))+\n      scale_color_viridis_d()+\n      theme_bw()+\n      theme(legend.position = 'none',\n            axis.text.x = element_text(angle = 90))\n\n\n\n\n\n\n\n\n\n\nDistance from Baseline\ntrajectoryLengths() can be used to get the relative distance to the baseline when relativeToInitial = T.\n\ntrajectoryLengths(b_dist, site, survey, relativeToInitial = T)\n##                    Lt1_t2    Lt1_t3    Lt1_t4    Lt1_t5    Lt1_t6    Lt1_t7\n## Barataria       0.6058196 0.5917244 0.5237678 0.4518291 0.7562538 0.8601040\n## Calcasieu       0.6544267 0.4619394 0.6244757 0.8477104 0.8404484 0.5115264\n## Pontchartrain   0.4434848 0.5483713 0.7360968 0.8340467 0.4554977 0.5228544\n## Terrebonne      0.3750622 0.5101321 0.6743154 0.7179223 0.6934165 0.7683502\n## Vermilion-Teche 0.7783232 0.3749339 0.2598511 0.7543423 0.8150308 0.7959850\n##                    Lt1_t8    Lt1_t9   Lt1_t10   Lt1_t11   Lt1_t12 Trajectory\n## Barataria       0.8098396 0.8114977 0.8271485 0.7464037 0.7654146   7.749803\n## Calcasieu       0.6792555 0.6842491 0.7856673 0.6306801 0.4956114   7.215990\n## Pontchartrain   0.5781794 0.5716669 0.5127883 0.3493540 0.4444345   5.996775\n## Terrebonne      0.8243958 0.8161678 0.7807234 0.7110774 0.7341720   7.605735\n## Vermilion-Teche 0.7764932 0.9083811 0.6953741 0.8112459 0.3513388   7.321299\n\ntl_init = trajectoryLengths(b_dist, site, survey,\n                            relativeToInitial = T) |&gt; \n      rownames_to_column(var = 'basin') |&gt; \n      as_tibble() |&gt; \n      pivot_longer(Lt1_t2:Lt1_t12, names_to = 'seg', \n                   values_to = 'len') |&gt; \n      mutate(month = str_sub(seg,6) |&gt; as.numeric())\n\n\nggplot(tl_init, aes(factor(month), len, group = basin, color = basin))+\n            geom_point(size = 2.5)+\n      geom_line(linewidth = 1)+\n      labs(x = 'Segment', y = 'Distance from January')+\n      scale_x_discrete(labels =c('Feb', 'Mar', 'Apr',\n                      'May', 'Jun', 'Jul',\n                      'Aug', 'Sep', 'Oct',\n                      'Nov', 'Dec'))+\n      scale_color_viridis_d()+\n      theme_bw()+\n      theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\n\nCumulative distance\nYou can use the output from the trajectoryDistance() to calculate the cumulative sum of the trajectory\n\ntll = tll |&gt; \n      group_by(basin) |&gt; \n      mutate(dist_cuml = cumsum(len))\n\n\nggplot(tll, aes(seg, dist_cuml, group = basin, color = basin))+\n            geom_point(size = 2.5)+\n      geom_line(linewidth = 1)+\n      labs(x = 'Month', y = 'Total segment length')+\n      scale_x_discrete(labels =c('Feb', 'Mar', 'Apr',\n                      'May', 'Jun', 'Jul',\n                      'Aug', 'Sep', 'Oct',\n                      'Nov', 'Dec'))+\n      scale_color_viridis_d()+\n      theme_bw()+\n      theme(legend.position = 'none')"
  },
  {
    "objectID": "ws9.html#exercises",
    "href": "ws9.html#exercises",
    "title": "Workshop 9: Community data: trajectories",
    "section": "Exercises",
    "text": "Exercises\nFor these exercises use the LDWF Calcasieu seine sampling dataset.\n\nUsing the Calcasieu dataset plot the community trajectory for each site.\nCalculate the total path length at each site.\nPlot the speed of change at each site.\nPlot the cumulative length at each time step for each site."
  },
  {
    "objectID": "ws7.html",
    "href": "ws7.html",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "",
    "text": "This workshop discusses working with community data.\nR script: github\nR script of workshop 7\ndata"
  },
  {
    "objectID": "ws7.html#community-data",
    "href": "ws7.html#community-data",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Community Data",
    "text": "Community Data\nCommunity data can vary in format, but typically involves abundance, biomass, or CPUE data for multiple species collected in each sample. Data can be stored in wide (species ID for each column) or long format. When examining community data, the first step is usually data exploration which can be done by calculating summary statistics or plotting.\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# data in wide format\nmarsh_w = read_csv('data/Calcasieu.csv') |&gt; \n  mutate(site = as.character(site),\n         month = month(date)) \n## Rows: 90 Columns: 62\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr   (1): basin\n## dbl  (60): site, Speckled Madtom, Sailfin Molly, Blue Crab, Atlantic Croaker...\n## date  (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmarsh_w\n## # A tibble: 90 × 63\n##    site  date       basin     `Speckled Madtom` `Sailfin Molly` `Blue Crab`\n##    &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;                 &lt;dbl&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n##  1 15    2007-01-10 Calcasieu                 2               1          10\n##  2 15    2007-02-22 Calcasieu                 0               0           0\n##  3 15    2007-03-02 Calcasieu                 0               0          19\n##  4 15    2007-04-11 Calcasieu                 0               2          23\n##  5 15    2007-06-05 Calcasieu                 0               0           0\n##  6 15    2007-07-24 Calcasieu                 0               0           3\n##  7 15    2007-08-07 Calcasieu                 0               0           6\n##  8 15    2007-09-20 Calcasieu                 0               0           0\n##  9 15    2007-09-27 Calcasieu                 0               0           0\n## 10 15    2007-10-03 Calcasieu                 0               0           0\n## # ℹ 80 more rows\n## # ℹ 57 more variables: `Atlantic Croaker` &lt;dbl&gt;, `Gulf Menhaden` &lt;dbl&gt;,\n## #   `Grass Shrimp` &lt;dbl&gt;, `Striped Mullet` &lt;dbl&gt;, `Inland Silverside` &lt;dbl&gt;,\n## #   `Sheepshead Minnow` &lt;dbl&gt;, `Gulf Killifish` &lt;dbl&gt;, `Freshwater Goby` &lt;dbl&gt;,\n## #   `Mosquito Fish` &lt;dbl&gt;, `White Shrimp` &lt;dbl&gt;, `Bay Anchovy` &lt;dbl&gt;,\n## #   `Southern Flounder` &lt;dbl&gt;, `Diamond Killifish` &lt;dbl&gt;, `Naked Goby` &lt;dbl&gt;,\n## #   `Brown Shrimp` &lt;dbl&gt;, `Sand Seatrout` &lt;dbl&gt;, Pinfish &lt;dbl&gt;, …\n\n# convert to long format for plotting\nmarsh_l = marsh_w |&gt; \n  pivot_longer(cols = 4:62, \n               names_to = \"Species\", \n               values_to = \"Count\") \n\nmarsh_l\n## # A tibble: 5,310 × 6\n##    site  date       basin     month Species           Count\n##    &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n##  1 15    2007-01-10 Calcasieu     1 Speckled Madtom       2\n##  2 15    2007-01-10 Calcasieu     1 Sailfin Molly         1\n##  3 15    2007-01-10 Calcasieu     1 Blue Crab            10\n##  4 15    2007-01-10 Calcasieu     1 Atlantic Croaker     47\n##  5 15    2007-01-10 Calcasieu     1 Gulf Menhaden         5\n##  6 15    2007-01-10 Calcasieu     1 Grass Shrimp        134\n##  7 15    2007-01-10 Calcasieu     1 Striped Mullet        2\n##  8 15    2007-01-10 Calcasieu     1 Inland Silverside    50\n##  9 15    2007-01-10 Calcasieu     1 Sheepshead Minnow    10\n## 10 15    2007-01-10 Calcasieu     1 Gulf Killifish        1\n## # ℹ 5,300 more rows\n\n\nCalculate summary statistics\n\nmarsh_ss = marsh_l |&gt; \n  group_by(site) |&gt; \n  summarise(mean_count = mean(Count, na.rm = TRUE),\n            sd_count = sd(Count, na.rm = TRUE),\n            total = sum(Count, na.rm = TRUE)) \n\nmarsh_ss\n## # A tibble: 6 × 4\n##   site  mean_count sd_count total\n##   &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n## 1 15         11.5     132.  10169\n## 2 16         14.5     165.  12876\n## 3 28          4.68     46.7  4138\n## 4 30         17.7     178.  15697\n## 5 32          9.78     77.9  8651\n## 6 51          4.92     66.0  4358\n\n\n\nPlot density of Abundance\n\nggplot(marsh_l, aes(x = Count, fill = site))+\n  geom_density(alpha=0.4) +\n  geom_vline(data=marsh_ss, aes(xintercept=mean_count, color=site),\n             linetype=\"dashed\", linewidth = 1) +\n  theme_bw()\n\n\n\n\n\n\n\n\n# change scale of axis\nggplot(marsh_l, aes(x = Count, fill = site))+\n  geom_density(alpha=0.4) +\n  geom_vline(data=marsh_ss, aes(xintercept=mean_count, color=site),\n             linetype=\"dashed\", linewidth = 1) +\n  scale_x_log10()+\n  theme_bw()\n## Warning in scale_x_log10(): log-10 transformation introduced infinite values.\n## Warning: Removed 4530 rows containing non-finite outside the scale range\n## (`stat_density()`).\n\n\n\n\n\n\n\n\n\n\nViolin plot of abundance\n\nggplot(marsh_l, aes(x = site, y = Count, fill = site))+\n  geom_violin(alpha=0.4) +\n  stat_summary(fun.data=mean_sdl, mult=1, \n               geom=\"pointrange\", color=\"red\") +\n  scale_y_log10()+\n  theme_bw()\n## Warning in stat_summary(fun.data = mean_sdl, mult = 1, geom = \"pointrange\", :\n## Ignoring unknown parameters: `mult`\n## Warning in scale_y_log10(): log-10 transformation introduced infinite values.\n## log-10 transformation introduced infinite values.\n## Warning: Removed 4530 rows containing non-finite outside the scale range\n## (`stat_ydensity()`).\n## Warning: Removed 4530 rows containing non-finite outside the scale range\n## (`stat_summary()`)."
  },
  {
    "objectID": "ws7.html#summarize-and-plot-by-species",
    "href": "ws7.html#summarize-and-plot-by-species",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Summarize and plot by species",
    "text": "Summarize and plot by species\n\nmarsh_summary2 = marsh_l |&gt; \n  group_by(site, Species) |&gt; \n  summarise(mean_count = mean(Count, na.rm = TRUE),\n            sd_count = sd(Count, na.rm = TRUE),\n            total = sum(Count, na.rm = TRUE)) |&gt; \n  mutate(Species = fct_reorder(Species, mean_count, .desc = TRUE))\n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n\nggplot(marsh_summary2, aes(x = Species, y = mean_count, fill = site))+\n  geom_bar(stat = \"identity\", position=position_dodge()) + \n  labs(y = 'Mean Count', x = 'Species', fill = 'site')+\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 0.5))\n\n\n\n\n\n\n\n\n# filter to only top species\nggplot(marsh_summary2 |&gt; filter(total &gt; 1000), aes(x = Species, y = mean_count, fill = site))+\n  geom_bar(stat = \"identity\", position=position_dodge()) + \n  labs(y = 'Mean Count', x = 'Species', fill = 'site')+\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 0.5))"
  },
  {
    "objectID": "ws7.html#diversity-metrics",
    "href": "ws7.html#diversity-metrics",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Diversity metrics",
    "text": "Diversity metrics\nCommunity data due to its multidimensionality is difficulty to interpret. Researchers have developed different indices and metrics to provide information about the biodiversity of the community data."
  },
  {
    "objectID": "ws7.html#species-richness",
    "href": "ws7.html#species-richness",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Species Richness",
    "text": "Species Richness\nSpecies richness (\\(S\\)) is the total number of species.\n\nmarsh_l |&gt; \n  group_by(site, month) |&gt; \n  filter(Count &gt; 0) |&gt; \n  summarise(richness = length(unique(Species))) |&gt; \n  ungroup() |&gt; \n  group_by(site) |&gt; \n  summarise(mean_richness = mean(richness, na.rm = TRUE),\n            sd_richness = sd(richness, na.rm = TRUE))\n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n## # A tibble: 6 × 3\n##   site  mean_richness sd_richness\n##   &lt;chr&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n## 1 15            11.5         2.66\n## 2 16            10.9         2.39\n## 3 28             8           2.66\n## 4 30            10.4         2.97\n## 5 32            10.4         3.48\n## 6 51             8.09        3.24"
  },
  {
    "objectID": "ws7.html#shannon",
    "href": "ws7.html#shannon",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Shannon",
    "text": "Shannon\nThe Shannon diversity index (\\(H'\\)) is a diversity metric that accounts for species proportions and is calculated with the following formula: \\[H' = -\\sum_{i=1}^S p_i \\log(p_i)\\] where \\(p_i\\) is the proportion of species \\(i\\). The higher the value of \\(H'\\), the higher the diversity of species in a particular community. The lower the value of H, the lower the diversity. A value of \\(H'\\) = 0 indicates a community that only has one species.\n\n# for loop\ndf = unique(marsh_l[c(\"site\",\"month\")])\ndf$H = NA\n\ndf\n## # A tibble: 69 × 3\n##    site  month H    \n##    &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt;\n##  1 15        1 NA   \n##  2 15        2 NA   \n##  3 15        3 NA   \n##  4 15        4 NA   \n##  5 15        6 NA   \n##  6 15        7 NA   \n##  7 15        8 NA   \n##  8 15        9 NA   \n##  9 15       10 NA   \n## 10 15       11 NA   \n## # ℹ 59 more rows\n\nfor (i in 1:nrow(df)){\n  d = marsh_l |&gt; filter(site == df$site[i],\n                          month == df$month[i],\n                          Count &gt; 0)\n  d = d |&gt; count(Species,wt = Count) |&gt; \n    mutate(pi = n/sum(n),\n           ln_pi = log(pi),\n           p_ln_pi = pi*ln_pi)\n  \n  df$H[i] = -sum(d$p_ln_pi)\n}\n\ndf\n## # A tibble: 69 × 3\n##    site  month     H\n##    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1 15        1 1.43 \n##  2 15        2 0.405\n##  3 15        3 1.28 \n##  4 15        4 0.978\n##  5 15        6 1.46 \n##  6 15        7 1.39 \n##  7 15        8 1.68 \n##  8 15        9 1.15 \n##  9 15       10 0.915\n## 10 15       11 0.360\n## # ℹ 59 more rows\n\ndf |&gt; \n  group_by(site) |&gt; \n  summarise(mean_H = mean(H, na.rm = TRUE),\n            sd_H = sd(H, na.rm = TRUE))\n## # A tibble: 6 × 3\n##   site  mean_H  sd_H\n##   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n## 1 15     1.16  0.464\n## 2 16     1.02  0.384\n## 3 28     0.956 0.451\n## 4 30     0.941 0.475\n## 5 32     1.08  0.411\n## 6 51     1.06  0.433\n\n\n# dplyr\nmarsh_l |&gt; \n  group_by(site, month) |&gt; \n  filter(Count &gt; 0) |&gt; \n  mutate(Total = sum(Count)) |&gt; \n  ungroup() |&gt; \n  group_by(site, month, Species) |&gt;\n  summarise(Count_Spp = sum(Count),\n            Total_Count = max(Total)) |&gt; \n  mutate(p = Count_Spp/Total_Count, \n         ln_pi = log(p), \n         p_ln_pi = p*ln_pi) |&gt; \n  ungroup() |&gt; \n  group_by(site, month) |&gt; \n  summarise(H = -sum(p_ln_pi)) |&gt; \n  ungroup() |&gt; \n  group_by(site) |&gt; \n  summarise(mean_H = mean(H, na.rm = TRUE),\n            sd_H = sd(H, na.rm = TRUE))\n## `summarise()` has grouped output by 'site', 'month'. You can override using the\n## `.groups` argument.\n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n## # A tibble: 6 × 3\n##   site  mean_H  sd_H\n##   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n## 1 15     1.16  0.464\n## 2 16     1.02  0.384\n## 3 28     0.956 0.451\n## 4 30     0.941 0.475\n## 5 32     1.08  0.411\n## 6 51     1.06  0.433"
  },
  {
    "objectID": "ws7.html#simpson",
    "href": "ws7.html#simpson",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Simpson",
    "text": "Simpson\nAnother popular set of indices are Simpson’s indices. The Simpson index calculated is a dominance metric and is calculated \\[D = \\sum_{i=1}^S p_i^2\\] It ranges between 0 and 1 with high values indicating that abundance is made up of a few species. Its counter part \\(1 - D\\) is an evenness index. The inverse \\(1/D\\) is an indication of the richness in a community with uniform evenness that would have the same level of diversity.\n\n# for loop\ndf$D = NA\ndf\n## # A tibble: 69 × 4\n##    site  month     H D    \n##    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;\n##  1 15        1 1.43  NA   \n##  2 15        2 0.405 NA   \n##  3 15        3 1.28  NA   \n##  4 15        4 0.978 NA   \n##  5 15        6 1.46  NA   \n##  6 15        7 1.39  NA   \n##  7 15        8 1.68  NA   \n##  8 15        9 1.15  NA   \n##  9 15       10 0.915 NA   \n## 10 15       11 0.360 NA   \n## # ℹ 59 more rows\n\nfor (i in 1:nrow(df)){\n  d = marsh_l |&gt; filter(site == df$site[i],\n                        month == df$month[i],\n                        Count &gt; 0)\n  d = d |&gt; count(Species,wt = Count) |&gt; \n    mutate(pi = n/sum(n))\n  \n  df$D[i] = sum(d$pi^2)\n}\ndf$even = 1 - df$D\ndf$inv = 1/df$D\n\ndf\n## # A tibble: 69 × 6\n##    site  month     H     D  even   inv\n##    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1 15        1 1.43  0.331 0.669  3.02\n##  2 15        2 0.405 0.824 0.176  1.21\n##  3 15        3 1.28  0.360 0.640  2.78\n##  4 15        4 0.978 0.515 0.485  1.94\n##  5 15        6 1.46  0.290 0.710  3.45\n##  6 15        7 1.39  0.343 0.657  2.92\n##  7 15        8 1.68  0.247 0.753  4.04\n##  8 15        9 1.15  0.385 0.615  2.60\n##  9 15       10 0.915 0.496 0.504  2.02\n## 10 15       11 0.360 0.860 0.140  1.16\n## # ℹ 59 more rows\n\ndf |&gt; \n  group_by(site) |&gt; \n  summarize(across(D:inv, list(mean = mean, sd = sd)))\n## # A tibble: 6 × 7\n##   site  D_mean  D_sd even_mean even_sd inv_mean inv_sd\n##   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n## 1 15     0.444 0.216     0.556   0.216     2.68  1.04 \n## 2 16     0.514 0.177     0.486   0.177     2.13  0.633\n## 3 28     0.556 0.235     0.444   0.235     2.21  1.17 \n## 4 30     0.568 0.217     0.432   0.217     2.06  0.926\n## 5 32     0.481 0.188     0.519   0.188     2.43  1.07 \n## 6 51     0.487 0.212     0.513   0.212     2.40  0.992\n\n# dplyr\nmarsh_l |&gt; \n  group_by(site, month) |&gt; \n  filter(Count &gt; 0) |&gt; \n  mutate(Total = sum(Count)) |&gt; \n  ungroup() |&gt; \n  group_by(site, month, Species) |&gt;\n  summarize(Count_Spp = sum(Count),\n            Total_Count = max(Total)) |&gt; \n  mutate(p = Count_Spp/Total_Count, \n         p2 = p^2) |&gt; \n  ungroup() |&gt; \n  group_by(site, month) |&gt; \n  summarise(s_dominance = sum(p2),\n            s_evenness = 1 - s_dominance,\n            inverse_s = 1/s_dominance) |&gt; \n  group_by(site) |&gt; \n  summarize(across(s_dominance:s_evenness, list(mean = mean, sd = sd)))\n## `summarise()` has grouped output by 'site', 'month'. You can override using the\n## `.groups` argument.\n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n## # A tibble: 6 × 5\n##   site  s_dominance_mean s_dominance_sd s_evenness_mean s_evenness_sd\n##   &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;         &lt;dbl&gt;\n## 1 15               0.444          0.216           0.556         0.216\n## 2 16               0.514          0.177           0.486         0.177\n## 3 28               0.556          0.235           0.444         0.235\n## 4 30               0.568          0.217           0.432         0.217\n## 5 32               0.481          0.188           0.519         0.188\n## 6 51               0.487          0.212           0.513         0.212"
  },
  {
    "objectID": "ws7.html#species-accumulation-curves",
    "href": "ws7.html#species-accumulation-curves",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Species accumulation curves",
    "text": "Species accumulation curves\nAlso called rarefaction curve, plots the number of species as a function of the number of samples.\n\nmarsh_l = marsh_l |&gt; \n  group_by(site, date) |&gt; \n  mutate(sample_ID = cur_group_id()) |&gt; \n  ungroup()\n\n# curve for site 15\nm15 = marsh_l |&gt; \n  filter(site == '15')\n\nm15_sample_ID  = unique(m15$sample_ID)\n\n# store data\nsp_m15 = tibble(site = '15', n_samp = 1:length(m15_sample_ID), n_spp = NA)\n\nfor (i in 1:length(m15_sample_ID)){\n  # sample ID to include\n  samp = m15_sample_ID[1:i]\n  \n  # include only sample numbers \n  d = m15 |&gt; \n    filter(sample_ID %in% samp,\n           Count &gt; 0)\n  \n  sp_m15$n_spp[i] = length(unique(d$Species))\n}\n\n# curve for 30\nm30 = marsh_l |&gt; \n  filter(site == '30')\n\nm30_sample_ID  = unique(m30$sample_ID)\n\n# store data\nsp_m30 = tibble(site = '30', n_samp = 1:length(m30_sample_ID), n_spp = NA)\n\nfor (i in 1:length(m30_sample_ID)){\n  # sample ID to include\n  samp = m30_sample_ID[1:i]\n  \n  # include only sample numbers \n  d = m30 |&gt; \n    filter(sample_ID %in% samp,\n           Count &gt; 0)\n  \n  sp_m30$n_spp[i] = length(unique(d$Species))\n}\n\n# bind and plot\nsac = bind_rows(sp_m15, sp_m30)\n\nggplot(sac, aes(n_samp, n_spp, color = site))+\n  geom_line(linewidth = 1)+\n  labs(x = 'Number of Samples',\n       y = 'Number of Species',\n       color = 'site')+\n  theme_bw()\n\n\n\n\n\n\n\n\n\nIterate and use based on random samples\n\n# curve for site 15\nm15 = marsh_l |&gt; \n  filter(site == '15')\n\nm15_sample_ID  = unique(m15$sample_ID)\n\niterations = 50\n\n# store data\nsp_m15 = tibble(site = '15', \n               n_samp = rep(1:length(m15_sample_ID),times = iterations), \n               n_spp = NA,\n               i = rep(1:iterations, each = length(m15_sample_ID)))\n\nfor (j in 1:iterations) {\n  # create random sample order\n  sID = sample(m15_sample_ID)\n  for (i in 1:length(m15_sample_ID)) {\n    # sample ID to include\n    samp = sID[1:i]\n    \n    # include only sample numbers\n    d = m15 |&gt;\n      filter(sample_ID %in% samp,\n             Count &gt; 0)\n    \n    sp_m15$n_spp[i+((j-1)*length(m15_sample_ID))] = length(unique(d$Species))\n  }\n}\n\navg = sp_m15 |&gt; \n  group_by(n_samp) |&gt; \n  summarize(m_spp = mean(n_spp, na.rm = T),\n            sd_spp = sd(n_spp, na.rm = T))\n\nggplot(avg, aes(n_samp, m_spp))+\n  geom_ribbon(aes(ymin = m_spp - sd_spp, ymax = m_spp + sd_spp),\n              fill = 'grey')+\n  geom_line(linewidth = 1)+\n  labs(x = 'Number of Samples',\n       y = 'Number of Species',\n       color = 'site')+\n  theme_bw()"
  },
  {
    "objectID": "ws7.html#dominance-curves-whittaker-curves",
    "href": "ws7.html#dominance-curves-whittaker-curves",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Dominance curves / Whittaker curves",
    "text": "Dominance curves / Whittaker curves\nDominance as a function of species rank\n\ndf = marsh_l |&gt; \n    group_by(site) |&gt; \n    filter(Count &gt; 0) |&gt; \n    mutate(Total = sum(Count)) |&gt; \n    group_by(site, Species) |&gt;\n    summarise(Count_Spp = sum(Count),\n              Total_Count = max(Total)) |&gt; \n    mutate(p_i = Count_Spp/Total_Count, \n           rank = length(unique(Species))-rank(p_i)) |&gt; \n    ungroup()\n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n\nggplot(df, aes(rank, p_i, color = site))+\n  geom_line(linewidth = 1)+\n  labs(x = 'Species rank',\n       y = 'Dominance',\n       color = 'site')+\n  theme_bw()"
  },
  {
    "objectID": "ws7.html#k-dominance-curves",
    "href": "ws7.html#k-dominance-curves",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "K-dominance curves",
    "text": "K-dominance curves\nCumulative dominance by species rank\n\ndf = marsh_l |&gt; \n    group_by(site) |&gt; \n    filter(Count &gt; 0) |&gt; \n    mutate(Total = sum(Count)) |&gt; \n    ungroup() |&gt; \n    group_by(site, Species) |&gt;\n    summarise(Count_Spp = sum(Count),\n              Total_Count = max(Total)) |&gt; \n    mutate(p_i = Count_Spp/Total_Count, \n           rank = length(unique(Species))-rank(p_i)) |&gt; \n    arrange(rank, .by_group = T) |&gt; \n  mutate(cumsum = cumsum(p_i))\n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n\nggplot(df, aes(rank, cumsum, color = site))+\n  geom_line(linewidth = 1)+\n  labs(x = 'Species rank',\n       y = 'Cumulative Dominance',\n       color = 'site')+\n  theme_bw()"
  },
  {
    "objectID": "ws7.html#exercises",
    "href": "ws7.html#exercises",
    "title": "Workshop 7: Community data: diversity metrics",
    "section": "Exercises",
    "text": "Exercises\n\nUsing the Calcasieu seine dataset, calculate the species richness for each month at each month and plot over the year.\nCalculate the average Shannon and Simpson indeces for the fall (Sep-Nov) and Spring (March-May) for site 30.\nChallenge: Calculate the average species accumulation curve for site 16 and site 28. Plot your results."
  },
  {
    "objectID": "ws5.html",
    "href": "ws5.html",
    "title": "Workshop 5: Density dependent models",
    "section": "",
    "text": "This workshop cover density dependent population growth models. In these set of models, the change in population size between time points is influenced by the number of individuals in the population. This script will give examples of how to model discrete density dependent population growth models.\nR script: github\nR script of workshop 5"
  },
  {
    "objectID": "ws5.html#discrete-density-dependent-growth-models",
    "href": "ws5.html#discrete-density-dependent-growth-models",
    "title": "Workshop 5: Density dependent models",
    "section": "Discrete density dependent growth models",
    "text": "Discrete density dependent growth models\nThe basic formula for the discrete density dependent growth model is represented by \\[N_{t+1} = N_t + r_dN_t(1-(N_t/K))\\] where \\(N_t\\) is the population size at time \\(t\\), \\(K\\) is the carrying capacity of the population, and \\(r_d\\) is the discrete growth factor. It is important to know that \\(r_d = \\lambda -1\\).\n\nWe can use a for loop to calculate discrete density dependent growth\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nN_0 = 10 #Starting population size\nyears = 50 #fifty time steps\npop = tibble(time = 0:years,\n             Nt = NA)\npop$Nt[pop$time == 0] = N_0\npop\n## # A tibble: 51 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## # ℹ 41 more rows\n\nrd = 1.2 #geometric growth factor\nK = 900 #carrying capacity\n\n#Discrete logistic model using for loop \nfor(i in 2:length(pop$time)){\n  pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / K)\n}\npop\n## # A tibble: 51 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0  10  \n##  2     1  21.9\n##  3     2  47.5\n##  4     3 101. \n##  5     4 209. \n##  6     5 402. \n##  7     6 669. \n##  8     7 875. \n##  9     8 904. \n## 10     9 899. \n## # ℹ 41 more rows\n\n\nggplot(pop, aes(time, Nt))+\n  geom_line(linewidth = 1) +\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_bw()\n\n\n\n\n\n\n\n\nSince we have many arguments, it might make sense for us to use a custom function for this model."
  },
  {
    "objectID": "ws5.html#custom-functions",
    "href": "ws5.html#custom-functions",
    "title": "Workshop 5: Density dependent models",
    "section": "Custom functions",
    "text": "Custom functions\nSo far we have used functions that are apart of base R or from different packages, but we can also build custom functions. Custom functions are useful when existing functions will not do the task at hand, or when combining functions over multiple times. These can be used for vector operations.\nThe basic structure is\n\nfunction_name = function(arguments){\n  code_here\n  return(output)\n}\n\nThe arguments can be empty and therefore required, or set equal to a value. If set to a value, the default is that value, but a new value can be indicated that will override the default value.\n\n# custom funciton \nmy_fx = function(x){\n  b = x * 23\n  return(b)\n}\n\nmy_fx(5)\n## [1] 115\n\nt = seq(2,10,2)\nmy_fx(t)\n## [1]  46  92 138 184 230\n\n# custom function with multiple arguments\nmy_fx2 = function(x,y = 4){\n  b = x/y\n  return(b)\n}\n\nmy_fx2(4)\n## [1] 1\n\nmy_fx2(4, 5)\n## [1] 0.8\nmy_fx2(4,5)\n## [1] 0.8\n\n# custom fucntion with true false\n\nmy_fx3 = function(x = T){ \n  if (x == T){\n    cat('x is true \\n')\n  }else{\n    cat('x is not true \\n')\n  }\n}\n\nmy_fx3(x = T)\n## x is true\nmy_fx3()\n## x is true\nmy_fx3(x = F)\n## x is not true\nmy_fx3(x = 5)\n## x is not true\n\n\n# custom functions with vector operations\nmi_km = function(mi){\n  km = mi * 1.60934\n  return(km)\n}\n\nmtcars %&gt;%\n  mutate(kmpg = mi_km(mpg))\n##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n##                         kmpg\n## Mazda RX4           33.79614\n## Mazda RX4 Wag       33.79614\n## Datsun 710          36.69295\n## Hornet 4 Drive      34.43988\n## Hornet Sportabout   30.09466\n## Valiant             29.12905\n## Duster 360          23.01356\n## Merc 240D           39.26790\n## Merc 230            36.69295\n## Merc 280            30.89933\n## Merc 280C           28.64625\n## Merc 450SE          26.39318\n## Merc 450SL          27.84158\n## Merc 450SLC         24.46197\n## Cadillac Fleetwood  16.73714\n## Lincoln Continental 16.73714\n## Chrysler Imperial   23.65730\n## Fiat 128            52.14262\n## Honda Civic         48.92394\n## Toyota Corolla      54.55663\n## Toyota Corona       34.60081\n## Dodge Challenger    24.94477\n## AMC Javelin         24.46197\n## Camaro Z28          21.40422\n## Pontiac Firebird    30.89933\n## Fiat X1-9           43.93498\n## Porsche 914-2       41.84284\n## Lotus Europa        48.92394\n## Ford Pantera L      25.42757\n## Ferrari Dino        31.70400\n## Maserati Bora       24.14010\n## Volvo 142E          34.43988"
  },
  {
    "objectID": "ws5.html#function-for-density-dependent-growth",
    "href": "ws5.html#function-for-density-dependent-growth",
    "title": "Workshop 5: Density dependent models",
    "section": "Function for density dependent growth",
    "text": "Function for density dependent growth\nUsing a custom function we can create a function for density dependent population growth.\nNote that it is similar to above but instead of \\(N_{t-1}\\) to calculate \\(N_t\\) we are using \\(N_t\\) to calculate \\(N_{t+1}\\)\n\ndlogisticD = function(K, rd, N_0, years) {\n  logis = tibble(Nt = NA, time = 0:years)\n  logis$Nt[logis$time == 0] = N_0\n  \n  for(i in 1:(length(logis$time)-1)){\n    logis$Nt[i+1] = logis$Nt[i]  + rd*logis$Nt[i]*(1 - logis$Nt[i] / K)\n  }\n  return(logis)\n}\n\ndfx = dlogisticD(K = 900, rd = 1.2, N_0 = 10, years = 50) \n\ndfx\n## # A tibble: 51 × 2\n##       Nt  time\n##    &lt;dbl&gt; &lt;int&gt;\n##  1  10       0\n##  2  21.9     1\n##  3  47.5     2\n##  4 101.      3\n##  5 209.      4\n##  6 402.      5\n##  7 669.      6\n##  8 875.      7\n##  9 904.      8\n## 10 899.      9\n## # ℹ 41 more rows\n\nWe can compare the output of the function to the output of the for loop.\n\nlibrary(ggpubr)\n\na = ggplot(pop, aes(x = time, y = Nt)) +\n  geom_line() +\n  geom_point(color = \"red\", size = 2, shape = 1) +\n  labs(x = 'Time', y = expression(italic(N[t])),\n       title = 'For loop')+\n  theme_bw()\n\nb = ggplot(dfx, aes(x = time, y = Nt)) +\n  geom_line() +\n  geom_point(color = \"blue\", size = 2, shape = 1) +\n  labs(x = 'Time', y = expression(italic(N[t])),\n       title = 'Function')+\n  theme_bw()\n\n\n# plot combined\nggarrange(a,b,\n          nrow = 1)"
  },
  {
    "objectID": "ws5.html#relation-between-growth-rate-and-density",
    "href": "ws5.html#relation-between-growth-rate-and-density",
    "title": "Workshop 5: Density dependent models",
    "section": "Relation between growth rate and density",
    "text": "Relation between growth rate and density\nBased on the above population curves, we can see that population growth (\\(\\Delta N_t\\)) starts out small when both \\(t\\) and \\(N_t\\) are small, accelerates as \\(N_t\\) grows, and then over time, slows down and reaches an asymptote of \\(K\\).\nUsing mutate() we can calculate the population growth (\\(\\Delta N_t\\)) and the per capita growth (\\(\\Delta N_t/N_t\\)). The population growth is the \\(r_dN_t(1-N_t/K)\\) of the equation.\n\npop.1 = pop %&gt;%\n  mutate(lambda = lead(Nt) / Nt, pop.growth = (rd*Nt)*(1 - Nt/K),\n         per.capita = pop.growth / Nt)\n\npop.1\n## # A tibble: 51 × 5\n##     time    Nt lambda pop.growth per.capita\n##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n##  1     0  10    2.19       11.9     1.19   \n##  2     1  21.9  2.17       25.6     1.17   \n##  3     2  47.5  2.14       54.0     1.14   \n##  4     3 101.   2.06      108.      1.06   \n##  5     4 209.   1.92      193.      0.921  \n##  6     5 402.   1.66      267.      0.664  \n##  7     6 669.   1.31      206.      0.308  \n##  8     7 875.   1.03       29.0     0.0331 \n##  9     8 904.   0.994      -5.00   -0.00553\n## 10     9 899.   1.00        1.02    0.00114\n## # ℹ 41 more rows\n\n\n#Surplus/Production/Population growth\nsurplus = ggplot(pop.1, aes(Nt, pop.growth)) + \n  geom_line(color = \"red\") +\n  geom_point(size = 2) +\n  labs(x = expression(italic(N[t])),\n       y =  expression('population growth ('~italic(Delta~N[t])~')'),\n       title = 'Surplus production')+\n  theme_bw()\n\n#Per Capita Growth Increment or Density Dependent Effect\nper.capita = ggplot(pop.1, aes(Nt, per.capita)) + \n  geom_line(color = \"blue\") +\n  geom_point(size = 2) +\n  labs(x = expression(italic(N[t])),\n       y =  expression('per capita growth ('~italic(Delta~N[t]/N[t])~')'),\n       title = 'Per Capita Growth')+\n  theme_bw()\n\nggarrange(surplus, per.capita,\n          nrow = 1)"
  },
  {
    "objectID": "ws5.html#effect-of-n_0",
    "href": "ws5.html#effect-of-n_0",
    "title": "Workshop 5: Density dependent models",
    "section": "Effect of \\(N_0\\)",
    "text": "Effect of \\(N_0\\)\nHere we can see how the \\(N_0\\) affects the output of the model.\nWe can do so using a nested for loop.\n\n# set initial parameters\nyears = 20\nrd = 1\nK = 900\nN0s = floor(runif(15, 0, 1.5*K))\n\n#For loop within a for loop example\nfor(j in 1:length(N0s)){\n  # set up tibble to store data\n  popJ = tibble(time = 0:years, Nt = NA, N0 = N0s[j])\n  # set initial condition\n  popJ$Nt[popJ$time == 0] = N0s[j]\n  \n  for(i in 2:length(popJ$time)){\n    \n    popJ$Nt[i] = popJ$Nt[i - 1]  + rd*popJ$Nt[i - 1]*(1 - popJ$Nt[i - 1] / K)\n  }\n  # combine \n  if(j == 1){\n    popAll &lt;- popJ \n  }else{\n    popAll &lt;- bind_rows(popAll, popJ)\n  }\n}\npopAll\n## # A tibble: 315 × 3\n##     time    Nt    N0\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0  476    476\n##  2     1  700.   476\n##  3     2  856.   476\n##  4     3  898.   476\n##  5     4  900.   476\n##  6     5  900.   476\n##  7     6  900    476\n##  8     7  900    476\n##  9     8  900    476\n## 10     9  900    476\n## # ℹ 305 more rows\n\nThis can also be done by using an if statement in the for loop.\n\n# set up tibble to store data\npop3= tibble(time = rep(0:years, times = length(N0s)),\n             Nt = NA, N0 = rep(N0s, each = years + 1))\n# set N_0 \npop3$Nt[pop3$time == 0] = N0s\n\nfor(i in 1:length(pop3$time)){\n  if(pop3$time[i] != 0){\n    pop3$Nt[i] = pop3$Nt[i - 1]  + rd*pop3$Nt[i - 1]*(1 - pop3$Nt[i - 1] / K)}\n}\npop3\n## # A tibble: 315 × 3\n##     time    Nt    N0\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0  476    476\n##  2     1  700.   476\n##  3     2  856.   476\n##  4     3  898.   476\n##  5     4  900.   476\n##  6     5  900.   476\n##  7     6  900    476\n##  8     7  900    476\n##  9     8  900    476\n## 10     9  900    476\n## # ℹ 305 more rows\n\nPlot results\n\nggplot(popAll, aes(time, Nt, color = as.factor(N0))) +\n  geom_line(linewidth = 1)+\n  labs(y = expression(italic(N[t])),\n       x = 'Time',\n       color = expression(italic(N[0])))+\n  theme_bw()+\n  theme(legend.position = 'bottom',\n        legend.text = element_text(size = 8))\n\n\n\n\n\n\n\n\nWhy Overshooting \\(K\\)?"
  },
  {
    "objectID": "ws5.html#effect-of-r_d",
    "href": "ws5.html#effect-of-r_d",
    "title": "Workshop 5: Density dependent models",
    "section": "Effect of \\(r_d\\)",
    "text": "Effect of \\(r_d\\)\nNow let’s see how changing \\(r_d\\) changes the model output\n\n# initial conditions\nyears = 50\nrds = c(1.3, 1.6, 1.9, 2.2, 2.5, 2.8) \nK = 900\nN_0 = 100\n\n# set up tibble to store data\npop4= tibble(time = rep(0:years, times = length(rds)),\n               Nt = NA, rd = rep(rds, each = years + 1))\n# set N_0 \npop4$Nt[pop4$time == 0] = N_0\n\nfor(i in 1:length(pop4$time)){\n  if(pop4$time[i] != 0){\n  pop4$Nt[i] = pop4$Nt[i - 1]  + pop4$rd[i]*pop4$Nt[i - 1]*(1 - pop4$Nt[i - 1] / K)}\n}\npop4\n## # A tibble: 306 × 3\n##     time    Nt    rd\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0  100    1.3\n##  2     1  216.   1.3\n##  3     2  429.   1.3\n##  4     3  721.   1.3\n##  5     4  907.   1.3\n##  6     5  898.   1.3\n##  7     6  901.   1.3\n##  8     7  900.   1.3\n##  9     8  900.   1.3\n## 10     9  900.   1.3\n## # ℹ 296 more rows\n\nPlot the results\n\nggplot(pop4, aes(time, Nt, color = as.factor(rd))) +\n  geom_line(size = 1)+\n  labs(y = expression(italic(N[t])),\n       x = 'Time',\n       color = expression(italic(r[d])))+\n  facet_wrap(~rd, nrow = 2)+\n  theme_bw()+\n  theme(legend.position = 'bottom',\n        legend.text = element_text(size = 8))\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\\(r_d\\) = 1.6-1.9 : dampened oscillation\n\\(r_d\\) = 2 - 2.5 : stable two-point cycles\n\\(r_d\\) = 2.5 - 2.6 : stable four-point cycles or more\n\\(r_d\\) &gt; 2.6 : variable cycles around K through time = Chaos\nChaos - non random, complex, and non repeating cycles sensitive to initial conditions"
  },
  {
    "objectID": "ws5.html#exercises",
    "href": "ws5.html#exercises",
    "title": "Workshop 5: Density dependent models",
    "section": "Exercises",
    "text": "Exercises\n\nUsing the sparrows dataset from the primer package, plot the population size over time. Calculate the average \\(\\lambda\\) (hint: you will need to use the geometric mean) for the sparrow population.\nProject the population over the next 50 years for the sparrow population using the average \\(\\lambda\\) from exercise 1. For now use the mean sparrow count for \\(K\\), and use the minimum sparrow count as \\(N_0\\). Plot the results.\nDid it reach \\(K\\)? If not, how many years does it take based on your \\(r_d\\)? Plot the results.\nChallenge: Simulate/Project the sparrow based on different \\(K\\) = 25, 30, 40, 50. Plot the results.\n\nExercise Solutions"
  },
  {
    "objectID": "ws3.html",
    "href": "ws3.html",
    "title": "Workshop 3: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with conditional statements, for loops, vector operations, and quarto/rmarkdown:\n\nConditional statements\n\nbase R\ndpylr\n\nFor loops\nVector operations\n\ndates with lubridate\npurr\n\nQuarto/rmarkdown\nExercises\n\nR script: [github]https://github.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/blob/main/workshopScripts/workshop3.R)\nR script of workshop 3\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "ws3.html#conditional-statements-for-loops-vector-operations-quartormardown",
    "href": "ws3.html#conditional-statements-for-loops-vector-operations-quartormardown",
    "title": "Workshop 3: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with conditional statements, for loops, vector operations, and quarto/rmarkdown:\n\nConditional statements\n\nbase R\ndpylr\n\nFor loops\nVector operations\n\ndates with lubridate\npurr\n\nQuarto/rmarkdown\nExercises\n\nR script: [github]https://github.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/blob/main/workshopScripts/workshop3.R)\nR script of workshop 3\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "ws3.html#conditional-statements",
    "href": "ws3.html#conditional-statements",
    "title": "Workshop 3: Introduction to R",
    "section": "Conditional statements",
    "text": "Conditional statements\nIn programing there are times that if something is true then you want an operation to occur, but not when a condition is not true. ### Base R These can be done with if and if else statements in base R. These are written if a condition is true then the operation is done. They can be built upon with else if if the first condition is false to do test a second condition. If you want it to be If true and if false do something else then if and else structure can be used.\n\nb = 5 \n\nif (b == 5){\n  cat('b = 5 \\n') # \\n is carriage return to end line when printing\n}\n## b = 5\n\nif (TRUE){\n  c = 6\n}else(\n  c = 10\n)\nc \n## [1] 6\n\nif (F){\n  c = 6\n}else(\n  c = 10\n)\n## [1] 10\nc \n## [1] 10\n\nif (b == 10){\n  cat('b = 10 \\n')\n}else if (b == 5){\n  cat('it worked \\n')\n}else{\n  cat('nothing \\n')\n}\n## it worked\n\n\ndplyr functions\ndplyr has two functions that are very useful for conditional statements. Because they are a function they can be vectorized which will be useful as you see below. if_else() is a function that based on if the input is TRUE or FALSE produces a different answer. case_when() is more flexible and allows for multple outputs based on conditions being TRUE\n\nx = 1:20\n\nif_else(x &gt; 10,\n        'x &gt; 10',\n        'x &lt; 10')\n##  [1] \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\"\n##  [9] \"x &lt; 10\" \"x &lt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\"\n## [17] \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\"\n\n\ncase_when(x &lt; 6 ~ 'x &lt; 6',\n          between(x, 6, 15) ~ '6 &lt;= x &lt;= 15',\n          x &gt; 15 ~ 'x &gt; 15')\n##  [1] \"x &lt; 6\"        \"x &lt; 6\"        \"x &lt; 6\"        \"x &lt; 6\"        \"x &lt; 6\"       \n##  [6] \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\"\n## [11] \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\"\n## [16] \"x &gt; 15\"       \"x &gt; 15\"       \"x &gt; 15\"       \"x &gt; 15\"       \"x &gt; 15\""
  },
  {
    "objectID": "ws3.html#for-loops",
    "href": "ws3.html#for-loops",
    "title": "Workshop 3: Introduction to R",
    "section": "For loops",
    "text": "For loops\nAnother useful tool in programming is for loops. For loops repeat a process for a certain number of iterations. These can be useful iterate over a dataset or when using information in a time series. The for loop works over the number sequence indicated and does the code within the loop (inside of {}) for each number in the sequence. The iteration is typically indicated with i, but is just an object that is replaced at the begining of each loop and can be anything.\n\nfor(i in 1:10){ #Sequence - i object within the sequence from 1 to 10\n  print(i)      #body - the operation to do something (function, operation, etc)\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\n#The iterator could be assigned to any letter or word assigment\nfor(turtle in 5:10){\n  print(turtle)\n}\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\nfor(flower in 1:nrow(iris)){\n  cat('The species for this iteration is ',     #Adding text per row based on name species\n      as.character(iris$Species[flower]), '\\n') #note of importance of \"\\n\n}\n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica\n\nd = seq(1,15, 2) #8 elements\nd\n## [1]  1  3  5  7  9 11 13 15\nfor(i in 1:length(d)){\n  b = d[i] + 1                            #for each i add 1\n  cat('d =',d[i], 'b = d + 1 =', b, '\\n' )#then add string\n}\n## d = 1 b = d + 1 = 2 \n## d = 3 b = d + 1 = 4 \n## d = 5 b = d + 1 = 6 \n## d = 7 b = d + 1 = 8 \n## d = 9 b = d + 1 = 10 \n## d = 11 b = d + 1 = 12 \n## d = 13 b = d + 1 = 14 \n## d = 15 b = d + 1 = 16\n\n#Using seq_along\nd = seq(1,15, 2) #8 elements\nd\n## [1]  1  3  5  7  9 11 13 15\nfor(i in seq_along(d)){\n  b = d[i] + 1                            #for each i add 1\n  cat('d =',d[i], 'b = d + 1 =', b, '\\n' )#then add string\n}\n## d = 1 b = d + 1 = 2 \n## d = 3 b = d + 1 = 4 \n## d = 5 b = d + 1 = 6 \n## d = 7 b = d + 1 = 8 \n## d = 9 b = d + 1 = 10 \n## d = 11 b = d + 1 = 12 \n## d = 13 b = d + 1 = 14 \n## d = 15 b = d + 1 = 16\n\nb = 1:10\nfor (i in 2:10){    #Call a section of vector to start sequence\n  z = b[i] - b[i-1]\n  \n  cat('z =', z, 'b[i] =', b[i], 'b[i-1] =', b[i-1], '\\n')\n}\n## z = 1 b[i] = 2 b[i-1] = 1 \n## z = 1 b[i] = 3 b[i-1] = 2 \n## z = 1 b[i] = 4 b[i-1] = 3 \n## z = 1 b[i] = 5 b[i-1] = 4 \n## z = 1 b[i] = 6 b[i-1] = 5 \n## z = 1 b[i] = 7 b[i-1] = 6 \n## z = 1 b[i] = 8 b[i-1] = 7 \n## z = 1 b[i] = 9 b[i-1] = 8 \n## z = 1 b[i] = 10 b[i-1] = 9\n\n\nstart = 10 \npop = tibble(time = 0:10, n = NA) #Output vector size 10\npop$n[pop$time == 0] = start\npop\n## # A tibble: 11 × 2\n##     time     n\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## 11    10    NA\nfor (t in 1:10){ #sequence \n  growth = rnorm(n =1, mean = 3, sd = 1) #extracting random value normal dist\n  pop$n[pop$time == t] = growth + pop$n[pop$time == (t-1)]\n}\npop\n## # A tibble: 11 × 2\n##     time     n\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0  10  \n##  2     1  12.6\n##  3     2  15.8\n##  4     3  18.5\n##  5     4  19.5\n##  6     5  24.1\n##  7     6  27.4\n##  8     7  29.6\n##  9     8  32.8\n## 10     9  37.9\n## 11    10  40.5"
  },
  {
    "objectID": "ws3.html#vector-operations",
    "href": "ws3.html#vector-operations",
    "title": "Workshop 3: Introduction to R",
    "section": "Vector operations",
    "text": "Vector operations\nAs we have seen above, we can do operations over vectors. We sometimes want to do this to vectors stored in dataframes/tibbles, and the mutate() function makes this easy. This can be applied to multiple columns at once with across()\n\niris |&gt; \n  mutate(petalArea = Petal.Length*Petal.Width)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species petalArea\n## 1            5.1         3.5          1.4         0.2     setosa      0.28\n## 2            4.9         3.0          1.4         0.2     setosa      0.28\n## 3            4.7         3.2          1.3         0.2     setosa      0.26\n## 4            4.6         3.1          1.5         0.2     setosa      0.30\n## 5            5.0         3.6          1.4         0.2     setosa      0.28\n## 6            5.4         3.9          1.7         0.4     setosa      0.68\n## 7            4.6         3.4          1.4         0.3     setosa      0.42\n## 8            5.0         3.4          1.5         0.2     setosa      0.30\n## 9            4.4         2.9          1.4         0.2     setosa      0.28\n## 10           4.9         3.1          1.5         0.1     setosa      0.15\n## 11           5.4         3.7          1.5         0.2     setosa      0.30\n## 12           4.8         3.4          1.6         0.2     setosa      0.32\n## 13           4.8         3.0          1.4         0.1     setosa      0.14\n## 14           4.3         3.0          1.1         0.1     setosa      0.11\n## 15           5.8         4.0          1.2         0.2     setosa      0.24\n## 16           5.7         4.4          1.5         0.4     setosa      0.60\n## 17           5.4         3.9          1.3         0.4     setosa      0.52\n## 18           5.1         3.5          1.4         0.3     setosa      0.42\n## 19           5.7         3.8          1.7         0.3     setosa      0.51\n## 20           5.1         3.8          1.5         0.3     setosa      0.45\n## 21           5.4         3.4          1.7         0.2     setosa      0.34\n## 22           5.1         3.7          1.5         0.4     setosa      0.60\n## 23           4.6         3.6          1.0         0.2     setosa      0.20\n## 24           5.1         3.3          1.7         0.5     setosa      0.85\n## 25           4.8         3.4          1.9         0.2     setosa      0.38\n## 26           5.0         3.0          1.6         0.2     setosa      0.32\n## 27           5.0         3.4          1.6         0.4     setosa      0.64\n## 28           5.2         3.5          1.5         0.2     setosa      0.30\n## 29           5.2         3.4          1.4         0.2     setosa      0.28\n## 30           4.7         3.2          1.6         0.2     setosa      0.32\n## 31           4.8         3.1          1.6         0.2     setosa      0.32\n## 32           5.4         3.4          1.5         0.4     setosa      0.60\n## 33           5.2         4.1          1.5         0.1     setosa      0.15\n## 34           5.5         4.2          1.4         0.2     setosa      0.28\n## 35           4.9         3.1          1.5         0.2     setosa      0.30\n## 36           5.0         3.2          1.2         0.2     setosa      0.24\n## 37           5.5         3.5          1.3         0.2     setosa      0.26\n## 38           4.9         3.6          1.4         0.1     setosa      0.14\n## 39           4.4         3.0          1.3         0.2     setosa      0.26\n## 40           5.1         3.4          1.5         0.2     setosa      0.30\n## 41           5.0         3.5          1.3         0.3     setosa      0.39\n## 42           4.5         2.3          1.3         0.3     setosa      0.39\n## 43           4.4         3.2          1.3         0.2     setosa      0.26\n## 44           5.0         3.5          1.6         0.6     setosa      0.96\n## 45           5.1         3.8          1.9         0.4     setosa      0.76\n## 46           4.8         3.0          1.4         0.3     setosa      0.42\n## 47           5.1         3.8          1.6         0.2     setosa      0.32\n## 48           4.6         3.2          1.4         0.2     setosa      0.28\n## 49           5.3         3.7          1.5         0.2     setosa      0.30\n## 50           5.0         3.3          1.4         0.2     setosa      0.28\n## 51           7.0         3.2          4.7         1.4 versicolor      6.58\n## 52           6.4         3.2          4.5         1.5 versicolor      6.75\n## 53           6.9         3.1          4.9         1.5 versicolor      7.35\n## 54           5.5         2.3          4.0         1.3 versicolor      5.20\n## 55           6.5         2.8          4.6         1.5 versicolor      6.90\n## 56           5.7         2.8          4.5         1.3 versicolor      5.85\n## 57           6.3         3.3          4.7         1.6 versicolor      7.52\n## 58           4.9         2.4          3.3         1.0 versicolor      3.30\n## 59           6.6         2.9          4.6         1.3 versicolor      5.98\n## 60           5.2         2.7          3.9         1.4 versicolor      5.46\n## 61           5.0         2.0          3.5         1.0 versicolor      3.50\n## 62           5.9         3.0          4.2         1.5 versicolor      6.30\n## 63           6.0         2.2          4.0         1.0 versicolor      4.00\n## 64           6.1         2.9          4.7         1.4 versicolor      6.58\n## 65           5.6         2.9          3.6         1.3 versicolor      4.68\n## 66           6.7         3.1          4.4         1.4 versicolor      6.16\n## 67           5.6         3.0          4.5         1.5 versicolor      6.75\n## 68           5.8         2.7          4.1         1.0 versicolor      4.10\n## 69           6.2         2.2          4.5         1.5 versicolor      6.75\n## 70           5.6         2.5          3.9         1.1 versicolor      4.29\n## 71           5.9         3.2          4.8         1.8 versicolor      8.64\n## 72           6.1         2.8          4.0         1.3 versicolor      5.20\n## 73           6.3         2.5          4.9         1.5 versicolor      7.35\n## 74           6.1         2.8          4.7         1.2 versicolor      5.64\n## 75           6.4         2.9          4.3         1.3 versicolor      5.59\n## 76           6.6         3.0          4.4         1.4 versicolor      6.16\n## 77           6.8         2.8          4.8         1.4 versicolor      6.72\n## 78           6.7         3.0          5.0         1.7 versicolor      8.50\n## 79           6.0         2.9          4.5         1.5 versicolor      6.75\n## 80           5.7         2.6          3.5         1.0 versicolor      3.50\n## 81           5.5         2.4          3.8         1.1 versicolor      4.18\n## 82           5.5         2.4          3.7         1.0 versicolor      3.70\n## 83           5.8         2.7          3.9         1.2 versicolor      4.68\n## 84           6.0         2.7          5.1         1.6 versicolor      8.16\n## 85           5.4         3.0          4.5         1.5 versicolor      6.75\n## 86           6.0         3.4          4.5         1.6 versicolor      7.20\n## 87           6.7         3.1          4.7         1.5 versicolor      7.05\n## 88           6.3         2.3          4.4         1.3 versicolor      5.72\n## 89           5.6         3.0          4.1         1.3 versicolor      5.33\n## 90           5.5         2.5          4.0         1.3 versicolor      5.20\n## 91           5.5         2.6          4.4         1.2 versicolor      5.28\n## 92           6.1         3.0          4.6         1.4 versicolor      6.44\n## 93           5.8         2.6          4.0         1.2 versicolor      4.80\n## 94           5.0         2.3          3.3         1.0 versicolor      3.30\n## 95           5.6         2.7          4.2         1.3 versicolor      5.46\n## 96           5.7         3.0          4.2         1.2 versicolor      5.04\n## 97           5.7         2.9          4.2         1.3 versicolor      5.46\n## 98           6.2         2.9          4.3         1.3 versicolor      5.59\n## 99           5.1         2.5          3.0         1.1 versicolor      3.30\n## 100          5.7         2.8          4.1         1.3 versicolor      5.33\n## 101          6.3         3.3          6.0         2.5  virginica     15.00\n## 102          5.8         2.7          5.1         1.9  virginica      9.69\n## 103          7.1         3.0          5.9         2.1  virginica     12.39\n## 104          6.3         2.9          5.6         1.8  virginica     10.08\n## 105          6.5         3.0          5.8         2.2  virginica     12.76\n## 106          7.6         3.0          6.6         2.1  virginica     13.86\n## 107          4.9         2.5          4.5         1.7  virginica      7.65\n## 108          7.3         2.9          6.3         1.8  virginica     11.34\n## 109          6.7         2.5          5.8         1.8  virginica     10.44\n## 110          7.2         3.6          6.1         2.5  virginica     15.25\n## 111          6.5         3.2          5.1         2.0  virginica     10.20\n## 112          6.4         2.7          5.3         1.9  virginica     10.07\n## 113          6.8         3.0          5.5         2.1  virginica     11.55\n## 114          5.7         2.5          5.0         2.0  virginica     10.00\n## 115          5.8         2.8          5.1         2.4  virginica     12.24\n## 116          6.4         3.2          5.3         2.3  virginica     12.19\n## 117          6.5         3.0          5.5         1.8  virginica      9.90\n## 118          7.7         3.8          6.7         2.2  virginica     14.74\n## 119          7.7         2.6          6.9         2.3  virginica     15.87\n## 120          6.0         2.2          5.0         1.5  virginica      7.50\n## 121          6.9         3.2          5.7         2.3  virginica     13.11\n## 122          5.6         2.8          4.9         2.0  virginica      9.80\n## 123          7.7         2.8          6.7         2.0  virginica     13.40\n## 124          6.3         2.7          4.9         1.8  virginica      8.82\n## 125          6.7         3.3          5.7         2.1  virginica     11.97\n## 126          7.2         3.2          6.0         1.8  virginica     10.80\n## 127          6.2         2.8          4.8         1.8  virginica      8.64\n## 128          6.1         3.0          4.9         1.8  virginica      8.82\n## 129          6.4         2.8          5.6         2.1  virginica     11.76\n## 130          7.2         3.0          5.8         1.6  virginica      9.28\n## 131          7.4         2.8          6.1         1.9  virginica     11.59\n## 132          7.9         3.8          6.4         2.0  virginica     12.80\n## 133          6.4         2.8          5.6         2.2  virginica     12.32\n## 134          6.3         2.8          5.1         1.5  virginica      7.65\n## 135          6.1         2.6          5.6         1.4  virginica      7.84\n## 136          7.7         3.0          6.1         2.3  virginica     14.03\n## 137          6.3         3.4          5.6         2.4  virginica     13.44\n## 138          6.4         3.1          5.5         1.8  virginica      9.90\n## 139          6.0         3.0          4.8         1.8  virginica      8.64\n## 140          6.9         3.1          5.4         2.1  virginica     11.34\n## 141          6.7         3.1          5.6         2.4  virginica     13.44\n## 142          6.9         3.1          5.1         2.3  virginica     11.73\n## 143          5.8         2.7          5.1         1.9  virginica      9.69\n## 144          6.8         3.2          5.9         2.3  virginica     13.57\n## 145          6.7         3.3          5.7         2.5  virginica     14.25\n## 146          6.7         3.0          5.2         2.3  virginica     11.96\n## 147          6.3         2.5          5.0         1.9  virginica      9.50\n## 148          6.5         3.0          5.2         2.0  virginica     10.40\n## 149          6.2         3.4          5.4         2.3  virginica     12.42\n## 150          5.9         3.0          5.1         1.8  virginica      9.18\n\niris |&gt;\n  mutate(petalArea = Petal.Length*Petal.Width,\n         PetalSize = if_else(condition = petalArea &gt; 0.2, true ='big',\n                             false = 'small'))\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species petalArea\n## 1            5.1         3.5          1.4         0.2     setosa      0.28\n## 2            4.9         3.0          1.4         0.2     setosa      0.28\n## 3            4.7         3.2          1.3         0.2     setosa      0.26\n## 4            4.6         3.1          1.5         0.2     setosa      0.30\n## 5            5.0         3.6          1.4         0.2     setosa      0.28\n## 6            5.4         3.9          1.7         0.4     setosa      0.68\n## 7            4.6         3.4          1.4         0.3     setosa      0.42\n## 8            5.0         3.4          1.5         0.2     setosa      0.30\n## 9            4.4         2.9          1.4         0.2     setosa      0.28\n## 10           4.9         3.1          1.5         0.1     setosa      0.15\n## 11           5.4         3.7          1.5         0.2     setosa      0.30\n## 12           4.8         3.4          1.6         0.2     setosa      0.32\n## 13           4.8         3.0          1.4         0.1     setosa      0.14\n## 14           4.3         3.0          1.1         0.1     setosa      0.11\n## 15           5.8         4.0          1.2         0.2     setosa      0.24\n## 16           5.7         4.4          1.5         0.4     setosa      0.60\n## 17           5.4         3.9          1.3         0.4     setosa      0.52\n## 18           5.1         3.5          1.4         0.3     setosa      0.42\n## 19           5.7         3.8          1.7         0.3     setosa      0.51\n## 20           5.1         3.8          1.5         0.3     setosa      0.45\n## 21           5.4         3.4          1.7         0.2     setosa      0.34\n## 22           5.1         3.7          1.5         0.4     setosa      0.60\n## 23           4.6         3.6          1.0         0.2     setosa      0.20\n## 24           5.1         3.3          1.7         0.5     setosa      0.85\n## 25           4.8         3.4          1.9         0.2     setosa      0.38\n## 26           5.0         3.0          1.6         0.2     setosa      0.32\n## 27           5.0         3.4          1.6         0.4     setosa      0.64\n## 28           5.2         3.5          1.5         0.2     setosa      0.30\n## 29           5.2         3.4          1.4         0.2     setosa      0.28\n## 30           4.7         3.2          1.6         0.2     setosa      0.32\n## 31           4.8         3.1          1.6         0.2     setosa      0.32\n## 32           5.4         3.4          1.5         0.4     setosa      0.60\n## 33           5.2         4.1          1.5         0.1     setosa      0.15\n## 34           5.5         4.2          1.4         0.2     setosa      0.28\n## 35           4.9         3.1          1.5         0.2     setosa      0.30\n## 36           5.0         3.2          1.2         0.2     setosa      0.24\n## 37           5.5         3.5          1.3         0.2     setosa      0.26\n## 38           4.9         3.6          1.4         0.1     setosa      0.14\n## 39           4.4         3.0          1.3         0.2     setosa      0.26\n## 40           5.1         3.4          1.5         0.2     setosa      0.30\n## 41           5.0         3.5          1.3         0.3     setosa      0.39\n## 42           4.5         2.3          1.3         0.3     setosa      0.39\n## 43           4.4         3.2          1.3         0.2     setosa      0.26\n## 44           5.0         3.5          1.6         0.6     setosa      0.96\n## 45           5.1         3.8          1.9         0.4     setosa      0.76\n## 46           4.8         3.0          1.4         0.3     setosa      0.42\n## 47           5.1         3.8          1.6         0.2     setosa      0.32\n## 48           4.6         3.2          1.4         0.2     setosa      0.28\n## 49           5.3         3.7          1.5         0.2     setosa      0.30\n## 50           5.0         3.3          1.4         0.2     setosa      0.28\n## 51           7.0         3.2          4.7         1.4 versicolor      6.58\n## 52           6.4         3.2          4.5         1.5 versicolor      6.75\n## 53           6.9         3.1          4.9         1.5 versicolor      7.35\n## 54           5.5         2.3          4.0         1.3 versicolor      5.20\n## 55           6.5         2.8          4.6         1.5 versicolor      6.90\n## 56           5.7         2.8          4.5         1.3 versicolor      5.85\n## 57           6.3         3.3          4.7         1.6 versicolor      7.52\n## 58           4.9         2.4          3.3         1.0 versicolor      3.30\n## 59           6.6         2.9          4.6         1.3 versicolor      5.98\n## 60           5.2         2.7          3.9         1.4 versicolor      5.46\n## 61           5.0         2.0          3.5         1.0 versicolor      3.50\n## 62           5.9         3.0          4.2         1.5 versicolor      6.30\n## 63           6.0         2.2          4.0         1.0 versicolor      4.00\n## 64           6.1         2.9          4.7         1.4 versicolor      6.58\n## 65           5.6         2.9          3.6         1.3 versicolor      4.68\n## 66           6.7         3.1          4.4         1.4 versicolor      6.16\n## 67           5.6         3.0          4.5         1.5 versicolor      6.75\n## 68           5.8         2.7          4.1         1.0 versicolor      4.10\n## 69           6.2         2.2          4.5         1.5 versicolor      6.75\n## 70           5.6         2.5          3.9         1.1 versicolor      4.29\n## 71           5.9         3.2          4.8         1.8 versicolor      8.64\n## 72           6.1         2.8          4.0         1.3 versicolor      5.20\n## 73           6.3         2.5          4.9         1.5 versicolor      7.35\n## 74           6.1         2.8          4.7         1.2 versicolor      5.64\n## 75           6.4         2.9          4.3         1.3 versicolor      5.59\n## 76           6.6         3.0          4.4         1.4 versicolor      6.16\n## 77           6.8         2.8          4.8         1.4 versicolor      6.72\n## 78           6.7         3.0          5.0         1.7 versicolor      8.50\n## 79           6.0         2.9          4.5         1.5 versicolor      6.75\n## 80           5.7         2.6          3.5         1.0 versicolor      3.50\n## 81           5.5         2.4          3.8         1.1 versicolor      4.18\n## 82           5.5         2.4          3.7         1.0 versicolor      3.70\n## 83           5.8         2.7          3.9         1.2 versicolor      4.68\n## 84           6.0         2.7          5.1         1.6 versicolor      8.16\n## 85           5.4         3.0          4.5         1.5 versicolor      6.75\n## 86           6.0         3.4          4.5         1.6 versicolor      7.20\n## 87           6.7         3.1          4.7         1.5 versicolor      7.05\n## 88           6.3         2.3          4.4         1.3 versicolor      5.72\n## 89           5.6         3.0          4.1         1.3 versicolor      5.33\n## 90           5.5         2.5          4.0         1.3 versicolor      5.20\n## 91           5.5         2.6          4.4         1.2 versicolor      5.28\n## 92           6.1         3.0          4.6         1.4 versicolor      6.44\n## 93           5.8         2.6          4.0         1.2 versicolor      4.80\n## 94           5.0         2.3          3.3         1.0 versicolor      3.30\n## 95           5.6         2.7          4.2         1.3 versicolor      5.46\n## 96           5.7         3.0          4.2         1.2 versicolor      5.04\n## 97           5.7         2.9          4.2         1.3 versicolor      5.46\n## 98           6.2         2.9          4.3         1.3 versicolor      5.59\n## 99           5.1         2.5          3.0         1.1 versicolor      3.30\n## 100          5.7         2.8          4.1         1.3 versicolor      5.33\n## 101          6.3         3.3          6.0         2.5  virginica     15.00\n## 102          5.8         2.7          5.1         1.9  virginica      9.69\n## 103          7.1         3.0          5.9         2.1  virginica     12.39\n## 104          6.3         2.9          5.6         1.8  virginica     10.08\n## 105          6.5         3.0          5.8         2.2  virginica     12.76\n## 106          7.6         3.0          6.6         2.1  virginica     13.86\n## 107          4.9         2.5          4.5         1.7  virginica      7.65\n## 108          7.3         2.9          6.3         1.8  virginica     11.34\n## 109          6.7         2.5          5.8         1.8  virginica     10.44\n## 110          7.2         3.6          6.1         2.5  virginica     15.25\n## 111          6.5         3.2          5.1         2.0  virginica     10.20\n## 112          6.4         2.7          5.3         1.9  virginica     10.07\n## 113          6.8         3.0          5.5         2.1  virginica     11.55\n## 114          5.7         2.5          5.0         2.0  virginica     10.00\n## 115          5.8         2.8          5.1         2.4  virginica     12.24\n## 116          6.4         3.2          5.3         2.3  virginica     12.19\n## 117          6.5         3.0          5.5         1.8  virginica      9.90\n## 118          7.7         3.8          6.7         2.2  virginica     14.74\n## 119          7.7         2.6          6.9         2.3  virginica     15.87\n## 120          6.0         2.2          5.0         1.5  virginica      7.50\n## 121          6.9         3.2          5.7         2.3  virginica     13.11\n## 122          5.6         2.8          4.9         2.0  virginica      9.80\n## 123          7.7         2.8          6.7         2.0  virginica     13.40\n## 124          6.3         2.7          4.9         1.8  virginica      8.82\n## 125          6.7         3.3          5.7         2.1  virginica     11.97\n## 126          7.2         3.2          6.0         1.8  virginica     10.80\n## 127          6.2         2.8          4.8         1.8  virginica      8.64\n## 128          6.1         3.0          4.9         1.8  virginica      8.82\n## 129          6.4         2.8          5.6         2.1  virginica     11.76\n## 130          7.2         3.0          5.8         1.6  virginica      9.28\n## 131          7.4         2.8          6.1         1.9  virginica     11.59\n## 132          7.9         3.8          6.4         2.0  virginica     12.80\n## 133          6.4         2.8          5.6         2.2  virginica     12.32\n## 134          6.3         2.8          5.1         1.5  virginica      7.65\n## 135          6.1         2.6          5.6         1.4  virginica      7.84\n## 136          7.7         3.0          6.1         2.3  virginica     14.03\n## 137          6.3         3.4          5.6         2.4  virginica     13.44\n## 138          6.4         3.1          5.5         1.8  virginica      9.90\n## 139          6.0         3.0          4.8         1.8  virginica      8.64\n## 140          6.9         3.1          5.4         2.1  virginica     11.34\n## 141          6.7         3.1          5.6         2.4  virginica     13.44\n## 142          6.9         3.1          5.1         2.3  virginica     11.73\n## 143          5.8         2.7          5.1         1.9  virginica      9.69\n## 144          6.8         3.2          5.9         2.3  virginica     13.57\n## 145          6.7         3.3          5.7         2.5  virginica     14.25\n## 146          6.7         3.0          5.2         2.3  virginica     11.96\n## 147          6.3         2.5          5.0         1.9  virginica      9.50\n## 148          6.5         3.0          5.2         2.0  virginica     10.40\n## 149          6.2         3.4          5.4         2.3  virginica     12.42\n## 150          5.9         3.0          5.1         1.8  virginica      9.18\n##     PetalSize\n## 1         big\n## 2         big\n## 3         big\n## 4         big\n## 5         big\n## 6         big\n## 7         big\n## 8         big\n## 9         big\n## 10      small\n## 11        big\n## 12        big\n## 13      small\n## 14      small\n## 15        big\n## 16        big\n## 17        big\n## 18        big\n## 19        big\n## 20        big\n## 21        big\n## 22        big\n## 23      small\n## 24        big\n## 25        big\n## 26        big\n## 27        big\n## 28        big\n## 29        big\n## 30        big\n## 31        big\n## 32        big\n## 33      small\n## 34        big\n## 35        big\n## 36        big\n## 37        big\n## 38      small\n## 39        big\n## 40        big\n## 41        big\n## 42        big\n## 43        big\n## 44        big\n## 45        big\n## 46        big\n## 47        big\n## 48        big\n## 49        big\n## 50        big\n## 51        big\n## 52        big\n## 53        big\n## 54        big\n## 55        big\n## 56        big\n## 57        big\n## 58        big\n## 59        big\n## 60        big\n## 61        big\n## 62        big\n## 63        big\n## 64        big\n## 65        big\n## 66        big\n## 67        big\n## 68        big\n## 69        big\n## 70        big\n## 71        big\n## 72        big\n## 73        big\n## 74        big\n## 75        big\n## 76        big\n## 77        big\n## 78        big\n## 79        big\n## 80        big\n## 81        big\n## 82        big\n## 83        big\n## 84        big\n## 85        big\n## 86        big\n## 87        big\n## 88        big\n## 89        big\n## 90        big\n## 91        big\n## 92        big\n## 93        big\n## 94        big\n## 95        big\n## 96        big\n## 97        big\n## 98        big\n## 99        big\n## 100       big\n## 101       big\n## 102       big\n## 103       big\n## 104       big\n## 105       big\n## 106       big\n## 107       big\n## 108       big\n## 109       big\n## 110       big\n## 111       big\n## 112       big\n## 113       big\n## 114       big\n## 115       big\n## 116       big\n## 117       big\n## 118       big\n## 119       big\n## 120       big\n## 121       big\n## 122       big\n## 123       big\n## 124       big\n## 125       big\n## 126       big\n## 127       big\n## 128       big\n## 129       big\n## 130       big\n## 131       big\n## 132       big\n## 133       big\n## 134       big\n## 135       big\n## 136       big\n## 137       big\n## 138       big\n## 139       big\n## 140       big\n## 141       big\n## 142       big\n## 143       big\n## 144       big\n## 145       big\n## 146       big\n## 147       big\n## 148       big\n## 149       big\n## 150       big\n\niris |&gt;\n  mutate(petalArea = Petal.Length*Petal.Width,\n         PetalSize = if_else(condition = petalArea &gt; 0.2, true ='big',\n                             false = 'small'))|&gt;\n  group_by(PetalSize)|&gt;\n  summarize(mean = mean(Petal.Width),\n            n = n())\n## # A tibble: 2 × 3\n##   PetalSize  mean     n\n##   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt;\n## 1 big       1.24    144\n## 2 small     0.117     6\n\n## across can do multiple columns at once\niris |&gt; \n  mutate(across(where(is.numeric), ~.x +1)) # add 1 to all numeric columns\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            6.1         4.5          2.4         1.2     setosa\n## 2            5.9         4.0          2.4         1.2     setosa\n## 3            5.7         4.2          2.3         1.2     setosa\n## 4            5.6         4.1          2.5         1.2     setosa\n## 5            6.0         4.6          2.4         1.2     setosa\n## 6            6.4         4.9          2.7         1.4     setosa\n## 7            5.6         4.4          2.4         1.3     setosa\n## 8            6.0         4.4          2.5         1.2     setosa\n## 9            5.4         3.9          2.4         1.2     setosa\n## 10           5.9         4.1          2.5         1.1     setosa\n## 11           6.4         4.7          2.5         1.2     setosa\n## 12           5.8         4.4          2.6         1.2     setosa\n## 13           5.8         4.0          2.4         1.1     setosa\n## 14           5.3         4.0          2.1         1.1     setosa\n## 15           6.8         5.0          2.2         1.2     setosa\n## 16           6.7         5.4          2.5         1.4     setosa\n## 17           6.4         4.9          2.3         1.4     setosa\n## 18           6.1         4.5          2.4         1.3     setosa\n## 19           6.7         4.8          2.7         1.3     setosa\n## 20           6.1         4.8          2.5         1.3     setosa\n## 21           6.4         4.4          2.7         1.2     setosa\n## 22           6.1         4.7          2.5         1.4     setosa\n## 23           5.6         4.6          2.0         1.2     setosa\n## 24           6.1         4.3          2.7         1.5     setosa\n## 25           5.8         4.4          2.9         1.2     setosa\n## 26           6.0         4.0          2.6         1.2     setosa\n## 27           6.0         4.4          2.6         1.4     setosa\n## 28           6.2         4.5          2.5         1.2     setosa\n## 29           6.2         4.4          2.4         1.2     setosa\n## 30           5.7         4.2          2.6         1.2     setosa\n## 31           5.8         4.1          2.6         1.2     setosa\n## 32           6.4         4.4          2.5         1.4     setosa\n## 33           6.2         5.1          2.5         1.1     setosa\n## 34           6.5         5.2          2.4         1.2     setosa\n## 35           5.9         4.1          2.5         1.2     setosa\n## 36           6.0         4.2          2.2         1.2     setosa\n## 37           6.5         4.5          2.3         1.2     setosa\n## 38           5.9         4.6          2.4         1.1     setosa\n## 39           5.4         4.0          2.3         1.2     setosa\n## 40           6.1         4.4          2.5         1.2     setosa\n## 41           6.0         4.5          2.3         1.3     setosa\n## 42           5.5         3.3          2.3         1.3     setosa\n## 43           5.4         4.2          2.3         1.2     setosa\n## 44           6.0         4.5          2.6         1.6     setosa\n## 45           6.1         4.8          2.9         1.4     setosa\n## 46           5.8         4.0          2.4         1.3     setosa\n## 47           6.1         4.8          2.6         1.2     setosa\n## 48           5.6         4.2          2.4         1.2     setosa\n## 49           6.3         4.7          2.5         1.2     setosa\n## 50           6.0         4.3          2.4         1.2     setosa\n## 51           8.0         4.2          5.7         2.4 versicolor\n## 52           7.4         4.2          5.5         2.5 versicolor\n## 53           7.9         4.1          5.9         2.5 versicolor\n## 54           6.5         3.3          5.0         2.3 versicolor\n## 55           7.5         3.8          5.6         2.5 versicolor\n## 56           6.7         3.8          5.5         2.3 versicolor\n## 57           7.3         4.3          5.7         2.6 versicolor\n## 58           5.9         3.4          4.3         2.0 versicolor\n## 59           7.6         3.9          5.6         2.3 versicolor\n## 60           6.2         3.7          4.9         2.4 versicolor\n## 61           6.0         3.0          4.5         2.0 versicolor\n## 62           6.9         4.0          5.2         2.5 versicolor\n## 63           7.0         3.2          5.0         2.0 versicolor\n## 64           7.1         3.9          5.7         2.4 versicolor\n## 65           6.6         3.9          4.6         2.3 versicolor\n## 66           7.7         4.1          5.4         2.4 versicolor\n## 67           6.6         4.0          5.5         2.5 versicolor\n## 68           6.8         3.7          5.1         2.0 versicolor\n## 69           7.2         3.2          5.5         2.5 versicolor\n## 70           6.6         3.5          4.9         2.1 versicolor\n## 71           6.9         4.2          5.8         2.8 versicolor\n## 72           7.1         3.8          5.0         2.3 versicolor\n## 73           7.3         3.5          5.9         2.5 versicolor\n## 74           7.1         3.8          5.7         2.2 versicolor\n## 75           7.4         3.9          5.3         2.3 versicolor\n## 76           7.6         4.0          5.4         2.4 versicolor\n## 77           7.8         3.8          5.8         2.4 versicolor\n## 78           7.7         4.0          6.0         2.7 versicolor\n## 79           7.0         3.9          5.5         2.5 versicolor\n## 80           6.7         3.6          4.5         2.0 versicolor\n## 81           6.5         3.4          4.8         2.1 versicolor\n## 82           6.5         3.4          4.7         2.0 versicolor\n## 83           6.8         3.7          4.9         2.2 versicolor\n## 84           7.0         3.7          6.1         2.6 versicolor\n## 85           6.4         4.0          5.5         2.5 versicolor\n## 86           7.0         4.4          5.5         2.6 versicolor\n## 87           7.7         4.1          5.7         2.5 versicolor\n## 88           7.3         3.3          5.4         2.3 versicolor\n## 89           6.6         4.0          5.1         2.3 versicolor\n## 90           6.5         3.5          5.0         2.3 versicolor\n## 91           6.5         3.6          5.4         2.2 versicolor\n## 92           7.1         4.0          5.6         2.4 versicolor\n## 93           6.8         3.6          5.0         2.2 versicolor\n## 94           6.0         3.3          4.3         2.0 versicolor\n## 95           6.6         3.7          5.2         2.3 versicolor\n## 96           6.7         4.0          5.2         2.2 versicolor\n## 97           6.7         3.9          5.2         2.3 versicolor\n## 98           7.2         3.9          5.3         2.3 versicolor\n## 99           6.1         3.5          4.0         2.1 versicolor\n## 100          6.7         3.8          5.1         2.3 versicolor\n## 101          7.3         4.3          7.0         3.5  virginica\n## 102          6.8         3.7          6.1         2.9  virginica\n## 103          8.1         4.0          6.9         3.1  virginica\n## 104          7.3         3.9          6.6         2.8  virginica\n## 105          7.5         4.0          6.8         3.2  virginica\n## 106          8.6         4.0          7.6         3.1  virginica\n## 107          5.9         3.5          5.5         2.7  virginica\n## 108          8.3         3.9          7.3         2.8  virginica\n## 109          7.7         3.5          6.8         2.8  virginica\n## 110          8.2         4.6          7.1         3.5  virginica\n## 111          7.5         4.2          6.1         3.0  virginica\n## 112          7.4         3.7          6.3         2.9  virginica\n## 113          7.8         4.0          6.5         3.1  virginica\n## 114          6.7         3.5          6.0         3.0  virginica\n## 115          6.8         3.8          6.1         3.4  virginica\n## 116          7.4         4.2          6.3         3.3  virginica\n## 117          7.5         4.0          6.5         2.8  virginica\n## 118          8.7         4.8          7.7         3.2  virginica\n## 119          8.7         3.6          7.9         3.3  virginica\n## 120          7.0         3.2          6.0         2.5  virginica\n## 121          7.9         4.2          6.7         3.3  virginica\n## 122          6.6         3.8          5.9         3.0  virginica\n## 123          8.7         3.8          7.7         3.0  virginica\n## 124          7.3         3.7          5.9         2.8  virginica\n## 125          7.7         4.3          6.7         3.1  virginica\n## 126          8.2         4.2          7.0         2.8  virginica\n## 127          7.2         3.8          5.8         2.8  virginica\n## 128          7.1         4.0          5.9         2.8  virginica\n## 129          7.4         3.8          6.6         3.1  virginica\n## 130          8.2         4.0          6.8         2.6  virginica\n## 131          8.4         3.8          7.1         2.9  virginica\n## 132          8.9         4.8          7.4         3.0  virginica\n## 133          7.4         3.8          6.6         3.2  virginica\n## 134          7.3         3.8          6.1         2.5  virginica\n## 135          7.1         3.6          6.6         2.4  virginica\n## 136          8.7         4.0          7.1         3.3  virginica\n## 137          7.3         4.4          6.6         3.4  virginica\n## 138          7.4         4.1          6.5         2.8  virginica\n## 139          7.0         4.0          5.8         2.8  virginica\n## 140          7.9         4.1          6.4         3.1  virginica\n## 141          7.7         4.1          6.6         3.4  virginica\n## 142          7.9         4.1          6.1         3.3  virginica\n## 143          6.8         3.7          6.1         2.9  virginica\n## 144          7.8         4.2          6.9         3.3  virginica\n## 145          7.7         4.3          6.7         3.5  virginica\n## 146          7.7         4.0          6.2         3.3  virginica\n## 147          7.3         3.5          6.0         2.9  virginica\n## 148          7.5         4.0          6.2         3.0  virginica\n## 149          7.2         4.4          6.4         3.3  virginica\n## 150          6.9         4.0          6.1         2.8  virginica\n\n\niris |&gt; \n  group_by(Species) |&gt; \n  summarize(across(Sepal.Length:Petal.Length, mean)) # mean of specific columns\n## # A tibble: 3 × 4\n##   Species    Sepal.Length Sepal.Width Petal.Length\n##   &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n## 1 setosa             5.01        3.43         1.46\n## 2 versicolor         5.94        2.77         4.26\n## 3 virginica          6.59        2.97         5.55\n\n\ndates with lubridate\nlubridate is a package that is apart of the tidyverse that is very useful for dates. Check out the R for data science chapter and for the R cheat sheet for working with dates.\n\n## lubridate and dates\ndf = tibble(ymd = c('1999-01-04', '2005-04-11', '2015-10-01'),\n            mdy = c('1/4/99', '4/11/05', '10/1/15'))\n\n# turn into dates\ndf = df |&gt; \n  mutate(d1 = ymd(ymd),\n         d2 = mdy(mdy),\n         d3 = dmy(mdy)) #functions to turn into dates order matters\n\ndf\n## # A tibble: 3 × 5\n##   ymd        mdy     d1         d2         d3        \n##   &lt;chr&gt;      &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;     &lt;date&gt;    \n## 1 1999-01-04 1/4/99  1999-01-04 1999-01-04 1999-04-01\n## 2 2005-04-11 4/11/05 2005-04-11 2005-04-11 2005-11-04\n## 3 2015-10-01 10/1/15 2015-10-01 2015-10-01 2015-01-10\n\n# extract information from dates\ndf = df |&gt; \n  mutate(year = year(d1),\n         month = month(d1))\n\n\n\npurr\nThe newest and new standard package with tidyverse is purr with its set of map() functions. Some similarity to plyr (and base) and dplyr functions but with more consistent names and arguments. Notice that map function can have some specification for the type of output. + map() makes a list. + map_lgl() makes a logical vector. + map_int() makes an integer vector. + map_dbl() makes a double vector. + map_chr() makes a character vector.\n\ndf = iris  |&gt; \n  select(-Species)\n#summary statistics\nmap_dbl(df, mean)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\nmap_dbl(df, median)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##         5.80         3.00         4.35         1.30\nmap_dbl(df, sd)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##    0.8280661    0.4358663    1.7652982    0.7622377\n\nYou can also use map in a tibble to apply to a nested column with mutate(). Nested columns are one of the differences between data.frame() and tibble().\n\n#Creating models by group\ndf_cars = mtcars |&gt; \n      as_tibble() |&gt; \n      group_by(cyl) |&gt; \n      nest()\n\ndf_cars\n## # A tibble: 3 × 2\n## # Groups:   cyl [3]\n##     cyl data              \n##   &lt;dbl&gt; &lt;list&gt;            \n## 1     6 &lt;tibble [7 × 10]&gt; \n## 2     4 &lt;tibble [11 × 10]&gt;\n## 3     8 &lt;tibble [14 × 10]&gt;\ndf_cars$data[1]\n## [[1]]\n## # A tibble: 7 × 10\n##     mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1  21    160    110  3.9   2.62  16.5     0     1     4     4\n## 2  21    160    110  3.9   2.88  17.0     0     1     4     4\n## 3  21.4  258    110  3.08  3.22  19.4     1     0     3     1\n## 4  18.1  225    105  2.76  3.46  20.2     1     0     3     1\n## 5  19.2  168.   123  3.92  3.44  18.3     1     0     4     4\n## 6  17.8  168.   123  3.92  3.44  18.9     1     0     4     4\n## 7  19.7  145    175  3.62  2.77  15.5     0     1     5     6\n\ndf_cars = df_cars |&gt; \n      mutate(models = map(data, \\(x) lm(mpg ~ wt, data = x)),\n             summary = map(models, summary),\n             r_sq = map_dbl(summary, \\(x) x$r.squared))\n\ndf_cars\n## # A tibble: 3 × 5\n## # Groups:   cyl [3]\n##     cyl data               models summary     r_sq\n##   &lt;dbl&gt; &lt;list&gt;             &lt;list&gt; &lt;list&gt;     &lt;dbl&gt;\n## 1     6 &lt;tibble [7 × 10]&gt;  &lt;lm&gt;   &lt;smmry.lm&gt; 0.465\n## 2     4 &lt;tibble [11 × 10]&gt; &lt;lm&gt;   &lt;smmry.lm&gt; 0.509\n## 3     8 &lt;tibble [14 × 10]&gt; &lt;lm&gt;   &lt;smmry.lm&gt; 0.423\n\nmap() only works with one input argument, but you can use map2() if you want two input arguments or pmap() to have more than two input arguments.\n\n###\n#Mapping over multiple arguments\n###\n\nmu = list(5, 10, -3)\nmu |&gt; \n  map(rnorm, n = 5) |&gt; #rnorm - function to extract values from a normal continuous distribution based on some parameters\n  \n  str()\n## List of 3\n##  $ : num [1:5] 4.49 4.36 2.67 3.4 5.08\n##  $ : num [1:5] 9.59 9.55 9.47 9.65 9.14\n##  $ : num [1:5] -3.69 -3.2 -2.76 -2.95 -3\n#&gt; List of 3\n\n#Adding SD as well\n###\n#map2 or pmap allows you to iterate over two or more vectors in parallel\n###\n\nsigma = list(1, 5, 10)\nmap2(mu, sigma, rnorm, n = 5) |&gt; str()\n## List of 3\n##  $ : num [1:5] 2.73 5.51 6 4.12 5.7\n##  $ : num [1:5] -1.72 11.76 9.44 9.42 13.51\n##  $ : num [1:5] 1.03 1.62 -2.53 -6.51 -1.45\n\n#or with pmap\nn = list(1, 3, 5)\nargs2 = list(mean = mu, sd = sigma, n = n)\nargs2 |&gt; \n  pmap(rnorm) |&gt; \n  str()\n## List of 3\n##  $ : num 5.45\n##  $ : num [1:3] 10.06 2.13 9.63\n##  $ : num [1:5] 1.03 -10.39 2.96 -4.05 -2.56"
  },
  {
    "objectID": "ws3.html#quartormardown",
    "href": "ws3.html#quartormardown",
    "title": "Workshop 3: Introduction to R",
    "section": "Quarto/rmardown",
    "text": "Quarto/rmardown\nThere are times when we want to inbed R into a document to make it easier to read. This can be done with quarto (.qmd) or rmarkdown (.rmd) files. These file types are more similar to word documents, have their own syntax, and can embed programming languages (not just R) into the document. These files can be output as html, pdf, or docx files. These are very flexible and can be used to make single documents, books, websites, and presentations. Resources about quarto and rmarkdown\nFor PDFs in Quarto and Rmarkdown. You will need to download some form of LaTex to write the PDFs. R recommends the following code\n\ninstall.packages('tinytex')\n\ntinytex::install_tinytex()"
  },
  {
    "objectID": "ws3.html#exercises",
    "href": "ws3.html#exercises",
    "title": "Workshop 3: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nUsing the iris data create a new tibble or dataframe that calculates the median value of all petal and sepal measurements for each species.\nSimulate population growth over 25 years of a population that has random growth from a mean of 10 individuals and a sd of 5 individuals that starts at a population size of 100.\nPlot population size over time\nCreate a quarto or rmarkdown document of the exercises.\n\nExercise Solutions"
  },
  {
    "objectID": "ws1.html",
    "href": "ws1.html",
    "title": "Workshop 1: Introduction to R",
    "section": "",
    "text": "R is a programming language that has become the standard in Ecology due to its flexibility and open source nature. R can be used from simple math to complex models and is very useful for generating figures. R, like all computer languages, uses a specific syntax to run commands that it is programmed to do. In other words, R will only do what it is commanded to do, and therefore, many common errors are due to errors in syntax (e.g. misspellings, missed commas, or unclosed brackets).\nThis example gives a basic intro into R syntax that can be useful for ecological research. This script gives examples of how to:\n\nBasic operations in R\nAssigning objects\nTypes of data structures in R\nFunctions in R\nUsing Packages in R\n\nHow to install and load packages\n\nWorking with dataframes and tibbles\nIndexing\nExercises\n\nR script: github\nR script of workshop 1"
  },
  {
    "objectID": "ws1.html#getting-to-know-the-basics",
    "href": "ws1.html#getting-to-know-the-basics",
    "title": "Workshop 1: Introduction to R",
    "section": "",
    "text": "R is a programming language that has become the standard in Ecology due to its flexibility and open source nature. R can be used from simple math to complex models and is very useful for generating figures. R, like all computer languages, uses a specific syntax to run commands that it is programmed to do. In other words, R will only do what it is commanded to do, and therefore, many common errors are due to errors in syntax (e.g. misspellings, missed commas, or unclosed brackets).\nThis example gives a basic intro into R syntax that can be useful for ecological research. This script gives examples of how to:\n\nBasic operations in R\nAssigning objects\nTypes of data structures in R\nFunctions in R\nUsing Packages in R\n\nHow to install and load packages\n\nWorking with dataframes and tibbles\nIndexing\nExercises\n\nR script: github\nR script of workshop 1"
  },
  {
    "objectID": "ws1.html#basic-operations-in-r",
    "href": "ws1.html#basic-operations-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Basic operations in R",
    "text": "Basic operations in R\nR is useful for basic operations and follows math rules (i.e. PEMDAS). R will all code on a line unless there is a # to the left.\n\n# addition \n1+1 \n## [1] 2\n\n1+1 # + 2 (won't run anything to right of #)\n## [1] 2\n\n# subtraction\n5-2 \n## [1] 3\n\n# multiplication\n4*5\n## [1] 20\n\n# division\n33/5\n## [1] 6.6\n\n# exponents can be done 2 ways\n2^2\n## [1] 4\n2**2\n## [1] 4\n\n# follows PEMDAS\n1+5*4\n## [1] 21\n# different answer than above\n(1+5)*4\n## [1] 24\n\nNote the [1] appears next to your result. R is just letting you know that this line begins with the first value in your result. Some commands return more than one value, and their results may fill up multiple lines. For example, the command 100:130 returns 31 values; it creates a sequence of integers from 100 to 130. Notice that new bracketed numbers appear at the start of the first and second lines of output. These numbers just mean that the second line begins with that value. You can mostly ignore the numbers that appear in brackets:\n\n100:130\n##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118\n## [20] 119 120 121 122 123 124 125 126 127 128 129 130"
  },
  {
    "objectID": "ws1.html#assigning-objects",
    "href": "ws1.html#assigning-objects",
    "title": "Workshop 1: Introduction to R",
    "section": "Assigning objects",
    "text": "Assigning objects\nWhen working in R it is useful to store data as an object. Assigning objects can be done in multiple ways, but the most common are &lt;- and =. These objects are stored in the R environment and can be called. Objects can be assigned multiple times, but only the last assignment is what is stored. Also it is important to know that R is case sensative and capital and lower case numbers are different.\n\n# assign an object\na = 4 \na\n## [1] 4\n\nb &lt;- 23\n\na+3 \n## [1] 7\n\nb/2\n## [1] 11.5\n\na*b\n## [1] 92\n\nc = 8\nc = 14\nc\n## [1] 14\n\nd = 15 \nD = 1 \nd\n## [1] 15\nD\n## [1] 1"
  },
  {
    "objectID": "ws1.html#types-of-data-structures-in-r",
    "href": "ws1.html#types-of-data-structures-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Types of data structures in R",
    "text": "Types of data structures in R\nR has 6 basic data types. (In addition to the five listed below, there is also raw which will not be discussed in this workshop.)\n\ninteger\nnumeric (real or decimal)\ncharacter\nlogical\ncomplex\n\nintegers are whole numbers\nnumeric are numbers with decimals. Integers and numeric are different because of how the underlying data is stored. Other programming languages can use something similar as decimal, float, or double data types, which all slightly differ in how data is stored but are numbers that include decimals.\ncharacters are strings of letters and numbers (e.g. \"abc\" and \"b1x\") and are designated in R by \" \". When using characters, \" \" are required because in R letters without quotations are objects and c = 'd' is different than c = d\nlogical is TRUE or FALSE. One thing to note is that T is the same as TRUE and F is the same as FALSE. Because T and F are special in R they cannot be used to name objects (but t and f are ok because R is case sensative). This is true for other cases as well like NA and NULL.\ncomplex numbers have both real and imaginary parts (1+4i)\nElements of these data types may be combined to form data structures, such as atomic vectors. When we call a vector atomic, we mean that the vector only holds data of a single data type. A vector is the most common and basic data structure in R and is pretty much the workhorse of R. Technically, vectors can be one of two types: + atomic vectors + lists although the term “vector” most commonly refers to the atomic types not to lists. Lists differ because they can take on different data structures and can be more complex.\nThere are different ways to make vectors\n\n\n# make a numeric vector\na = c(1.1,5,3,4)\na\n## [1] 1.1 5.0 3.0 4.0\n\n# make a integer vector\nb = 1:15\nb\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n# make a character vector \nc = c('a', 'b', 'c')\nc \n## [1] \"a\" \"b\" \"c\"\n\nBecause characters can be both letters and numbers, numbers in a vector with letters are stored as a character. These cannot be used for math operations, but integers and numeric data types can be used for math.\n\na = 4.4\na / 1 \n## [1] 4.4\n\n\nb = 6L # L can be used to keep a numeric as an integer, R typically defaults to numeric\nb*3\n## [1] 18\n\n# character\nc = '1'\nc*4\n## Error in c * 4: non-numeric argument to binary operator\n\nAnother common way to store data is in a dataframe or tibble (special type of dataframe from the tidyverse package we will see below). This is a collection of atomic vectors with the same length.\n\nb = data.frame(c1 = c(1,2,3), c2 = c('a','b','c'))\nb\n##   c1 c2\n## 1  1  a\n## 2  2  b\n## 3  3  c"
  },
  {
    "objectID": "ws1.html#functions-in-r",
    "href": "ws1.html#functions-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Functions in R",
    "text": "Functions in R\nR comes with functions that are used to do tasks. Functions take arguments to complete a task. Functions have the general format function(argument1 = , argument2,...) The types of data used and output of the function is specific to that function. Below are just a few useful examples.\n\n# summary statistics of sequence of numbers\na = c(1.1,5,3,4)\nmean(a) #mean\n## [1] 3.275\nmedian(a) #median\n## [1] 3.5\nsd(a) #standard deviation\n## [1] 1.664081\nquantile(a, 0.5) # quantile at 0.5 (median)\n## 50% \n## 3.5\n\n# make a sequence of numbers\nb = 1:15\nb\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nc = seq(1,15,1) #more flexibility than :\nc\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nseq(4,20,2)\n## [1]  4  6  8 10 12 14 16 18 20\n\n# information about objects\nd = c('a', 'b', 'c')\ntypeof(d) \n## [1] \"character\"\ntypeof(c)\n## [1] \"double\"\nlength(d)\n## [1] 3\n\n# dataframe/tibble specific functions\ne = data.frame(c1 = c(1,2,3), c2 = c('a','b','c'))\nnames(e) # column names\n## [1] \"c1\" \"c2\"\nnrow(e) # number of rows\n## [1] 3\nlength(e) # for dataframe number of columns\n## [1] 2\nstr(e)# structure of data\n## 'data.frame':    3 obs. of  2 variables:\n##  $ c1: num  1 2 3\n##  $ c2: chr  \"a\" \"b\" \"c\""
  },
  {
    "objectID": "ws1.html#using-packages-in-r",
    "href": "ws1.html#using-packages-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Using Packages in R",
    "text": "Using Packages in R\nR comes with a lot of base functions that are available for use when you open R, but this does not contain all of the functions useful to your tasks in R. Since R is open source, many R users have created Packages that contain functions that can be downloaded. Which includes the very common tidyverse.\n\nHow to install and load packages\nPackages can be downloaded from CRAN or from Github. To download directly from Github other packages are needed.\n\ninstall.packages('tidyverse') #from cran\n\nOnce downloaded, packages can be loaded into the R environment with library() function. Packages have to be loaded each R session. In addition functions can be called directly from a package with :: in the format of packageName::function().\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "ws1.html#tidyverse",
    "href": "ws1.html#tidyverse",
    "title": "Workshop 1: Introduction to R",
    "section": "tidyverse",
    "text": "tidyverse\ntidyverse is a collection of packages that use similar syntax and are used for data science in R. Coding in tidyverse is typically easy to read and understand, and has useful functions that have been adopted into newer versions of base R (e.g. piping). Tibbles are the tidyverse version of a dataframe.\n\nc = tibble(c1 = c(1,2,3), c2 = c('a','b','c'))\nc\n## # A tibble: 3 × 2\n##      c1 c2   \n##   &lt;dbl&gt; &lt;chr&gt;\n## 1     1 a    \n## 2     2 b    \n## 3     3 c"
  },
  {
    "objectID": "ws1.html#working-with-dataframes-and-tibbles",
    "href": "ws1.html#working-with-dataframes-and-tibbles",
    "title": "Workshop 1: Introduction to R",
    "section": "Working with dataframes and tibbles",
    "text": "Working with dataframes and tibbles\nUsing either dataframes or tibbles will likely be the most common data structure for ecological data. Making these data structures is easy with the data.frame() or tibble() functions. Tibbles have more flexibility than dataframes and are part of the tidyverse. Dataframes are base R. When reading in tabular data, read.csv() will create a dataframe, while read_csv() will generate a tibble. read_csv() can be paired with url() to use data directly from the internet from sites like github. Note that if from github the raw file (click on raw tab when looking at github file) is needed for this to work. Similar to reading in data, dataframes and tibbles can be saved as .csv with write.csv() or write_csv().\n\nlibrary(tidyverse)\n# create a dataframe\n\ndf = data.frame(name = c('GOOG', 'AMC', 'GME'),\n                Jan = c(1000, 2, 4),\n                Feb = c(1010, 15, 30),\n                March = c(1005, 25, 180))\n\ndf\n##   name  Jan  Feb March\n## 1 GOOG 1000 1010  1005\n## 2  AMC    2   15    25\n## 3  GME    4   30   180\n\n# create a tibble\ntib = tibble(name = c('GOOG', 'AMC', 'GME'),\n             Jan = c(1000, 2, 4),\n             Feb = c(1010, 15, 30),\n             March = c(1005, 25, 180))\n\ntib\n## # A tibble: 3 × 4\n##   name    Jan   Feb March\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 GOOG   1000  1010  1005\n## 2 AMC       2    15    25\n## 3 GME       4    30   180\n\n#read in data file on computer\n# change file path to path location on computer\nread.csv('data/LDWFBayAnchovy2007.csv')\n##        species           basin       date  num seines\n## 1  Bay Anchovy       Barataria 2007-01-01  271      5\n## 2  Bay Anchovy       Barataria 2007-02-01   10      7\n## 3  Bay Anchovy       Barataria 2007-03-01   37      8\n## 4  Bay Anchovy       Barataria 2007-04-01  354      9\n## 5  Bay Anchovy       Barataria 2007-05-01  879     10\n## 6  Bay Anchovy       Barataria 2007-06-01 1429     10\n## 7  Bay Anchovy       Barataria 2007-07-01  542     13\n## 8  Bay Anchovy       Barataria 2007-08-01  171      3\n## 9  Bay Anchovy       Barataria 2007-09-01  481     13\n## 10 Bay Anchovy       Barataria 2007-10-01 1317     19\n## 11 Bay Anchovy       Barataria 2007-11-01  636     13\n## 12 Bay Anchovy       Barataria 2007-12-01  176     10\n## 13 Bay Anchovy       Calcasieu 2007-01-01  403      2\n## 14 Bay Anchovy       Calcasieu 2007-02-01  293      2\n## 15 Bay Anchovy       Calcasieu 2007-03-01   17      2\n## 16 Bay Anchovy       Calcasieu 2007-04-01  107      4\n## 17 Bay Anchovy       Calcasieu 2007-05-01    5      2\n## 18 Bay Anchovy       Calcasieu 2007-06-01  114      5\n## 19 Bay Anchovy       Calcasieu 2007-07-01  875      6\n## 20 Bay Anchovy       Calcasieu 2007-08-01  240      5\n## 21 Bay Anchovy       Calcasieu 2007-09-01  665     11\n## 22 Bay Anchovy       Calcasieu 2007-10-01 1165     11\n## 23 Bay Anchovy       Calcasieu 2007-11-01  306     10\n## 24 Bay Anchovy       Calcasieu 2007-12-01  303      7\n## 25 Bay Anchovy   Pontchartrain 2007-01-01  200      9\n## 26 Bay Anchovy   Pontchartrain 2007-02-01  147      8\n## 27 Bay Anchovy   Pontchartrain 2007-03-01  556     10\n## 28 Bay Anchovy   Pontchartrain 2007-04-01 1065     14\n## 29 Bay Anchovy   Pontchartrain 2007-05-01  750     13\n## 30 Bay Anchovy   Pontchartrain 2007-06-01  183     13\n## 31 Bay Anchovy   Pontchartrain 2007-07-01  668     13\n## 32 Bay Anchovy   Pontchartrain 2007-08-01  703      9\n## 33 Bay Anchovy   Pontchartrain 2007-09-01  945     24\n## 34 Bay Anchovy   Pontchartrain 2007-10-01  931     20\n## 35 Bay Anchovy   Pontchartrain 2007-11-01  502     18\n## 36 Bay Anchovy   Pontchartrain 2007-12-01 1459     19\n## 37 Bay Anchovy      Terrebonne 2007-01-01  367     11\n## 38 Bay Anchovy      Terrebonne 2007-02-01  110      6\n## 39 Bay Anchovy      Terrebonne 2007-03-01 2701     13\n## 40 Bay Anchovy      Terrebonne 2007-04-01 5068     13\n## 41 Bay Anchovy      Terrebonne 2007-05-01 4313     12\n## 42 Bay Anchovy      Terrebonne 2007-06-01 2636     13\n## 43 Bay Anchovy      Terrebonne 2007-07-01 1751     13\n## 44 Bay Anchovy      Terrebonne 2007-08-01 1295     11\n## 45 Bay Anchovy      Terrebonne 2007-09-01 5691     25\n## 46 Bay Anchovy      Terrebonne 2007-10-01 2496     25\n## 47 Bay Anchovy      Terrebonne 2007-11-01 2213     24\n## 48 Bay Anchovy      Terrebonne 2007-12-01 1448     18\n## 49 Bay Anchovy Vermilion-Teche 2007-01-01  656      5\n## 50 Bay Anchovy Vermilion-Teche 2007-02-01  587      7\n## 51 Bay Anchovy Vermilion-Teche 2007-03-01  645      5\n## 52 Bay Anchovy Vermilion-Teche 2007-04-01 1710      7\n## 53 Bay Anchovy Vermilion-Teche 2007-05-01 1290      7\n## 54 Bay Anchovy Vermilion-Teche 2007-06-01 2655      7\n## 55 Bay Anchovy Vermilion-Teche 2007-07-01  755      7\n## 56 Bay Anchovy Vermilion-Teche 2007-08-01  943      6\n## 57 Bay Anchovy Vermilion-Teche 2007-09-01  940     14\n## 58 Bay Anchovy Vermilion-Teche 2007-10-01 2017     14\n## 59 Bay Anchovy Vermilion-Teche 2007-11-01 2286      8\n## 60 Bay Anchovy Vermilion-Teche 2007-12-01 4556     14\n\nread_csv('data/LDWFBayAnchovy2007.csv')\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 60 × 5\n##    species     basin     date         num seines\n##    &lt;chr&gt;       &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Bay Anchovy Barataria 2007-01-01   271      5\n##  2 Bay Anchovy Barataria 2007-02-01    10      7\n##  3 Bay Anchovy Barataria 2007-03-01    37      8\n##  4 Bay Anchovy Barataria 2007-04-01   354      9\n##  5 Bay Anchovy Barataria 2007-05-01   879     10\n##  6 Bay Anchovy Barataria 2007-06-01  1429     10\n##  7 Bay Anchovy Barataria 2007-07-01   542     13\n##  8 Bay Anchovy Barataria 2007-08-01   171      3\n##  9 Bay Anchovy Barataria 2007-09-01   481     13\n## 10 Bay Anchovy Barataria 2007-10-01  1317     19\n## # ℹ 50 more rows\n\n# read in data file from github\n# need to use raw file\nread_csv(url('https://raw.githubusercontent.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/main/data/LDWFBayAnchovy2007.csv'))\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 60 × 5\n##    species     basin     date         num seines\n##    &lt;chr&gt;       &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Bay Anchovy Barataria 2007-01-01   271      5\n##  2 Bay Anchovy Barataria 2007-02-01    10      7\n##  3 Bay Anchovy Barataria 2007-03-01    37      8\n##  4 Bay Anchovy Barataria 2007-04-01   354      9\n##  5 Bay Anchovy Barataria 2007-05-01   879     10\n##  6 Bay Anchovy Barataria 2007-06-01  1429     10\n##  7 Bay Anchovy Barataria 2007-07-01   542     13\n##  8 Bay Anchovy Barataria 2007-08-01   171      3\n##  9 Bay Anchovy Barataria 2007-09-01   481     13\n## 10 Bay Anchovy Barataria 2007-10-01  1317     19\n## # ℹ 50 more rows\n\n# save dataframe or tibble as new csv\nwrite.csv(df, 'data/df.csv')\n\nwrite_csv(df, 'data/df.csv')"
  },
  {
    "objectID": "ws1.html#indexing",
    "href": "ws1.html#indexing",
    "title": "Workshop 1: Introduction to R",
    "section": "Indexing",
    "text": "Indexing\nOnce data is stored in an object, being able to retrieve those values is useful. Referred to as indexing, the syntax is specific to how the data is stored. With indexing specific values within your object can be modified.\n\n# vector \nb = 1:15\n# 3rd object \nb[3]\n## [1] 3\n\n# make a character vector \nc = c('a', 'b', 'c')\nc\n## [1] \"a\" \"b\" \"c\"\n# 2nd object\nc[2]\n## [1] \"b\"\n# change \nc[2] = 'new'\nc\n## [1] \"a\"   \"new\" \"c\"\n\n# dataframe and tibbles\nmtcars\n##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n# first column\nmtcars[1]\n##                      mpg\n## Mazda RX4           21.0\n## Mazda RX4 Wag       21.0\n## Datsun 710          22.8\n## Hornet 4 Drive      21.4\n## Hornet Sportabout   18.7\n## Valiant             18.1\n## Duster 360          14.3\n## Merc 240D           24.4\n## Merc 230            22.8\n## Merc 280            19.2\n## Merc 280C           17.8\n## Merc 450SE          16.4\n## Merc 450SL          17.3\n## Merc 450SLC         15.2\n## Cadillac Fleetwood  10.4\n## Lincoln Continental 10.4\n## Chrysler Imperial   14.7\n## Fiat 128            32.4\n## Honda Civic         30.4\n## Toyota Corolla      33.9\n## Toyota Corona       21.5\n## Dodge Challenger    15.5\n## AMC Javelin         15.2\n## Camaro Z28          13.3\n## Pontiac Firebird    19.2\n## Fiat X1-9           27.3\n## Porsche 914-2       26.0\n## Lotus Europa        30.4\n## Ford Pantera L      15.8\n## Ferrari Dino        19.7\n## Maserati Bora       15.0\n## Volvo 142E          21.4\n# first row\nmtcars[1,]\n##           mpg cyl disp  hp drat   wt  qsec vs am gear carb\n## Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n# 2nd row of first column\nmtcars[2,1]\n## [1] 21\n# can call specific columns (called as a vector)\nmtcars$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\nmtcars$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n#same for tibble\nd = mtcars %&gt;% as_tibble\nd[1]\n## # A tibble: 32 × 1\n##      mpg\n##    &lt;dbl&gt;\n##  1  21  \n##  2  21  \n##  3  22.8\n##  4  21.4\n##  5  18.7\n##  6  18.1\n##  7  14.3\n##  8  24.4\n##  9  22.8\n## 10  19.2\n## # ℹ 22 more rows\nd$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\nd$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n# specific row in specific column\nmtcars$cyl[1]\n## [1] 6\nd$cyl[1]\n## [1] 6"
  },
  {
    "objectID": "ws1.html#exercises",
    "href": "ws1.html#exercises",
    "title": "Workshop 1: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nComplete following exercises and turn in r script on canvas\n\nMake two vectors, object a containing the values 2, 3, 4, and 5 and object bcontaining the values 50, 100, 38, and 42.\nMultiply object a by 3 and assign it to a new object, divide object b by 5 and assign it to a new object, then add the new two objects together.\nCreate a new data.frame/tibble with the four objects created above\nSave the data.frame/tibble created in exercise 3 as a .csv\nLoad in files a.csv and b.csv (found on github and canvas) and assign each as an object.\n\nExercise Solutions"
  },
  {
    "objectID": "solutions/Key_ws6.html",
    "href": "solutions/Key_ws6.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Create a transition matrix for a 2 stage population where the the probability of stage 1 survival and stays in stage 1 = 0, the probability of survival of stage 1 and transition to stage 2 = 0.1, the survival of stage 2 = 0.8, and contribution of stage 2 to stage 1 = 2.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\np11 = 0\np21 = 0.8\np22 = 0.1\nF12 = 2\n\n# set up transition matrix \nA = matrix(c(p11, F12, p21, p22), byrow = T, ncol = 2)\nA\n##      [,1] [,2]\n## [1,]  0.0  2.0\n## [2,]  0.8  0.1\n\n\nUse the transition matrix from exercise 1 to simulate 50 years of a population with a starting population of 50 individuals in stage 1 and 25 individuals in stage 2. Plot the results.\n\n\n# manual \ns1 = 50\ns2 = 25\n\n#matrix of populations\np = matrix(c(s1, s2), ncol = 1)\np\n##      [,1]\n## [1,]   50\n## [2,]   25\n\nyears = 50\n\n# place to store data\npop = tibble(time = 0:years,\n             Nt = NA, \n             s1 = NA,\n             s2 = NA)\n\npop$Nt[pop$time == 0] = sum(p)\npop$s1[pop$time == 0] = p[1]\npop$s2[pop$time == 0] = p[2]\n\npop\n## # A tibble: 51 × 4\n##     time    Nt    s1    s2\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    75    50    25\n##  2     1    NA    NA    NA\n##  3     2    NA    NA    NA\n##  4     3    NA    NA    NA\n##  5     4    NA    NA    NA\n##  6     5    NA    NA    NA\n##  7     6    NA    NA    NA\n##  8     7    NA    NA    NA\n##  9     8    NA    NA    NA\n## 10     9    NA    NA    NA\n## # ℹ 41 more rows\n\nfor(i in 1:years){\n  p = A %*% p\n  pop$Nt[pop$time == i] = sum(p)\n  pop$s1[pop$time == i] = p[1]\n  pop$s2[pop$time == i] = p[2]\n}\n\ndf = pop %&gt;% \n  pivot_longer(Nt:s2, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, levels = c('Nt','s1','s2')))\n\nggplot(df, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'red', 'blue'))+\n  theme_bw()\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n# popbio\nlibrary(popbio)\nstages = c(\"s1\", \"s2\")\n\n# create projection matrix\nA = matrix(c(p11, F12, p21, p22), byrow = T, ncol = 2, dimnames = list(stages, stages))\n\n# vector of population sizes \nn = c(50,25)\n\n# run model\np = pop.projection(A = A, n = n, iterations = 50)\np\n## $lambda\n## [1] 1.313979\n## \n## $stable.stage\n##        s1        s2 \n## 0.6017881 0.3982119 \n## \n## $stage.vectors\n##     0    1     2      3        4        5        6        7        8        9\n## s1 50 50.0 85.00 88.500 144.8500 156.0850 247.3685 274.4728 423.2369 481.4802\n## s2 25 42.5 44.25 72.425  78.0425 123.6842 137.2364 211.6184 240.7401 362.6635\n##          10       11        12       13       14       15       16       17\n## s1 725.3270 842.9011 1244.8134 1473.123 2139.014 2570.898 3679.512 4481.389\n## s2 421.4506 622.4067  736.5616 1069.507 1285.449 1839.756 2240.694 3167.679\n##          18       19        20        21       22       23       24       25\n## s1 6335.358 7803.757 10916.948 13577.707 18824.89 23606.82 32480.50 41018.96\n## s2 3901.879 5458.474  6788.853  9412.444 11803.41 16240.25 20509.48 28035.35\n##         26       27       28        29       30       31       32       33\n## s1 56070.7 71237.41 96836.86 123663.54 167305.3 214592.2 289147.7 372262.3\n## s2 35618.7 48418.43 61831.77  83652.66 107296.1 144573.9 186131.1 249931.3\n##          34       35       36        37        38      39      40      41\n## s1 499862.6 645605.9 864340.8 1119403.5 1494885.6 1940534 2585870 3363442\n## s2 322803.0 432170.4 559701.8  747442.8  970267.1 1292935 1681721 2236868\n##         42      43      44       45       46       47       48       49\n## s1 4473737 5828881 7740867 10100296 13395417 17500015 23182668 30318290\n## s2 2914440 3870433 5050148  6697708  8750007 11591334 15159145 20062049\n## \n## $pop.sizes\n##  [1] 7.500000e+01 9.250000e+01 1.292500e+02 1.609250e+02 2.228925e+02\n##  [6] 2.797692e+02 3.846049e+02 4.860913e+02 6.639770e+02 8.441438e+02\n## [11] 1.146778e+03 1.465308e+03 1.981375e+03 2.542630e+03 3.424463e+03\n## [16] 4.410654e+03 5.920206e+03 7.649067e+03 1.023724e+04 1.326223e+04\n## [21] 1.770580e+04 2.299015e+04 3.062830e+04 3.984707e+04 5.298998e+04\n## [26] 6.905431e+04 9.168940e+04 1.196558e+05 1.586686e+05 2.073162e+05\n## [31] 2.746014e+05 3.591661e+05 4.752789e+05 6.221936e+05 8.226656e+05\n## [36] 1.077776e+06 1.424043e+06 1.866846e+06 2.465153e+06 3.233469e+06\n## [41] 4.267591e+06 5.600310e+06 7.388177e+06 9.699314e+06 1.279101e+07\n## [46] 1.679800e+07 2.214542e+07 2.909135e+07 3.834181e+07 5.038034e+07\n## \n## $pop.changes\n##  [1] 1.233333 1.397297 1.245068 1.385071 1.255176 1.374722 1.263872 1.365951\n##  [9] 1.271345 1.358510 1.277761 1.352190 1.283265 1.346819 1.287984 1.342251\n## [17] 1.292027 1.338364 1.295489 1.335054 1.298453 1.332236 1.300989 1.329834\n## [25] 1.303158 1.327787 1.305013 1.326042 1.306599 1.324554 1.307954 1.323284\n## [33] 1.309113 1.322202 1.310103 1.321278 1.310948 1.320490 1.311671 1.319818\n## [41] 1.312288 1.319244 1.312816 1.318755 1.313266 1.318337 1.313651 1.317980\n## [49] 1.313979\n\nstage.vector.plot(p$stage.vectors)\n\n\n\n\n\n\n\n\n# Plot using ggplot\n\npp = tibble(time = as.numeric(colnames(p$stage.vectors)),\n            s1 = p$stage.vectors[1,],\n            s2 = p$stage.vectors[2,],\n            total = p$pop.sizes) %&gt;% \n  pivot_longer(s1:total, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, \n                        levels =c('total','s1','s2')))\n\nggplot(pp, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'brown', 'pink'))+\n  theme_bw()\n\n\n\n\n\n\n\n\n\nChallenge: Using the 3 matrices below. Simulate the same population above. Use a probability of 0.5 for average year, 0.3 for poor year, and 0.2 for good year. Plot your results\n\\[ average = \\begin{bmatrix}\n0&2 \\\\\n0.1&0.8\n\\end{bmatrix}\\] \\[\npoor = \\begin{bmatrix}\n0&1 \\\\\n0.1&0.6\n\\end{bmatrix}\\]\n\n\\[\ngood = \\begin{bmatrix}\n0&3 \\\\\n0.1&0.8\n\\end{bmatrix}\\]\n\nstages = c(\"s1\", \"s2\")\naverage = matrix(c(0, 2, 0.1, 0.8), byrow = T, ncol = 2, dimnames = list(stages, stages))\npoor = matrix(c(0, 1, 0.1, 0.6), byrow = T, ncol = 2, dimnames = list(stages, stages))\ngood = matrix(c(0, 3, 0.1, 0.8), byrow = T, ncol = 2, dimnames = list(stages, stages))\n\nAs = list(average, poor, good)\n\n# popbio\n# starting population size\nn = c(50,25)\nnames(n) = c('s1','s2')\n\n# unequal probabilities for projection matrices\npop = stoch.projection(matrices = As, n0 = n, nreps = 100, prob = c(0.5, 0.3, 0.2))%&gt;% \n  as_tibble() %&gt;% \n  mutate(time = row_number(),\n         Nt = s1+ s2)\n\n\nggplot(pop, aes(Nt)) +\n  geom_density() +\n  labs(x = 'Population size') +\n  theme_bw()\n\n\n\n\n\n\n\n\n# manual with size over time\ns1 = 50\ns2 = 25\n\n#matrix of populations\np = matrix(c(s1, s2), ncol = 1)\np\n##      [,1]\n## [1,]   50\n## [2,]   25\n\nyears = 50\n\n# place to store data\npop = tibble(time = 0:years,\n             Nt = NA, \n             s1 = NA,\n             s2 = NA)\n\npop$Nt[pop$time == 0] = sum(p)\npop$s1[pop$time == 0] = p[1]\npop$s2[pop$time == 0] = p[2]\n\npop\n## # A tibble: 51 × 4\n##     time    Nt    s1    s2\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    75    50    25\n##  2     1    NA    NA    NA\n##  3     2    NA    NA    NA\n##  4     3    NA    NA    NA\n##  5     4    NA    NA    NA\n##  6     5    NA    NA    NA\n##  7     6    NA    NA    NA\n##  8     7    NA    NA    NA\n##  9     8    NA    NA    NA\n## 10     9    NA    NA    NA\n## # ℹ 41 more rows\n\nfor(i in 1:years){\n  A = sample(As, size = 1, prob= c(0.5,0.3,0.2))\n  p = A[[1]] %*% p\n  pop$Nt[pop$time == i] = sum(p)\n  pop$s1[pop$time == i] = p[1]\n  pop$s2[pop$time == i] = p[2]\n}\n\ndf = pop %&gt;% \n  pivot_longer(Nt:s2, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, levels = c('Nt','s1','s2')))\n\nggplot(df, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'red', 'blue'))+\n  theme_bw()"
  },
  {
    "objectID": "solutions/Key_ws6.html#key-for-workshop-6-exercises",
    "href": "solutions/Key_ws6.html#key-for-workshop-6-exercises",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Create a transition matrix for a 2 stage population where the the probability of stage 1 survival and stays in stage 1 = 0, the probability of survival of stage 1 and transition to stage 2 = 0.1, the survival of stage 2 = 0.8, and contribution of stage 2 to stage 1 = 2.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\np11 = 0\np21 = 0.8\np22 = 0.1\nF12 = 2\n\n# set up transition matrix \nA = matrix(c(p11, F12, p21, p22), byrow = T, ncol = 2)\nA\n##      [,1] [,2]\n## [1,]  0.0  2.0\n## [2,]  0.8  0.1\n\n\nUse the transition matrix from exercise 1 to simulate 50 years of a population with a starting population of 50 individuals in stage 1 and 25 individuals in stage 2. Plot the results.\n\n\n# manual \ns1 = 50\ns2 = 25\n\n#matrix of populations\np = matrix(c(s1, s2), ncol = 1)\np\n##      [,1]\n## [1,]   50\n## [2,]   25\n\nyears = 50\n\n# place to store data\npop = tibble(time = 0:years,\n             Nt = NA, \n             s1 = NA,\n             s2 = NA)\n\npop$Nt[pop$time == 0] = sum(p)\npop$s1[pop$time == 0] = p[1]\npop$s2[pop$time == 0] = p[2]\n\npop\n## # A tibble: 51 × 4\n##     time    Nt    s1    s2\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    75    50    25\n##  2     1    NA    NA    NA\n##  3     2    NA    NA    NA\n##  4     3    NA    NA    NA\n##  5     4    NA    NA    NA\n##  6     5    NA    NA    NA\n##  7     6    NA    NA    NA\n##  8     7    NA    NA    NA\n##  9     8    NA    NA    NA\n## 10     9    NA    NA    NA\n## # ℹ 41 more rows\n\nfor(i in 1:years){\n  p = A %*% p\n  pop$Nt[pop$time == i] = sum(p)\n  pop$s1[pop$time == i] = p[1]\n  pop$s2[pop$time == i] = p[2]\n}\n\ndf = pop %&gt;% \n  pivot_longer(Nt:s2, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, levels = c('Nt','s1','s2')))\n\nggplot(df, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'red', 'blue'))+\n  theme_bw()\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n# popbio\nlibrary(popbio)\nstages = c(\"s1\", \"s2\")\n\n# create projection matrix\nA = matrix(c(p11, F12, p21, p22), byrow = T, ncol = 2, dimnames = list(stages, stages))\n\n# vector of population sizes \nn = c(50,25)\n\n# run model\np = pop.projection(A = A, n = n, iterations = 50)\np\n## $lambda\n## [1] 1.313979\n## \n## $stable.stage\n##        s1        s2 \n## 0.6017881 0.3982119 \n## \n## $stage.vectors\n##     0    1     2      3        4        5        6        7        8        9\n## s1 50 50.0 85.00 88.500 144.8500 156.0850 247.3685 274.4728 423.2369 481.4802\n## s2 25 42.5 44.25 72.425  78.0425 123.6842 137.2364 211.6184 240.7401 362.6635\n##          10       11        12       13       14       15       16       17\n## s1 725.3270 842.9011 1244.8134 1473.123 2139.014 2570.898 3679.512 4481.389\n## s2 421.4506 622.4067  736.5616 1069.507 1285.449 1839.756 2240.694 3167.679\n##          18       19        20        21       22       23       24       25\n## s1 6335.358 7803.757 10916.948 13577.707 18824.89 23606.82 32480.50 41018.96\n## s2 3901.879 5458.474  6788.853  9412.444 11803.41 16240.25 20509.48 28035.35\n##         26       27       28        29       30       31       32       33\n## s1 56070.7 71237.41 96836.86 123663.54 167305.3 214592.2 289147.7 372262.3\n## s2 35618.7 48418.43 61831.77  83652.66 107296.1 144573.9 186131.1 249931.3\n##          34       35       36        37        38      39      40      41\n## s1 499862.6 645605.9 864340.8 1119403.5 1494885.6 1940534 2585870 3363442\n## s2 322803.0 432170.4 559701.8  747442.8  970267.1 1292935 1681721 2236868\n##         42      43      44       45       46       47       48       49\n## s1 4473737 5828881 7740867 10100296 13395417 17500015 23182668 30318290\n## s2 2914440 3870433 5050148  6697708  8750007 11591334 15159145 20062049\n## \n## $pop.sizes\n##  [1] 7.500000e+01 9.250000e+01 1.292500e+02 1.609250e+02 2.228925e+02\n##  [6] 2.797692e+02 3.846049e+02 4.860913e+02 6.639770e+02 8.441438e+02\n## [11] 1.146778e+03 1.465308e+03 1.981375e+03 2.542630e+03 3.424463e+03\n## [16] 4.410654e+03 5.920206e+03 7.649067e+03 1.023724e+04 1.326223e+04\n## [21] 1.770580e+04 2.299015e+04 3.062830e+04 3.984707e+04 5.298998e+04\n## [26] 6.905431e+04 9.168940e+04 1.196558e+05 1.586686e+05 2.073162e+05\n## [31] 2.746014e+05 3.591661e+05 4.752789e+05 6.221936e+05 8.226656e+05\n## [36] 1.077776e+06 1.424043e+06 1.866846e+06 2.465153e+06 3.233469e+06\n## [41] 4.267591e+06 5.600310e+06 7.388177e+06 9.699314e+06 1.279101e+07\n## [46] 1.679800e+07 2.214542e+07 2.909135e+07 3.834181e+07 5.038034e+07\n## \n## $pop.changes\n##  [1] 1.233333 1.397297 1.245068 1.385071 1.255176 1.374722 1.263872 1.365951\n##  [9] 1.271345 1.358510 1.277761 1.352190 1.283265 1.346819 1.287984 1.342251\n## [17] 1.292027 1.338364 1.295489 1.335054 1.298453 1.332236 1.300989 1.329834\n## [25] 1.303158 1.327787 1.305013 1.326042 1.306599 1.324554 1.307954 1.323284\n## [33] 1.309113 1.322202 1.310103 1.321278 1.310948 1.320490 1.311671 1.319818\n## [41] 1.312288 1.319244 1.312816 1.318755 1.313266 1.318337 1.313651 1.317980\n## [49] 1.313979\n\nstage.vector.plot(p$stage.vectors)\n\n\n\n\n\n\n\n\n# Plot using ggplot\n\npp = tibble(time = as.numeric(colnames(p$stage.vectors)),\n            s1 = p$stage.vectors[1,],\n            s2 = p$stage.vectors[2,],\n            total = p$pop.sizes) %&gt;% \n  pivot_longer(s1:total, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, \n                        levels =c('total','s1','s2')))\n\nggplot(pp, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'brown', 'pink'))+\n  theme_bw()\n\n\n\n\n\n\n\n\n\nChallenge: Using the 3 matrices below. Simulate the same population above. Use a probability of 0.5 for average year, 0.3 for poor year, and 0.2 for good year. Plot your results\n\\[ average = \\begin{bmatrix}\n0&2 \\\\\n0.1&0.8\n\\end{bmatrix}\\] \\[\npoor = \\begin{bmatrix}\n0&1 \\\\\n0.1&0.6\n\\end{bmatrix}\\]\n\n\\[\ngood = \\begin{bmatrix}\n0&3 \\\\\n0.1&0.8\n\\end{bmatrix}\\]\n\nstages = c(\"s1\", \"s2\")\naverage = matrix(c(0, 2, 0.1, 0.8), byrow = T, ncol = 2, dimnames = list(stages, stages))\npoor = matrix(c(0, 1, 0.1, 0.6), byrow = T, ncol = 2, dimnames = list(stages, stages))\ngood = matrix(c(0, 3, 0.1, 0.8), byrow = T, ncol = 2, dimnames = list(stages, stages))\n\nAs = list(average, poor, good)\n\n# popbio\n# starting population size\nn = c(50,25)\nnames(n) = c('s1','s2')\n\n# unequal probabilities for projection matrices\npop = stoch.projection(matrices = As, n0 = n, nreps = 100, prob = c(0.5, 0.3, 0.2))%&gt;% \n  as_tibble() %&gt;% \n  mutate(time = row_number(),\n         Nt = s1+ s2)\n\n\nggplot(pop, aes(Nt)) +\n  geom_density() +\n  labs(x = 'Population size') +\n  theme_bw()\n\n\n\n\n\n\n\n\n# manual with size over time\ns1 = 50\ns2 = 25\n\n#matrix of populations\np = matrix(c(s1, s2), ncol = 1)\np\n##      [,1]\n## [1,]   50\n## [2,]   25\n\nyears = 50\n\n# place to store data\npop = tibble(time = 0:years,\n             Nt = NA, \n             s1 = NA,\n             s2 = NA)\n\npop$Nt[pop$time == 0] = sum(p)\npop$s1[pop$time == 0] = p[1]\npop$s2[pop$time == 0] = p[2]\n\npop\n## # A tibble: 51 × 4\n##     time    Nt    s1    s2\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    75    50    25\n##  2     1    NA    NA    NA\n##  3     2    NA    NA    NA\n##  4     3    NA    NA    NA\n##  5     4    NA    NA    NA\n##  6     5    NA    NA    NA\n##  7     6    NA    NA    NA\n##  8     7    NA    NA    NA\n##  9     8    NA    NA    NA\n## 10     9    NA    NA    NA\n## # ℹ 41 more rows\n\nfor(i in 1:years){\n  A = sample(As, size = 1, prob= c(0.5,0.3,0.2))\n  p = A[[1]] %*% p\n  pop$Nt[pop$time == i] = sum(p)\n  pop$s1[pop$time == i] = p[1]\n  pop$s2[pop$time == i] = p[2]\n}\n\ndf = pop %&gt;% \n  pivot_longer(Nt:s2, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, levels = c('Nt','s1','s2')))\n\nggplot(df, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'red', 'blue'))+\n  theme_bw()"
  },
  {
    "objectID": "solutions/Key_ws4.html",
    "href": "solutions/Key_ws4.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Download primer and open primer package. Upload the sparrows dataset from package and plot counts as function of years.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nlibrary(primer)\n## Loading required package: deSolve\n\ndata(\"sparrows\")\n\nggplot(data=sparrows, aes(x=Year, y=Count)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nCalculate the annual rate of increase (\\(\\lambda\\)) for each time step and plot \\(\\lambda\\) as function of years as a scatterplot\nHint: Look at the for loop/dplyr examples above\n\n\n# for loop\ndf = sparrows\n\n# make empty column to store data\ndf$lambda = NA\n\n\nfor (i in 1:length(df$Year)){\n  df$lambda[i] = df$Count[i+1]/df$Count[i]\n}\n\n#dpylr \ndf = df %&gt;% \n  mutate(labmda2 = lead(Count)/Count)\n\n\nChallenge: Simulate a population with varying \\(\\lambda\\) at each time step.\n\n\n# Use random numbers to generate lambda\n# initial parameters\nN_0 = 10\nyears = 100\n# store data\nsim = tibble(time = 0:years,\n             Nt = NA)\n# set N0\nsim$Nt[sim$time == 0] = N_0\nsim\n## # A tibble: 101 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## # ℹ 91 more rows\n\n# calculate random lambda from normal distribution \nsim = sim %&gt;% \n  mutate(lambda = rnorm(nrow(sim), mean = 1.05, sd = 0.2))\n\nfor(i in 2:nrow(sim)){\n  sim$Nt[i] = sim$lambda[i-1]*sim$Nt[i-1]\n}\n\nggplot(sim, aes(time, Nt))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n# simulate from sparrow lambdas\n# initial parameters\nN_0 = 10\nyears = 100\n# store data\nsim2 = tibble(time = 0:years,\n              Nt = NA)\n# set N0\nsim2$Nt[sim2$time == 0] = N_0\nsim2\n## # A tibble: 101 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## # ℹ 91 more rows\n\n# place to store lambdas\nsim2$lambda = NA\n\n# vector of lambdas from sparrow data\n# drop the NAs\nls = df$lambda[!is.na(df$lambda)] \n\nfor (i in 1:(length(sim2$time)-1)){\n  sim2$lambda[i] = sample(ls, 1)\n  sim2$Nt[i + 1] = sim2$lambda[i]*sim2$Nt[i]\n}\n\nggplot(sim2, aes(time, Nt))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))"
  },
  {
    "objectID": "solutions/Key_ws4.html#key-for-workshop-4-exercises",
    "href": "solutions/Key_ws4.html#key-for-workshop-4-exercises",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Download primer and open primer package. Upload the sparrows dataset from package and plot counts as function of years.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nlibrary(primer)\n## Loading required package: deSolve\n\ndata(\"sparrows\")\n\nggplot(data=sparrows, aes(x=Year, y=Count)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nCalculate the annual rate of increase (\\(\\lambda\\)) for each time step and plot \\(\\lambda\\) as function of years as a scatterplot\nHint: Look at the for loop/dplyr examples above\n\n\n# for loop\ndf = sparrows\n\n# make empty column to store data\ndf$lambda = NA\n\n\nfor (i in 1:length(df$Year)){\n  df$lambda[i] = df$Count[i+1]/df$Count[i]\n}\n\n#dpylr \ndf = df %&gt;% \n  mutate(labmda2 = lead(Count)/Count)\n\n\nChallenge: Simulate a population with varying \\(\\lambda\\) at each time step.\n\n\n# Use random numbers to generate lambda\n# initial parameters\nN_0 = 10\nyears = 100\n# store data\nsim = tibble(time = 0:years,\n             Nt = NA)\n# set N0\nsim$Nt[sim$time == 0] = N_0\nsim\n## # A tibble: 101 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## # ℹ 91 more rows\n\n# calculate random lambda from normal distribution \nsim = sim %&gt;% \n  mutate(lambda = rnorm(nrow(sim), mean = 1.05, sd = 0.2))\n\nfor(i in 2:nrow(sim)){\n  sim$Nt[i] = sim$lambda[i-1]*sim$Nt[i-1]\n}\n\nggplot(sim, aes(time, Nt))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n# simulate from sparrow lambdas\n# initial parameters\nN_0 = 10\nyears = 100\n# store data\nsim2 = tibble(time = 0:years,\n              Nt = NA)\n# set N0\nsim2$Nt[sim2$time == 0] = N_0\nsim2\n## # A tibble: 101 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## # ℹ 91 more rows\n\n# place to store lambdas\nsim2$lambda = NA\n\n# vector of lambdas from sparrow data\n# drop the NAs\nls = df$lambda[!is.na(df$lambda)] \n\nfor (i in 1:(length(sim2$time)-1)){\n  sim2$lambda[i] = sample(ls, 1)\n  sim2$Nt[i + 1] = sim2$lambda[i]*sim2$Nt[i]\n}\n\nggplot(sim2, aes(time, Nt))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))"
  },
  {
    "objectID": "solutions/Key_ws2.html",
    "href": "solutions/Key_ws2.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Read in the LDWFBayAnchovy2007.csv and create a column that calculates the catch per unit effort (CPUE) for Bay anchovy within the dataframe.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# LDWFBayAnchovy2007 is on the workshop github. Download and save in targeted working directory\n\n#Uploading file\nfish_LA = read_csv(\"data/LDWFBayAnchovy2007.csv\")\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Creating new column for CPUE = Catch per unit effort (Catch/effort)\nfish_LA = fish_LA |&gt; \n  mutate(CPUE = num/seines)\n\n\nCreate a dataframe or tibble that contains the basin names for the LDWFBayAnchovy2007.csv dataset (Barataria, Terrebonne, Ponchartrain, Vermilion-Teche, and Calcasieu) and the and abbreviation for each basin as a new column.\n\n\n#Version 1 - Manual entry\nbasins = tibble(basin = c(\"Barataria\", \"Calcasieu\", \"Pontchartrain\", \"Terrebonne\", \"Vermilion-Teche\"),\n                    basin_short = c(\"Bar\", \"Cal\", \"Pon\", \"Terr\", \"Ver\"))\n\n#Version 2 - Wrangling and using the original data with R base and tidyr functions\nbasins = tibble(basin = c(unique(fish_LA$basin)),\n                basin_short = c(abbreviate(unique(fish_LA$basin))))\n\n\nMerge the dataframe/tibbles from exercises 1 and 2.\n\n\nfish_LA = fish_LA |&gt; \n  left_join(basins, by =\"basin\")\n\n\nPlot the CPUE for each basin both over time and as a summary of the entire year using a different color for each basin.\n\n\n# CPUE over time\nCPUE_ts = ggplot(fish_LA, aes(x = date, y = num, color = basin_short))+\n  geom_point()+\n  geom_line()+\n  scale_x_date(limits = c(lubridate::ymd('2007-01-01'), lubridate::ymd('2007-12-01')))+\n  labs(x = 'Date', y = 'Bay anchovy CPUE')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\nYR_summary = ggplot(fish_LA, aes(x = basin, y = CPUE, fill = basin_short))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines', fill = \"Basins\")+\n  theme_bw()\n\nlibrary(ggpubr)\n# plot combined\nfinal_fig_ex2 = ggarrange(CPUE_ts, YR_summary,\n          labels = c('a)','b)'),\n          ncol = 1)\nfinal_fig_ex2\n\n\n\n\n\n\n\n\n#A good function to save figures for pubs\n#ggsave(\"final_fig_ex2.pdf\", width = 7, height = 7, unit = \"in\", dpi = 300)"
  },
  {
    "objectID": "solutions/Key_ws2.html#key-for-workshop-2-exercises",
    "href": "solutions/Key_ws2.html#key-for-workshop-2-exercises",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Read in the LDWFBayAnchovy2007.csv and create a column that calculates the catch per unit effort (CPUE) for Bay anchovy within the dataframe.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# LDWFBayAnchovy2007 is on the workshop github. Download and save in targeted working directory\n\n#Uploading file\nfish_LA = read_csv(\"data/LDWFBayAnchovy2007.csv\")\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Creating new column for CPUE = Catch per unit effort (Catch/effort)\nfish_LA = fish_LA |&gt; \n  mutate(CPUE = num/seines)\n\n\nCreate a dataframe or tibble that contains the basin names for the LDWFBayAnchovy2007.csv dataset (Barataria, Terrebonne, Ponchartrain, Vermilion-Teche, and Calcasieu) and the and abbreviation for each basin as a new column.\n\n\n#Version 1 - Manual entry\nbasins = tibble(basin = c(\"Barataria\", \"Calcasieu\", \"Pontchartrain\", \"Terrebonne\", \"Vermilion-Teche\"),\n                    basin_short = c(\"Bar\", \"Cal\", \"Pon\", \"Terr\", \"Ver\"))\n\n#Version 2 - Wrangling and using the original data with R base and tidyr functions\nbasins = tibble(basin = c(unique(fish_LA$basin)),\n                basin_short = c(abbreviate(unique(fish_LA$basin))))\n\n\nMerge the dataframe/tibbles from exercises 1 and 2.\n\n\nfish_LA = fish_LA |&gt; \n  left_join(basins, by =\"basin\")\n\n\nPlot the CPUE for each basin both over time and as a summary of the entire year using a different color for each basin.\n\n\n# CPUE over time\nCPUE_ts = ggplot(fish_LA, aes(x = date, y = num, color = basin_short))+\n  geom_point()+\n  geom_line()+\n  scale_x_date(limits = c(lubridate::ymd('2007-01-01'), lubridate::ymd('2007-12-01')))+\n  labs(x = 'Date', y = 'Bay anchovy CPUE')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\nYR_summary = ggplot(fish_LA, aes(x = basin, y = CPUE, fill = basin_short))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines', fill = \"Basins\")+\n  theme_bw()\n\nlibrary(ggpubr)\n# plot combined\nfinal_fig_ex2 = ggarrange(CPUE_ts, YR_summary,\n          labels = c('a)','b)'),\n          ncol = 1)\nfinal_fig_ex2\n\n\n\n\n\n\n\n\n#A good function to save figures for pubs\n#ggsave(\"final_fig_ex2.pdf\", width = 7, height = 7, unit = \"in\", dpi = 300)"
  },
  {
    "objectID": "solutions/hw2_key.html",
    "href": "solutions/hw2_key.html",
    "title": "Homework 2",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf document containing answers and code.\nIn two weeks (11/4/24 by 11:59pm), please submit your pdf file that is rendered/knitted and includes all code, plots, and short answers to CANVAS using the following filename structure LastName_HW2_Filetype_Date (e.g., Santos_HW2_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "solutions/hw2_key.html#instructions",
    "href": "solutions/hw2_key.html#instructions",
    "title": "Homework 2",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf document containing answers and code.\nIn two weeks (11/4/24 by 11:59pm), please submit your pdf file that is rendered/knitted and includes all code, plots, and short answers to CANVAS using the following filename structure LastName_HW2_Filetype_Date (e.g., Santos_HW2_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "solutions/hw2_key.html#data-for-questions",
    "href": "solutions/hw2_key.html#data-for-questions",
    "title": "Homework 2",
    "section": "Data for questions",
    "text": "Data for questions\nFor this section 1 and 2 of this homework, you will use a fish survey dataset from the Moorea Coral Reef (MCR) Long term ecological research (LTER) site. This dataset describes the species abundance and estimated size distributions (total body length to the greatest precision possible) of fishes surveyed as part of MCR LTER’s annual reef fish monitoring program. The metadata for this dataset can be found here.\n\nSection 1 (20 pts)\n\nUpload the MCR LTER annual fish survey data from the course github https://github.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/blob/main/data/MCR_LTER_Annual_Fish_Survey_20230615.csv into R-Studio. Using R, create a new dataset that includes the top species of each of the 4 coarse trophic guilds (primary consumer, piscivore, planktivore, and secondary consumer) based on the total abundance across the entire dataset. Please use Nt to name the column for abundance data. The metadata could be useful (see above) (3 pts).\n\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nreeffish = read_csv(\"./data/MCR_LTER_Annual_Fish_Survey_20230615.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 100841 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Year, Location, Habitat, Taxonomy, Family, Comment, Coarse_Trophi...\ndbl  (13): Site, Transect, Swath, Count, Total_Length, Length_Anomaly, Bioma...\ndate  (1): Date\ntime  (2): Start, End\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nreeffish_top = reeffish |&gt; \n      group_by(Taxonomy, Coarse_Trophic) |&gt; \n      summarize(n = sum(Count)) |&gt; \n      group_by(Coarse_Trophic) |&gt; \n      slice_max(n) |&gt; \n      ungroup() |&gt; \n      filter(!(Coarse_Trophic %in% c('na', NA, 'Unknown_coarse')))\n\n`summarise()` has grouped output by 'Taxonomy'. You can override using the\n`.groups` argument.\n\ndf = reeffish |&gt; \n      filter(Taxonomy %in% reeffish_top$Taxonomy) |&gt; \n      mutate(Year = as.numeric(Year)) |&gt; \n      group_by(Year, Taxonomy, Site) |&gt; \n      summarize(Nt = sum(Count),\n                .groups = 'drop') \n\n\nPlot total annual abundance at each site with a panel for each species (2 pts).\n\n\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nggplot(df, aes(Year, Nt, color = as.factor(Site)))+\n      geom_point(size = 2)+\n      geom_line(linewidth = 1)+\n      scale_color_viridis_d()+\n      labs(color = 'Site')+\n      theme_bw()+\n      facet_wrap(~Taxonomy, scales = 'free')\n\n\n\n\n\n\n\n\n\nShort Essay Question: How do the temporal trends of reef fish vary between sites and trophic guilds (5 pts)?\n\nUsing R, calculate lambda from one year to the next (i.e., for each time step) for each site and species. Try using either a for-loop or functions (1 pt).\n\n\n\ndf = df |&gt; \n      group_by(Taxonomy, Site) |&gt; \n      mutate(lambda = lead(Nt)/Nt)\n\n\nCalculate the mean(λ) and sd(λ) for the each site/species combination using your calculation from Q1.4. Remember to use the geometric mean and its standard deviation (1 pt).\n\n\n\nlibrary(DescTools)\n\ng = df |&gt;  \n      group_by(Taxonomy, Site) |&gt; \n      summarize(mean = Gmean(lambda, na.rm = T),\n                sd = Gsd(lambda, na.rm = T),\n                .groups = 'drop')\n\n\nUsing ggplot, plot the mean(λ) calculated in question 5 and the sd(λ). Add a horizontal line when population growth = 0. Make a panel for each site to compare lambdas between species (3 pts).\n\n\n\nggplot(g, aes(Taxonomy, mean, color = Taxonomy))+\n      geom_hline(aes(yintercept = 1), linewidth = 1)+\n      geom_pointrange(aes(ymin = mean - sd, ymax = mean + sd), \n                      size = 0.75, linewidth = 1)+\n      facet_wrap(~as.numeric(Site), scales = 'free_x')+\n      scale_color_viridis_d(option = 'turbo')+\n      labs(x = 'Species', y = 'λ')+\n      coord_flip()+\n      theme_bw()+\n      theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\nBased on the mean and variance in the finite rate of increase, which population are growing on average, which populations are declining on average, and which have the highest likelihood of collapse/crash? Hint: See Gotelli Chapter 1 equation 1.9 (5 pts).\n\n\n\n\nSection 2 (23 pts)\n\nUsing the same species from Section 1, estimate \\(K\\) from \\(\\lambda\\) and abundance estimates at the island level (i.e., total population) for each species. Hint: Remember the linear relationship between density and per-capita growth rate in the density-dependent model discussed in class and the workshop (3 pts).\n\n\n\ndf = reeffish |&gt; \n      filter(Taxonomy %in% reeffish_top$Taxonomy) |&gt; \n      group_by(Year, Taxonomy) |&gt; \n      summarize(Nt = sum(Count), .groups = 'drop') |&gt; \n      group_by(Taxonomy) |&gt; \n      mutate(lambda = lead(Nt)/Nt,\n             percap = (lead(Nt)-Nt)/Nt)\n\nggplot(df |&gt; drop_na(), aes(Nt, percap, color = Taxonomy)) + \n      geom_hline(aes(yintercept = 0))+\n      geom_smooth(method = 'lm') +\n      geom_point(size = 2) +\n      facet_wrap(~Taxonomy, scales = 'free')+\n      labs(x = expression(italic(N[t])),\n           y =  expression('per capita growth ('~italic(Delta~N[t]/N[t])~')'))+\n     scale_color_viridis_d(option = 'turbo')+\n      theme_bw()+\n      theme(legend.position = 'none')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n# calculate carry capacity \ndf_k = df |&gt; \n      ungroup() |&gt; \n      drop_na() |&gt; \n      nest(.by = 'Taxonomy') |&gt; \n      mutate(lm = map(data, \\(data) lm(percap~ Nt, data = data)),\n             K = map_dbl(lm, \\(lm) -lm$coefficients[1]/lm$coefficients[2])) |&gt; \n      select(Taxonomy, K)\n\n\nUsing a discrete density-dependent growth model, project the population growth for each species to 150 years based on the carrying capacity values estimated in Q2 and a starting population size of 500 individuals. Hint: \\(1 + r_d = \\lambda\\); See Gotelli pages 35-37 and pages Stevens 62-68 (3 pts).\n\n\n\n# calculate rd at island level for each species\ng = df |&gt;  \n      group_by(Taxonomy) |&gt; \n      summarize(mean = Gmean(lambda, na.rm = T),\n                sd = Gsd(lambda, na.rm = T),\n                .groups = 'drop') |&gt; \n      mutate(rd = mean -1)\n\n# logistic growth funciton \ndlogisticD = function(K, rd, N_0, years) {\n  logis = tibble(Nt = NA, time = 0:years)\n  logis$Nt[logis$time == 0] = N_0\n  \n  for(i in 1:(length(logis$time)-1)){\n    logis$Nt[i+1] = logis$Nt[i]  + rd*logis$Nt[i]*(1 - logis$Nt[i] / K)\n  }\n  return(logis)\n}\n\npop = df_k |&gt; \n      left_join(g, by = 'Taxonomy') |&gt; \n      mutate(Nt = map2(K, rd, \\(K, rd) dlogisticD(K, rd, N_0 = 500, years = 150))) |&gt; \n      unnest(Nt)\n\n\nUsing ggplot, plot the population projections for each species (1 pt).\n\n\n\nggplot(pop, aes(time, Nt, color = Taxonomy))+\n      geom_point(size = 1)+\n      geom_line(linewidth = 1)+\n      scale_color_viridis_d(option = 'turbo')+\n      labs(y = expression(italic(N[t])))+\n      theme_bw()+\n      facet_wrap(~Taxonomy, scales = 'free')+\n      theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\nShort essay question: How do the projections for each species differ? Did the population get as far as the carrying capacity? Why or why not? If not, how many years are required to reach the carrying capacity? When at carrying capacity, do the population fluctuate around K? Why or Why not? (5 pts)\n\nProject the population of each fish species for 150 years using a discrete density-dependent model with environmental stochasticity. Run the projections 50 times for each species (i.e., 50 projections per species) (5 pts).\n\n\nUse the 500 as \\(N_0\\), carrying capacity (\\(K\\)) values estimated in Q1, and at each time step, use a randomly determined \\(r_d\\) based on the mean and standard deviation of \\(\\lambda\\) calculated at the island level – Hint: rtruncnorm() function in R and for loops (e.g., Wickham and Grolemund Chapter 17).\n\n\n\n# logistic growth funciton \ndd_stoch = function(K, lambda, sd, N_0, years) {\n  logis = tibble(Nt = NA, time = 0:years)\n  logis$Nt[logis$time == 0] = N_0\n  \n  for(i in 1:(length(logis$time)-1)){\n    rd = truncnorm::rtruncnorm(1, a = 0, mean = lambda, sd = sd) - 1\n      if(logis$Nt[i] &gt; 0){\n        logis$Nt[i+1] = logis$Nt[i]  + rd*logis$Nt[i]*(1 - logis$Nt[i] / K)\n      }else{\n         logis$Nt[i+1] = 0\n      }\n  }\n  return(logis)\n}\nreps = 50\n\npop = df_k |&gt; \n      left_join(g, by = 'Taxonomy') |&gt; \n      group_by(Taxonomy) |&gt; \n      slice(rep(1:n(), each=reps)) |&gt; \n      mutate(i = row_number(),\n            Nt = pmap(list(K, mean, sd), \\(K, mean, sd) dd_stoch(K, lambda = mean, sd, N_0 = 500, years = 150)),\n            N_t150 = map_dbl(Nt, \\(x) x$Nt |&gt; last())) \n\n\nUsing ggplot, plot a histogram (or density plot) of the population size after 150 year for each species with a vertical line of the carrying capacity (1 pts).\n\n\nggplot(pop, aes(Taxonomy, N_t150, fill = Taxonomy))+\n      geom_boxplot()\n\n\n\n\n\n\n\n\n\nShort essay question: How does the population size at time 150 compare between each species? How do the estimates relate to the carrying capacity? (5 pts).\n\n\n\nSection 3 (19 pts)\n\n\nConvert the loop diagram (life cycle graph) above into a projection matrix (1 pt).\nCreate a starting population vector based on the life stages of this insect species: egg (N = 100), larvae (N = 0), adult (N = 0). Project the population up to 50 years using the starting population vector and the projection matrix you created (hint: A%*%n(t); See Stevens Chapter 2 pages 34-40) (5 pts).\nPlot your results using ggplot, popbio, or base R plotting functions. Plot the projection for each stage class (2 pts).\nShort essay question: Looking at the plot from Q3, did the population projection reach a stable stage distribution? Why or why not? What could you tell about the fate of the population after 50 years? (5 pts).\nBased on the project matrix above, calculate lambda and calculate the stable stage distribution (1 pt).\nShort essay question: What is the proportion between the stages at SSD? What stage is the dominant stage of the population after the stable stage distribution is reached? Why? (5 pts)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BSC 6926 B52 Fall 2024",
    "section": "",
    "text": "BSC 6926 B52: R workshop on population and community ecological modeling\nThis is the course website for the R workshop that coincides with PCB 5423 (Advanced Ecology). This website will have the Quarto markdown lessons for each workshop. Find the course schedule and Syllabus here. This course will be based in R and information about downloading R and Rstudio can be found here.\n\n\nClass Resources\n\nZoom link\nGithub repository\nTextbook for R exercises (S) Stevens, M.H.H. 2010. A primer of ecology with R. ISBN 978-0-387-89881-0 (Electronically available at FIU Library) E-book version\n\n\n\nR Resources\n\nR for Data Science by Hadley Wickham and Garret Grolemund – An introduction to programming with R: https://r4ds.hadley.nz/\n\nQuick-R by datacamp: Quick overview on R programming and statistical approaches. There are more tutorials, but you will be required to register\n\nRStudio Cloud Training Exercises: https://rstudio.cloud/learn/primers\n\nVirtual Ecology Portal/EcoVirtual R Package: Website that provides various examples of population and community models that will be discussed in class and the workshop. There is also an R package (EcoVirtual) you can use to run various models included on this website: http://ecovirtual.ib.usp.br/doku.php?id=start\n\nModernDive: Introductory book on R and statistical inference: https://moderndive.com/index.html\nRstudio: learn R https://education.rstudio.com/learn/beginner/"
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Answer key"
  },
  {
    "objectID": "hw1.html#instructions",
    "href": "hw1.html#instructions",
    "title": "Homework 1",
    "section": "Instructions",
    "text": "Instructions\nPlease, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf or html document containing answers and code.\nIn two weeks (09/30/24 by 11:59pm), please submit your pdf file to CANVAS using the following filename structure LastName_HW1_Filetype_Date (e.g., Santos_HW1_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "hw1.html#data-for-questions",
    "href": "hw1.html#data-for-questions",
    "title": "Homework 1",
    "section": "Data for questions",
    "text": "Data for questions\nFor this homework, you will be using a fisheries dataset from Everglades National Park in Florida Bay. The dataset ENP_catch.csv contains catch per unit effort (CPUE) data for three species (Red drum, Spotted seatrout, and Crevalle Jack) species in Everglades National Park between between 1980-2017. This data is on github and should be downloaded to complete the homework."
  },
  {
    "objectID": "hw1.html#questions",
    "href": "hw1.html#questions",
    "title": "Homework 1",
    "section": "Questions",
    "text": "Questions\n\n(2 pts) Load the ENP_catch.csv dataset as a dataframe or tibble. Short answer question 1: What are the dimension of the dataset?\n\n(2 pts) Convert the tibble/dataframe so that there is a column for species and one for CPUE.\n(2 pts) Calculate the mean and SD of CPUE for each year. Short answer question 3: What are the years with the highest and lowest CPUE? Is the species with the highest and lowest CPUE the same for each year?\n\n(4 pts) Add 2 new columns to the dataframe/tibble from question 2. One column should contain the proportion of the yearly total CPUE for each species. The other column should scale CPUE so that the yearly catch is relative to the maximum CPUE for that species.\n\n(5 pts) Plot the metrics (proportion of total catch, CPUE, and scaled CPUE) for each species as a multi-panel plot (one metric per panel). The plot should show the distribution of data (e.g. boxplot, point range) and not use the default color scheme.\n\n(2 pts) Classify the CPUE for each species as a below average (&lt; 40% quantile), average (between 40-60% quantile), or above average year.\n\n(5 pts) Create a conditional (i.e. TRUE/FALSE) vector to compare if CPUE is higher compared to the previous year before for each species.\nHint - this can be done with a for loop\n\n(3 pts) Plot the count of years where CPUE is higher than the previous year and the count of years where CPUE is lower than the previous year for each species."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "comp.html",
    "href": "comp.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing environment, but using R alone is no fun. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. In the sections below are the instructions for installing R and R Studio on your operating system.\n\nWindows\n\nIf you already have R and RStudio installed\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check which version of R you are using, start RStudio and the first thing that appears in the console indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. You can check here for more information on how to remove old versions from your system if you wish to do so.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from the CRAN website.\nRun the .exe file that was just downloaded\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Windows 10/11 (where x, y, and z represent version numbers)\nDouble click the file to install it\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nmacOS\n\nIf you already have R and RStudio installed\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check the version of R you are using, start RStudio and the first thing that appears on the terminal indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from the CRAN website.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.15+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nLinux\n\nFollow the instructions for your distribution from CRAN, they provide information to get the most recent version of R for common distributions. For most distributions, you could use your package manager (e.g., for Debian/Ubuntu run sudo apt-get install r-base, and for Fedora sudo yum install R), but we don’t recommend this approach as the versions provided by this are usually out of date. In any case, make sure you have at least R 3.3.1.\nGo to the RStudio download page\nUnder Installers select the version that matches your distribution, and install it with your preferred method (e.g., with Debian/Ubuntu sudo dpkg -i   rstudio-x.yy.zzz-amd64.deb at the terminal).\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages."
  },
  {
    "objectID": "hw2.html",
    "href": "hw2.html",
    "title": "Homework 2",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf document containing answers and code.\nIn two weeks (11/4/24 by 11:59pm), please submit your pdf file that is rendered/knitted and includes all code, plots, and short answers to CANVAS using the following filename structure LastName_HW2_Filetype_Date (e.g., Santos_HW2_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "hw2.html#instructions",
    "href": "hw2.html#instructions",
    "title": "Homework 2",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf document containing answers and code.\nIn two weeks (11/4/24 by 11:59pm), please submit your pdf file that is rendered/knitted and includes all code, plots, and short answers to CANVAS using the following filename structure LastName_HW2_Filetype_Date (e.g., Santos_HW2_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "hw2.html#data-for-questions",
    "href": "hw2.html#data-for-questions",
    "title": "Homework 2",
    "section": "Data for questions",
    "text": "Data for questions\nFor this section 1 and 2 of this homework, you will use a fish survey dataset from the Moorea Coral Reef (MCR) Long term ecological research (LTER) site. This dataset describes the species abundance and estimated size distributions (total body length to the greatest precision possible) of fishes surveyed as part of MCR LTER’s annual reef fish monitoring program. The metadata for this dataset can be found here.\n\nSection 1 (20 pts)\n\nUpload the MCR LTER annual fish survey data from the course github https://github.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/blob/main/data/MCR_LTER_Annual_Fish_Survey_20230615.csv into R-Studio. Using R, create a new dataset that includes the top species of each of the 4 coarse trophic guilds (primary consumer, piscivore, planktivore, and secondary consumer) based on the total abundance across the entire dataset. Please use Nt to name the column for abundance data. The metadata could be useful (see above) (3 pts).\n\nPlot total annual abundance at each site with a panel for each species (2 pts).\n\nShort Essay Question: How do the temporal trends of reef fish vary between sites and trophic guilds (5 pts)?\n\nUsing R, calculate lambda from one year to the next (i.e., for each time step) for each site and species. Try using either a for-loop or functions (1 pt).\n\nCalculate the mean(λ) and sd(λ) for the each site/species combination using your calculation from Q1.4. Remember to use the geometric mean and its standard deviation (1 pt).\n\nUsing ggplot, plot the mean(λ) calculated in question 5 and the sd(λ). Add a horizontal line when population growth = 0. Make a panel for each site to compare lambdas between species (3 pts).\n\nBased on the mean and variance in the finite rate of increase, which population are growing on average, which populations are declining on average, and which have the highest likelihood of collapse/crash? Hint: See Gotelli Chapter 1 equation 1.9 (5 pts).\n\n\n\n\nSection 2 (23 pts)\n\nUsing the same species from Section 1, estimate \\(K\\) from \\(\\lambda\\) and abundance estimates at the island level (i.e., total population) for each species. Hint: Remember the linear relationship between density and per-capita growth rate in the density-dependent model discussed in class and the workshop (3 pts).\n\nUsing a discrete density-dependent growth model, project the population growth for each species to 150 years based on the carrying capacity values estimated in Q2 and a starting population size of 500 individuals. Hint: \\(1 + r_d = \\lambda\\); See Gotelli pages 35-37 and pages Stevens 62-68 (3 pts).\n\nUsing ggplot, plot the population projections for each species (1 pt).\n\nShort essay question: How do the projections for each species differ? Did the population get as far as the carrying capacity? Why or why not? If not, how many years are required to reach the carrying capacity? When at carrying capacity, do the population fluctuate around K? Why or Why not? (5 pts)\n\nProject the population of each fish species for 150 years using a discrete density-dependent model with environmental stochasticity. Run the projections 50 times for each species (i.e., 50 projections per species) (5 pts).\n\n\nUse the 500 as \\(N_0\\), carrying capacity (\\(K\\)) values estimated in Q1, and at each time step, use a randomly determined \\(r_d\\) based on the mean and standard deviation of \\(\\lambda\\) calculated at the island level – Hint: rtruncnorm() function in R and for loops (e.g., Wickham and Grolemund Chapter 17).\n\nUsing ggplot, plot a histogram (or density plot) of the population size after 150 year for each species with a vertical line of the carrying capacity (1 pts).\nShort essay question: How does the population size at time 150 compare between each species? How do the estimates relate to the carrying capacity? (5 pts).\n\n\n\nSection 3 (19 pts)\n\n\nConvert the loop diagram (life cycle graph) above into a projection matrix (1 pt).\nCreate a starting population vector based on the life stages of this insect species: egg (N = 100), larvae (N = 0), adult (N = 0). Project the population up to 50 years using the starting population vector and the projection matrix you created (hint: A%*%n(t); See Stevens Chapter 2 pages 34-40) (5 pts).\nPlot your results using ggplot, popbio, or base R plotting functions. Plot the projection for each stage class (2 pts).\nShort essay question: Looking at the plot from Q3, did the population projection reach a stable stage distribution? Why or why not? What could you tell about the fate of the population after 50 years? (5 pts).\nBased on the project matrix above, calculate lambda and calculate the stable stage distribution (1 pt).\nShort essay question: What is the proportion between the stages at SSD? What stage is the dominant stage of the population after the stable stage distribution is reached? Why? (5 pts)."
  },
  {
    "objectID": "solutions/hw1_key.html",
    "href": "solutions/hw1_key.html",
    "title": "Homework 1 solutions",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf or html document containing answers and code.\nIn two weeks (09/30/24 by 11:59pm), please submit your pdf file to CANVAS using the following filename structure LastName_HW1_Filetype_Date (e.g., Santos_HW1_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "solutions/hw1_key.html#instructions",
    "href": "solutions/hw1_key.html#instructions",
    "title": "Homework 1 solutions",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf or html document containing answers and code.\nIn two weeks (09/30/24 by 11:59pm), please submit your pdf file to CANVAS using the following filename structure LastName_HW1_Filetype_Date (e.g., Santos_HW1_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "solutions/hw1_key.html#data-for-questions",
    "href": "solutions/hw1_key.html#data-for-questions",
    "title": "Homework 1 solutions",
    "section": "Data for questions",
    "text": "Data for questions\nFor this homework, you will be using a fisheries dataset from Everglades National Park in Florida Bay. The dataset ENP_catch.csv contains catch per unit effort (CPUE) data for three species (Red drum, Spotted seatrout, and Crevalle Jack) species in Everglades National Park between between 1980-2017. This data is on github and should be downloaded to complete the homework."
  },
  {
    "objectID": "solutions/hw1_key.html#questions",
    "href": "solutions/hw1_key.html#questions",
    "title": "Homework 1 solutions",
    "section": "Questions",
    "text": "Questions\n\n(2 pts) Load the ENP_catch.csv dataset as a dataframe or tibble. Short answer question 1: What are the dimension of the dataset?\nThe dimensions of the data are 38 rows x 4 cols\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndf = read_csv('data/ENP_catch.csv')\n## Rows: 38 Columns: 4\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## dbl (4): Year, Crevalle jack, Red drum, Spotted seatrout\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nstr(df)\n## spc_tbl_ [38 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n##  $ Year            : num [1:38] 1980 1981 1982 1983 1984 ...\n##  $ Crevalle jack   : num [1:38] 0.752 0.741 0.847 0.707 0.649 ...\n##  $ Red drum        : num [1:38] 0.818 0.811 0.695 0.916 0.89 ...\n##  $ Spotted seatrout: num [1:38] 1.03 1.19 1.3 1.28 1.33 ...\n##  - attr(*, \"spec\")=\n##   .. cols(\n##   ..   Year = col_double(),\n##   ..   `Crevalle jack` = col_double(),\n##   ..   `Red drum` = col_double(),\n##   ..   `Spotted seatrout` = col_double()\n##   .. )\n##  - attr(*, \"problems\")=&lt;externalptr&gt;\n\n\n(2 pts) Convert the tibble/dataframe so that there is a column for species and one for CPUE.\n\n\ndf_l = df |&gt; \n      pivot_longer(`Crevalle jack`:`Spotted seatrout`, \n                   names_to = 'species', values_to = 'CPUE')\n\n\n(2 pts) Calculate the mean and SD of CPUE for each year. Short answer question 3: What are the years with the highest and lowest CPUE? Is the species with the highest and lowest CPUE the same for each year?\n\n\n\n# calculate the mean and sd of CPUE and extract species with max and min per year\ndf_m = df_l |&gt; \n      group_by(Year) |&gt; \n      summarize(CPUE_m = mean(CPUE),\n                CPUE_sd = sd(CPUE),\n                max_sp = species[which.max(CPUE)],\n                min_sp = species[which.min(CPUE)])\n\n# year with max CPUE\ndf_m$Year[which.max(df_m$CPUE_m)]\n## [1] 1991\nmax(df_m$CPUE_m)\n## [1] 0.9904098\n\n#year with min CPUE\ndf_m$Year[which.min(df_m$CPUE_m)]\n## [1] 2015\nmin(df_m$CPUE_m)\n## [1] 0.5793073\n\n# species with maximum values \ndf_m$max_sp\n##  [1] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n##  [5] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n##  [9] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [13] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [17] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [21] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [25] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [29] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [33] \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\" \"Spotted seatrout\"\n## [37] \"Spotted seatrout\" \"Spotted seatrout\"\n\n# species with min values\ndf_m$min_sp\n##  [1] \"Crevalle jack\" \"Crevalle jack\" \"Red drum\"      \"Crevalle jack\"\n##  [5] \"Crevalle jack\" \"Crevalle jack\" \"Red drum\"      \"Red drum\"     \n##  [9] \"Red drum\"      \"Red drum\"      \"Red drum\"      \"Red drum\"     \n## [13] \"Red drum\"      \"Red drum\"      \"Red drum\"      \"Red drum\"     \n## [17] \"Red drum\"      \"Red drum\"      \"Red drum\"      \"Red drum\"     \n## [21] \"Red drum\"      \"Red drum\"      \"Red drum\"      \"Red drum\"     \n## [25] \"Red drum\"      \"Red drum\"      \"Red drum\"      \"Red drum\"     \n## [29] \"Red drum\"      \"Red drum\"      \"Crevalle jack\" \"Crevalle jack\"\n## [33] \"Red drum\"      \"Red drum\"      \"Red drum\"      \"Red drum\"     \n## [37] \"Red drum\"      \"Red drum\"\n\nShort answer: The highest mean CPUE is 0.9904098 in 1991. The lowest mean CPUE is 0.5793073 in 2015. The species with the highest CPUE is always Spotted seatrout, but the minimum is both Crevalle Jack and Red drum depending on the year\n\n(4 pts) Add 2 new columns to the dataframe/tibble from question 2. One column should contain the proportion of the yearly total CPUE for each species. The other column should scale CPUE so that the yearly catch is relative to the maximum CPUE for that species.\n\n\n\ndf_n = df_l |&gt; \n      group_by(Year) |&gt; \n      mutate(prop = CPUE/sum(CPUE)) |&gt; \n      group_by(species) |&gt; \n      mutate(sCPUE = CPUE/max(CPUE)) |&gt; \n      ungroup()\n\ndf_n\n## # A tibble: 114 × 5\n##     Year species           CPUE  prop sCPUE\n##    &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  1980 Crevalle jack    0.752 0.289 0.740\n##  2  1980 Red drum         0.818 0.315 0.892\n##  3  1980 Spotted seatrout 1.03  0.396 0.711\n##  4  1981 Crevalle jack    0.741 0.271 0.730\n##  5  1981 Red drum         0.811 0.296 0.885\n##  6  1981 Spotted seatrout 1.19  0.433 0.820\n##  7  1982 Crevalle jack    0.847 0.298 0.834\n##  8  1982 Red drum         0.695 0.245 0.759\n##  9  1982 Spotted seatrout 1.30  0.458 0.899\n## 10  1983 Crevalle jack    0.707 0.244 0.696\n## # ℹ 104 more rows\n\n\n(5 pts) Plot the metrics (proportion of total catch, CPUE, and scaled CPUE) for each species as a multi-panel plot (one metric per panel). The plot should show the distribution of data (e.g. boxplot, point range) and not use the default color scheme.\n\n\n\nlibrary(viridis)\n\n# using ggarrange\nlibrary(ggpubr)\n\na = ggplot(df_n, aes(species, CPUE, fill = species))+\n      geom_boxplot()+\n      scale_fill_viridis_d()+\n      labs(x = 'Species', y = 'CPUE')+\n      scale_x_discrete(labels = c('Crevalle \\njack',\n                                  'Red \\ndrum',\n                                  'Spotted \\nseatrout'))+\n      theme_classic()\n      \nb = ggplot(df_n, aes(species, prop, fill = species))+\n      geom_boxplot()+\n      scale_fill_viridis_d()+\n      labs(x = 'Species', y = 'Yearly Proportion of CPUE')+\n      scale_x_discrete(labels = c('Crevalle \\njack',\n                                  'Red \\ndrum',\n                                  'Spotted \\nseatrout'))+\n      theme_classic()\n\nc = ggplot(df_n, aes(species, sCPUE, fill = species))+\n      geom_boxplot()+\n      scale_fill_viridis_d()+\n      labs(x = 'Species', y = 'scaled CPUE')+\n      scale_x_discrete(labels = c('Crevalle \\njack',\n                                  'Red \\ndrum',\n                                  'Spotted \\nseatrout'))+\n      theme_classic()\n\nggarrange(a,b,c,\n          labels = 'auto',\n          legend = 'none',\n          nrow = 1)\n\n\n\n\n\n\n\n\n# using facet_wrap\nd = df_n |&gt; \n      pivot_longer(CPUE:sCPUE, names_to = 'metric', \n                   values_to = 'value')\n\n\nggplot(d, aes(species, value, color = species))+\n      stat_summary(fun = mean,\n               fun.min = function(x) mean(x) - sd(x), \n               fun.max = function(x) mean(x) + sd(x), \n               geom = \"pointrange\",\n               size = 1, linewidth = 1.5)+\n      scale_color_viridis_d(option = 'turbo')+\n      scale_x_discrete(labels = c('Crevalle \\njack',\n                                  'Red \\ndrum',\n                                  'Spotted \\nseatrout'))+\n      labs(x = 'Species', y = 'Value')+\n      facet_wrap(~metric, scales = 'free_y')+\n      theme_bw()+\n      theme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\n(2 pts) Classify the CPUE for each species as a below average (&lt; 40% quantile), average (between 40-60% quantile), or above average year.\n\n\n\ndf_q = df_n |&gt; \n      group_by(species) |&gt; \n      mutate(class = case_when(\n            CPUE &lt; quantile(CPUE, 0.4) ~ 'Below average',\n            between(CPUE, \n                    quantile(CPUE, 0.4), \n                    quantile(CPUE, 0.6)) ~ 'Average',\n            CPUE &gt; quantile(CPUE, 0.6) ~ 'Above average'\n      )) |&gt; \n      mutate(Quantile = factor(findInterval(CPUE, c(-Inf, quantile(CPUE,\nprobs=c(0.4, .6)), Inf)),\nlabels=c(\"Below average\",\"Average\",\"Above average\")))\n\n\n\ndf_q\n## # A tibble: 114 × 7\n## # Groups:   species [3]\n##     Year species           CPUE  prop sCPUE class         Quantile     \n##    &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;fct&gt;        \n##  1  1980 Crevalle jack    0.752 0.289 0.740 Above average Above average\n##  2  1980 Red drum         0.818 0.315 0.892 Above average Above average\n##  3  1980 Spotted seatrout 1.03  0.396 0.711 Below average Below average\n##  4  1981 Crevalle jack    0.741 0.271 0.730 Above average Above average\n##  5  1981 Red drum         0.811 0.296 0.885 Above average Above average\n##  6  1981 Spotted seatrout 1.19  0.433 0.820 Above average Above average\n##  7  1982 Crevalle jack    0.847 0.298 0.834 Above average Above average\n##  8  1982 Red drum         0.695 0.245 0.759 Above average Above average\n##  9  1982 Spotted seatrout 1.30  0.458 0.899 Above average Above average\n## 10  1983 Crevalle jack    0.707 0.244 0.696 Above average Above average\n## # ℹ 104 more rows\n\n\n(5 pts) Create a conditional (i.e. TRUE/FALSE) vector to compare if CPUE is higher compared to the previous year before for each species.\nHint - this can be done with a for loop\n\n\n\n# for loop \ndf_q$comp_fl = NA\n\nyrs = unique(df_q$Year)\n\nfor (i in 2:length(yrs)){\n      df_q$comp_fl[df_q$species == 'Crevalle jack' & df_q$Year == yrs[i]] = \n            df_q$CPUE[df_q$species == 'Crevalle jack'& df_q$Year == yrs[i]] &gt; \n            df_q$CPUE[df_q$species == 'Crevalle jack'& df_q$Year == yrs[i-1]]\n      \n       df_q$comp_fl[df_q$species == 'Red drum'& df_q$Year == yrs[i]] = \n            df_q$CPUE[df_q$species == 'Red drum'& df_q$Year == yrs[i]] &gt; \n            df_q$CPUE[df_q$species == 'Red drum'& df_q$Year == yrs[i-1]]\n       \n        df_q$comp_fl[df_q$species == 'Spotted seatrout'& df_q$Year == yrs[i]] = \n            df_q$CPUE[df_q$species == 'Spotted seatrout'& df_q$Year == yrs[i]] &gt; \n            df_q$CPUE[df_q$species == 'Spotted seatrout'& df_q$Year == yrs[i-1]]\n}\n\n# dplyr\ndf_q = df_q |&gt; \n      group_by(species) |&gt; \n      mutate(comp_dp = CPUE &gt; lag(CPUE))\n\ndf_q\n## # A tibble: 114 × 8\n## # Groups:   species [3]\n##     Year species           CPUE  prop sCPUE class         comp_fl comp_dp\n##    &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;lgl&gt;   &lt;lgl&gt;  \n##  1  1980 Crevalle jack    0.752 0.289 0.740 Above average NA      NA     \n##  2  1980 Red drum         0.818 0.315 0.892 Above average NA      NA     \n##  3  1980 Spotted seatrout 1.03  0.396 0.711 Below average NA      NA     \n##  4  1981 Crevalle jack    0.741 0.271 0.730 Above average FALSE   FALSE  \n##  5  1981 Red drum         0.811 0.296 0.885 Above average FALSE   FALSE  \n##  6  1981 Spotted seatrout 1.19  0.433 0.820 Above average TRUE    TRUE   \n##  7  1982 Crevalle jack    0.847 0.298 0.834 Above average TRUE    TRUE   \n##  8  1982 Red drum         0.695 0.245 0.759 Above average FALSE   FALSE  \n##  9  1982 Spotted seatrout 1.30  0.458 0.899 Above average TRUE    TRUE   \n## 10  1983 Crevalle jack    0.707 0.244 0.696 Above average FALSE   FALSE  \n## # ℹ 104 more rows\n\n\n(3 pts) Plot the count of years where CPUE is higher than the previous year and the count of years where CPUE is lower than the previous year for each species.\n\n\n\nd = df_q |&gt; \n      drop_na() |&gt; \n      group_by(species) |&gt; \n      count(comp_dp) \n\nggplot(d, aes(comp_dp, n, fill = species))+\n      geom_col(position = 'dodge')+\n      scale_fill_viridis_d(option = 'mako', end = 0.95)+\n      labs(x = 'CPUE greater than previous year',\n           y = 'Number of years', \n           fill = 'Species')+\n      theme_classic()"
  },
  {
    "objectID": "solutions/Key_ws1.html",
    "href": "solutions/Key_ws1.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Make two vectors, object a containing the values 2, 3, 4, and 5 and object bcontaining the values 50, 100, 38, and 42.\n\n\na = c(2:5)\na\n## [1] 2 3 4 5\n\nb = c(50, 100, 38, 42)\nb\n## [1]  50 100  38  42\n\n\nMultiply object a by 3 and assign it to a new object, divide object b by 5 and assign it to a new object, then add the new two objects together.\n\n\nc = a*3\nc\n## [1]  6  9 12 15\n\nd = b/5\nd\n## [1] 10.0 20.0  7.6  8.4\n\n\nCreate a new data.frame/tibble with the four objects created above\n\n\n#base R\ndf_ex1 = data.frame(a = a, b = b, c = c, d = d)\ndf_ex1\n##   a   b  c    d\n## 1 2  50  6 10.0\n## 2 3 100  9 20.0\n## 3 4  38 12  7.6\n## 4 5  42 15  8.4\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n#tidyverse\ndf_ex1 = tibble(a = a, b = b, c = c, d = d)\ndf_ex1\n## # A tibble: 4 × 4\n##       a     b     c     d\n##   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1     2    50     6  10  \n## 2     3   100     9  20  \n## 3     4    38    12   7.6\n## 4     5    42    15   8.4\n\n\nSave the data.frame/tibble created in exercise 3 as a .csv\n\n\n#base R\nwrite.csv(df_ex1, \"./data/df_ex1.csv\") #path name will be  case specifice - i.e., depending on the coder's working directory\n\n# tidyverse\nwrite_csv(df_ex1, 'data/df_ex1.csv')\n\n\nLoad in files a.csv and b.csv (found on github and canvas) and assign each as an object.\n\n\n#base R\na_new = read.csv(\"data/a.csv\")\nb_new = read.csv(\"data/b.csv\")\n\n# tidyverse\na_new = read_csv(\"data/a.csv\")\nb_new = read_csv(\"data/b.csv\")"
  },
  {
    "objectID": "solutions/Key_ws1.html#key-for-workshop-1-exercises",
    "href": "solutions/Key_ws1.html#key-for-workshop-1-exercises",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Make two vectors, object a containing the values 2, 3, 4, and 5 and object bcontaining the values 50, 100, 38, and 42.\n\n\na = c(2:5)\na\n## [1] 2 3 4 5\n\nb = c(50, 100, 38, 42)\nb\n## [1]  50 100  38  42\n\n\nMultiply object a by 3 and assign it to a new object, divide object b by 5 and assign it to a new object, then add the new two objects together.\n\n\nc = a*3\nc\n## [1]  6  9 12 15\n\nd = b/5\nd\n## [1] 10.0 20.0  7.6  8.4\n\n\nCreate a new data.frame/tibble with the four objects created above\n\n\n#base R\ndf_ex1 = data.frame(a = a, b = b, c = c, d = d)\ndf_ex1\n##   a   b  c    d\n## 1 2  50  6 10.0\n## 2 3 100  9 20.0\n## 3 4  38 12  7.6\n## 4 5  42 15  8.4\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n#tidyverse\ndf_ex1 = tibble(a = a, b = b, c = c, d = d)\ndf_ex1\n## # A tibble: 4 × 4\n##       a     b     c     d\n##   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1     2    50     6  10  \n## 2     3   100     9  20  \n## 3     4    38    12   7.6\n## 4     5    42    15   8.4\n\n\nSave the data.frame/tibble created in exercise 3 as a .csv\n\n\n#base R\nwrite.csv(df_ex1, \"./data/df_ex1.csv\") #path name will be  case specifice - i.e., depending on the coder's working directory\n\n# tidyverse\nwrite_csv(df_ex1, 'data/df_ex1.csv')\n\n\nLoad in files a.csv and b.csv (found on github and canvas) and assign each as an object.\n\n\n#base R\na_new = read.csv(\"data/a.csv\")\nb_new = read.csv(\"data/b.csv\")\n\n# tidyverse\na_new = read_csv(\"data/a.csv\")\nb_new = read_csv(\"data/b.csv\")"
  },
  {
    "objectID": "solutions/Key_ws3.html",
    "href": "solutions/Key_ws3.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Using the iris data create a new tibble or dataframe that calculates the median value of all petal and sepal measurements for each species.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndf = iris |&gt; \n  group_by(Species) |&gt; \n  summarize(across(where(is.numeric), median))\n\ndf = iris |&gt; \n  group_by(Species) |&gt; \n  summarize(across(Sepal.Length:Petal.Length, median))\n\n\nSimulate population growth over 25 years of a population that has random growth from a mean of 10 individuals and a sd of 5 individuals that starts at a population size of 100.\n\n\nstart = 100 \nsteps = 25\npop = tibble(time = 0:steps, n = NA) #Output vector size 10\npop$n[pop$time == 0] = start\n\nfor (t in 1:steps){ #sequence \n  growth = rnorm(n =1, mean = 10, sd = 5) #extracting random value normal dist\n  pop$n[pop$time == t] = growth + pop$n[pop$time == (t-1)]\n}\n\n\nPlot population size over time\n\n\nggplot(pop, aes(time, n))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\nCreate a quarto or rmarkdown document of the exercises."
  },
  {
    "objectID": "solutions/Key_ws3.html#key-for-workshop-3-exercises",
    "href": "solutions/Key_ws3.html#key-for-workshop-3-exercises",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Using the iris data create a new tibble or dataframe that calculates the median value of all petal and sepal measurements for each species.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndf = iris |&gt; \n  group_by(Species) |&gt; \n  summarize(across(where(is.numeric), median))\n\ndf = iris |&gt; \n  group_by(Species) |&gt; \n  summarize(across(Sepal.Length:Petal.Length, median))\n\n\nSimulate population growth over 25 years of a population that has random growth from a mean of 10 individuals and a sd of 5 individuals that starts at a population size of 100.\n\n\nstart = 100 \nsteps = 25\npop = tibble(time = 0:steps, n = NA) #Output vector size 10\npop$n[pop$time == 0] = start\n\nfor (t in 1:steps){ #sequence \n  growth = rnorm(n =1, mean = 10, sd = 5) #extracting random value normal dist\n  pop$n[pop$time == t] = growth + pop$n[pop$time == (t-1)]\n}\n\n\nPlot population size over time\n\n\nggplot(pop, aes(time, n))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))\n\n\n\n\n\n\n\n\n\nCreate a quarto or rmarkdown document of the exercises."
  },
  {
    "objectID": "solutions/Key_ws5.html",
    "href": "solutions/Key_ws5.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Using the sparrows dataset from the primer package, plot the population size over time. Calculate the average \\(\\lambda\\) (hint: you will need to use the geometric mean) for the sparrow population.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nlibrary(primer)\n## Loading required package: deSolve\nlibrary(DescTools)\ndata('sparrows')\n\nggplot(data=sparrows, aes(x=Year, y=Count)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\ndf = sparrows |&gt;  \n  mutate(lambda = lead(Count)/Count) |&gt; \n  summarize(mean = Gmean(lambda, na.rm = T),\n            sd = Gsd(lambda, na.rm = T))\n\n\nProject the population over the next 50 years for the sparrow population using the average \\(\\lambda\\) from exercise 1. For now use the mean sparrow count for \\(K\\), and use the minimum sparrow count as \\(N_0\\). Plot the results.\n\n\nlambda = df$mean\nrd = lambda - 1\nK = mean(sparrows$Count)\nN0 = min(sparrows$Count)\nyears = 50\n  \npop = tibble(time = 0:years, Nt = NA) \npop$Nt[pop$time == 0] = N0\n\n# for loop\nfor(i in 2:length(pop$time)){\n  pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / K)\n}\n\nggplot(data=pop, aes(x=time, y=Nt)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nDid it reach \\(K\\)? If not, how many years does it take based on your \\(r_d\\)? Plot the results.\n\n\nlambda = df$mean\nrd = lambda - 1\nK = mean(sparrows$Count)\nN0 = min(sparrows$Count)\nyears = 10000\n\npop = tibble(time = 0:years, Nt = NA) \npop$Nt[pop$time == 0] = N0\n\n# for loop\nfor(i in 2:length(pop$time)){\n  pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / K)\n}\n\nggplot(data=pop, aes(x=time, y=Nt)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nChallenge: Simulate/Project the sparrow based on different \\(K\\) = 25, 30, 40, 50. Plot the results.\n\n\nlambda = df$mean\nrd = lambda - 1\nK = c(25,30,40,50)\nN0 = min(sparrows$Count)\nyears = 500\n\npop = tibble(time = rep(0:years, times = length(K)), Nt = NA, K = rep(K, each = years+1)) \npop$Nt[pop$time == 0] = N0\n\n# for loop\nfor(i in 1:nrow(pop)){\n  if(pop$time[i] &gt; 0){\n    pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / pop$K[i])\n  }\n}\n\nggplot(data=pop, aes(x=time, y=Nt, color = as.factor(K))) +\n  geom_line() + \n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "solutions/Key_ws5.html#key-for-workshop-5-exercises",
    "href": "solutions/Key_ws5.html#key-for-workshop-5-exercises",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "Using the sparrows dataset from the primer package, plot the population size over time. Calculate the average \\(\\lambda\\) (hint: you will need to use the geometric mean) for the sparrow population.\n\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nlibrary(primer)\n## Loading required package: deSolve\nlibrary(DescTools)\ndata('sparrows')\n\nggplot(data=sparrows, aes(x=Year, y=Count)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\ndf = sparrows |&gt;  \n  mutate(lambda = lead(Count)/Count) |&gt; \n  summarize(mean = Gmean(lambda, na.rm = T),\n            sd = Gsd(lambda, na.rm = T))\n\n\nProject the population over the next 50 years for the sparrow population using the average \\(\\lambda\\) from exercise 1. For now use the mean sparrow count for \\(K\\), and use the minimum sparrow count as \\(N_0\\). Plot the results.\n\n\nlambda = df$mean\nrd = lambda - 1\nK = mean(sparrows$Count)\nN0 = min(sparrows$Count)\nyears = 50\n  \npop = tibble(time = 0:years, Nt = NA) \npop$Nt[pop$time == 0] = N0\n\n# for loop\nfor(i in 2:length(pop$time)){\n  pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / K)\n}\n\nggplot(data=pop, aes(x=time, y=Nt)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nDid it reach \\(K\\)? If not, how many years does it take based on your \\(r_d\\)? Plot the results.\n\n\nlambda = df$mean\nrd = lambda - 1\nK = mean(sparrows$Count)\nN0 = min(sparrows$Count)\nyears = 10000\n\npop = tibble(time = 0:years, Nt = NA) \npop$Nt[pop$time == 0] = N0\n\n# for loop\nfor(i in 2:length(pop$time)){\n  pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / K)\n}\n\nggplot(data=pop, aes(x=time, y=Nt)) +\n  geom_line() + \n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nChallenge: Simulate/Project the sparrow based on different \\(K\\) = 25, 30, 40, 50. Plot the results.\n\n\nlambda = df$mean\nrd = lambda - 1\nK = c(25,30,40,50)\nN0 = min(sparrows$Count)\nyears = 500\n\npop = tibble(time = rep(0:years, times = length(K)), Nt = NA, K = rep(K, each = years+1)) \npop$Nt[pop$time == 0] = N0\n\n# for loop\nfor(i in 1:nrow(pop)){\n  if(pop$time[i] &gt; 0){\n    pop$Nt[i] = pop$Nt[i - 1]  + rd*pop$Nt[i - 1]*(1 - pop$Nt[i - 1] / pop$K[i])\n  }\n}\n\nggplot(data=pop, aes(x=time, y=Nt, color = as.factor(K))) +\n  geom_line() + \n  geom_point() +\n  theme_bw()"
  },
  {
    "objectID": "sylb.html",
    "href": "sylb.html",
    "title": "Syllabus",
    "section": "",
    "text": "BSC 6926 B52: R workshop on population and community ecological modeling\nFall 2024\nTuesdays 1 - 2:30 pm\nFormat:\n    - In-person + Face-to-Face: Glenn Hubert Library 260\n    - Remote: Zoom link\n\nInstructors: Dr. Rolando O. Santos, Dr. W Ryan James, Dr. Nathan Dorn\n   Rolando Santos\n   rsantosc@fiu.edu (preferable; include BSC6926 in subject line)\n   O:305-919-4104\n   Office: MSB 353 (when in BBC), OE-148 (when in MMC)\n   W. Ryan James\n   wjames@fiu.edu (preferable; include BSC6926 in subject line)\n   Nathan Dorn\n   ndorn@fiu.edu (preferable include BSC6926 in subject line)\n   O: 305-919-4234\n   Office: MSB 351\n\n\nCourse description and learning outcome:\nThis workshop is connected to PCB5423 course, and it will be a co-requisite and will be offered to students enrolled in this course. The workshop is designed to provide an active learning experience by analyzing and illustrating several of the topics that will be discussed in PCB5423 by using ecological models and analytical tools. Specifically, R programming language will be used to learn and implement ecological models and analytical tools and discuss ecological fundamentals using quantitative examples. R is becoming one of the most used programming platforms to analyze and illustrate ecological patterns/data; thus, we hope to introduce novice and beginner coders to this fantastic programming language.\n\n\nWhen and where:\nIn-Person Sessions: Lectures and hands-on programming/modeling exercises will be an integral part of the workshop’s learning experience; thus, most sessions will be based on face-to-face meetings to facilitate learning and assistance during the workshop sessions. In-person sessions will be offered only at BBC.\nRemote Lectures: I will use Zoom to teach remotely if our face-to-face class cannot meet as regularly scheduled. I will contact you using CANVAS and email you the details of the Zoom link. Also, I will use Zoom for remote lectures when I expect to be out of town for fieldwork or meetings. I will announce any changes to the schedule one week or more in advance.\nOffice hours: Tuesdays and Thursdays, 3:00 – 4:00 pm, or by appointment. Please request a Zoom link by email or pass by my office for office hours meetings. I am constantly in/out of my office since my lab spaces are not in MSB; thus, please send me an email or talk to me after the workshop lectures to set up a meeting at my office.\n\n\nTeaching schedule:\nChanges to this schedule and other announcements regarding the course will be posted in CANVAS (sent FIU email addresses only).\n\n\n\nLearning materials:\nTextbook for R exercises (S) Stevens, M.H.H. 2010. A primer of ecology with R. ISBN 978-0-387-89881-0 (Electronically available at FIU Library)\n   E-book version: https://hankstevens.github.io/Primer-of-Ecology/\nOther learning materials: required R scripts/files and readings for the workshop exercises will be posted to CANVAS and the workshop website https://seascapeecologylab-workshops.github.io/BSC6926-B52_Fall2024/.\nPlease bring a laptop to class so you can follow the R scripts during class and perform workshop exercises. Please, contact us if you do not have access to a laptop\nR and R studio are free software environment for statistical computing and graphics required for the workshop. Please download it to your laptops:\n   Download R: https://cran.r-project.org/bin/windows/base/\n   Download Rstudio: https://www.rstudio.com/products/rstudio/download/\nMaterials and links on R programming and statistical analyses helpful in learning R and the workshop exercises/homework/project\n\nR for Data Science by Hadley Wickham and Garret Grolemund – An introduction to programming with R: https://r4ds.had.co.nz/\n\nQuick-R by datacamp: Quick overview on R programming and statistical approaches.There are more tutorials, but you will be required to register\n\nRStudio Cloud Training Exercises: https://rstudio.cloud/learn/primers\n\nVirtual Ecology Portal/EcoVirtual R Package: Website that provides various examples of population and community models that will be discussed in class and the workshop. There is also an R package (EcoVirtual) you can use to run various models included on this website: http://ecovirtual.ib.usp.br/doku.php?id=start\n\nModernDive: Introductory book on R and statistical inference: https://moderndive.com/index.html\n\n\n\nTeaching:\nLectures and R programming exercises will be part of each workshop session to introduce several topics on population and community modeling and analyses and provide context to the ecological fundamentals taught in PCB5423. The grade will be based on participation, homework exercises, and final project (see below).\n\n\nGrading:\nThe final grade will be composed of 2 assignments/tasks. These two assignments/tasks are: 1) Class participation (attendance and class exercises) and 2) R exercises homework.\nClass participation (Total 10 pts) will count for 25% of your final grade. This grade will consist of attending, participating, and submitting R exercises (0, 1). After each workshop, you will be asked to do and submit the results of a series of R exercises that you will try to answer to the best of your knowledge. Class discussion includes asking and answering questions, insightful comments and suggestions, and helping peers.\nR homework exercises (Total 75 pts – 25 pts/hw) will count for 75% of your grade. After several R “lab”/workshop sessions, students will turn in an assignment showing proof that they ran some of the code in R and understood the outputs of the models. The programming/coding aspect of the homework can be completed as a collective effort of student teams; however, students should independently answer and submit the homework questions. Please submit homework answers as PDFs or Word following a Markdown or Quarto format and the R files showing the code used to answer the questions.\n\n\nRubric: \nGrade scale is A: 100-90; B: 89-80; C: &lt;79. This is a graduate-level workshop; thus, if you are taking this course, it is because you have a genuine interest in ecological learning and developing your academic career. For this reason, I think final grades should be pass (A or B) or no pass (C). I will give students a C (or less) who didn’t commit to the work.\nStudents will be graded on their performance in the above areas ONLY. Future career plans will have ZERO influence on the grade you receive in this class. Incomplete grades will be considered only under extraordinary circumstances.\n\n\nMake-up policy: \nI will provide make-up opportunities only when students present valid excuses (e.g., medical/family emergencies, COVID-19-related emergencies and precautions, major fieldwork trips, or conferences). Regardless of the reason, please contact me to identify alternative methods for completing course requirements, depending on the type of assignment missed and the severity of missed assignments. Below is a guideline of potential make-up scenarios/methods (Subject to change): - Participation – Due to the limited number of sessions, I will award a participation point for only one missed session with a validated and accepted excuse. - Homework – Make-up alternatives only for medical (including COVID-19) emergencies. The make-up will consist of submitting the homework materials at a later date (e.g., 48-72 hours after the submission deadline), depending on the gravity of the emergency.\n\n\nFIU Discrimination, Harassment and Sexual Misconduct Policy Statement (Title IX):\nFlorida International University (the University) is committed to encouraging and sustaining a learning and living environment that is free from discrimination based on sex, including gender, gender expression, gender identity, and sexual orientation. Discrimination based on sex encompasses Sexual Misconduct, Sexual Harassment, Gender-Based Harassment, Domestic Violence, Dating Violence, and/or Stalking https://dei.fiu.edu/civil-rights-and-accessibility/index.html.\n\nFIU is committed to eliminating sexual harassment. In accordance with the FIU Faculty Senate guidelines, this syllabus includes a warning that any misconduct will be reported. FIU’s sexual harassment policy is available at: https://dei.fiu.edu/civil-rights-and-accessibility/sexual-misconduct/index.html\n\n\nProfessional and academic integrity:\nStudents are encouraged to employ critical thinking and rely on data and verifiable sources to interrogate all assigned readings and subject matter in this course as a way of determining whether they agree with their classmates and/or their instructor. No lesson is intended to espouse, promote, advance, inculcate, or compel a particular feeling, perception, viewpoint, or belief.\nFIU is a community dedicated to generating and imparting knowledge through excellent teaching and research, the rigorous and respectful exchange of ideas, and community service. All students should respect others’ right to have an equitable opportunity to learn and honestly demonstrate the quality of their learning. Therefore, all students are expected to adhere to a standard of academic conduct, which demonstrates respect for themselves, their fellow students, and the University’s educational mission. The University deems all students to understand that if they are found responsible for academic misconduct (e.g., cheating, plagiarism, academic dishonesty), they will be subject to the Academic Misconduct procedures and sanctions, as outlined in the Student Handbook.\n\n\nHonesty Code Statement:\nFIU defines academic misconduct in the Student Conduct and Honor Code (Code) as “any act or omission by a Student, which violates the concept of academic integrity and undermines the academic mission of the University in violation of the Code.” Code violations include, but are not limited to: academic dishonesty, bribery, cheating, commercial use, complicity, falsification, and plagiarism. The Code is available here: https://regulations.fiu.edu/regulation=FIU-2501"
  },
  {
    "objectID": "ws2.html",
    "href": "ws2.html",
    "title": "Workshop 2: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with tidyverse, data wrangling, and ggplot:\n\nIndexing\ntidyverse\n\ntidy data\npiping Working with dataframes\n\nCombining dataframes and tibbles\nFigures with ggplot2\n\nCombining plots\n\nPractice Exercises\n\nR script: github\nR script of workshop 2\nResources to create R project"
  },
  {
    "objectID": "ws2.html#tidyverse-data-wrangling-and-ggplot",
    "href": "ws2.html#tidyverse-data-wrangling-and-ggplot",
    "title": "Workshop 2: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with tidyverse, data wrangling, and ggplot:\n\nIndexing\ntidyverse\n\ntidy data\npiping Working with dataframes\n\nCombining dataframes and tibbles\nFigures with ggplot2\n\nCombining plots\n\nPractice Exercises\n\nR script: github\nR script of workshop 2\nResources to create R project"
  },
  {
    "objectID": "ws2.html#indexing",
    "href": "ws2.html#indexing",
    "title": "Workshop 2: Introduction to R",
    "section": "Indexing",
    "text": "Indexing\nOnce data is stored in an object, being able to retrieve those values is useful. Referred to as indexing, the syntax is specific to how the data is stored. With indexing specific values within your object can be modified.\n\nlibrary(tidyverse)\n\n\n#First lets bring a dataset from R and assign it to an object\nmtcars_df = mtcars \n\n#Convert to data.frame to tibble\nmtcars_df = as_tibble(mtcars_df)\n\n#Use \"$\" to call or index a specific column\nmpg = mtcars_df$mpg\ngear = mtcars_df$gear\n\n#Use brackets [] to call a specific value position within a vector or \n# or column within a dataframe\n\n#fifth object \nmpg[5]\n## [1] 18.7\nmpg #Let's check\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n\n# vector \nb = 1:15\n# 3rd object \nb[3]\n## [1] 3\n\n# make a character vector \nc = c('a', 'b', 'c')\nc\n## [1] \"a\" \"b\" \"c\"\n\n# 2nd object\nc[2]\n## [1] \"b\"\n\n# change \nc[2] = 'new'\nc\n## [1] \"a\"   \"new\" \"c\"\n\n#Indexing within a table: [rows, columns]\n\n# first row\nmtcars[1,]\n##           mpg cyl disp  hp drat   wt  qsec vs am gear carb\n## Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n\n# 2nd row of first column\nmtcars[2,1]\n## [1] 21\n## [1] 21\n# can call specific columns (called as a vector)\nmtcars$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n\n# specific row (value) in specific column\nmtcars$cyl[1]\n## [1] 6\n\n\nCreating and indexing lists\nList = a collection of objects (e.g., vectors, data.frames, matrices, lists) assigned to a object or list\n\nlist_example = list(a = seq(20,30, by = 5), b = c('a', 'b', 'c'), c = mtcars_df)\n\n#Calling a object within the list\nlist_example$a #Element name a\n## [1] 20 25 30\nlist_example[1] #Preserving - new list with only with first element\n## $a\n## [1] 20 25 30\nlist_example[[1]] #Simplifying - first element of list\n## [1] 20 25 30\n\nlist_example$c\n## # A tibble: 32 × 11\n##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n## # ℹ 22 more rows\nlist_example[3]\n## $c\n## # A tibble: 32 × 11\n##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n## # ℹ 22 more rows\n\n#Get the first value within the second object of the list\nlist_example[[2]][1]\n## [1] \"a\"\n\n#First value of first column on the tibble assigned as the third object in the list\nlist_example[[3]][[1]][1]\n## [1] 21\n\ncolnames(list_example[[3]][1])\n## [1] \"mpg\""
  },
  {
    "objectID": "ws2.html#tidyverse",
    "href": "ws2.html#tidyverse",
    "title": "Workshop 2: Introduction to R",
    "section": "tidyverse",
    "text": "tidyverse\ntidyverse is a collection of packages that use similar syntax and are used for data science in R. Coding in tidyverse is typically easy to read and understand, and has useful functions that have been adopted into newer versions of base R (e.g. piping). Tibbles are the tidyverse version of a dataframe.\n\nc = tibble(c1 = c(1,2,3), c2 = c('a','b','c'))\nc\n## # A tibble: 3 × 2\n##      c1 c2   \n##   &lt;dbl&gt; &lt;chr&gt;\n## 1     1 a    \n## 2     2 b    \n## 3     3 c\n\n\ntidy data\nData is collected and stored in many different ways, which can make it difficult to analyze. One of the goals of tidyverse is to easily turn messy data into tidy data which can easily be analyzed. In tidy data:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nTwo functions pivot_longer() and pivot_wider() are useful in manipulating data stored in rows and columns. ***Note that pivot_longer() and pivot_wider() have replaced gather() and spread() in newer versions of tidyverse\n\n#tidying data \nstock = tibble(name = c('GOOG', 'AMC', 'GME'),\n               Jan = c(1000, 2, 4),\n               Feb = c(1010, 15, 30),\n               March = c(1005, 25, 180))\n\ndf = pivot_longer(stock,\n               cols = Jan:March, \n               names_to = 'Month',\n               values_to = 'Price')\n\ndf\n## # A tibble: 9 × 3\n##   name  Month Price\n##   &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n## 1 GOOG  Jan    1000\n## 2 GOOG  Feb    1010\n## 3 GOOG  March  1005\n## 4 AMC   Jan       2\n## 5 AMC   Feb      15\n## 6 AMC   March    25\n## 7 GME   Jan       4\n## 8 GME   Feb      30\n## 9 GME   March   180\n\n# wide format\nfish = tibble(species = rep(c('Salmon', 'Cod'),times = 3),\n              year = rep(c(1999,2005,2020), each = 2),\n              catch = c(50, 60, 40, 50, 60, 100))\nfish \n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Cod      1999    60\n## 3 Salmon   2005    40\n## 4 Cod      2005    50\n## 5 Salmon   2020    60\n## 6 Cod      2020   100\n\n\npivot_wider(fish,\n            id_cols = species,\n            names_from = year,\n            values_from = catch)\n## # A tibble: 2 × 4\n##   species `1999` `2005` `2020`\n##   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n## 1 Salmon      50     40     60\n## 2 Cod         60     50    100\n\n\n\npiping\nTidyverse has an operator %&gt;% known as a pipe that is useful for when you want to do multiple actions to the same data. It takes the output of the left of the %&gt;% and makes it the first argument of what is on the right. Allowing to reduce code and make things tidier. In newer versions of R, there is a base pipe |&gt; that can be used as well. To use |&gt;you will need to turn it on in global options. Note you can use ctrl + shift + m as a shortcut for |&gt;\n\n# this code\ndf = as_tibble(mtcars)\ndf = filter(df, mpg &gt; 20)\ndf = mutate(df, color = 'red')\ndf = select(df, mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red\n\n# can become\n\ndf = mtcars %&gt;%\n  as_tibble()%&gt;%\n  filter(mpg &gt; 20)%&gt;%\n  mutate(color = 'red')%&gt;%\n  select(mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red\n\n# or with base r\ndf = mtcars |&gt;\n  as_tibble()|&gt;\n  filter(mpg &gt; 20)|&gt;\n  mutate(color = 'red')|&gt;\n  select(mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red"
  },
  {
    "objectID": "ws2.html#renaming-and-making-columns",
    "href": "ws2.html#renaming-and-making-columns",
    "title": "Workshop 2: Introduction to R",
    "section": "Renaming and making columns",
    "text": "Renaming and making columns\nThere are a few different ways to create a new column. The base R way is to use $ with the object name of the dataframe on the left and the new column name on the right. This can be used to do vector operations as well. The other way is to the mutate() function which is part of the dplyr package in tidyverse. This function alows for more flexibility and can be very useful. The easiest way to rename columns is with dplyr functions like rename() or within function like select().\n\ndf = tibble(name = c('GOOG', 'AMC', 'GME'),\n            Jan = c(1000, 2, 4),\n            Feb = c(1010, 15, 30),\n            March = c(1005, 25, 180))\n\ndf$new = 'new column'\n\ndf$tot = df$Jan + df$Feb + df$March\n\ndf \n## # A tibble: 3 × 6\n##   name    Jan   Feb March new          tot\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015\n## 2 AMC       2    15    25 new column    42\n## 3 GME       4    30   180 new column   214\n\n# using mutate\ndf = df |&gt; \n  mutate(newCol = 'blue')\n\n# multiple columns at a time\ndf = df |&gt;\n  mutate(sum = Jan + Feb + March, \n         big = sum &gt; 500)\ndf\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE \n## 2 AMC       2    15    25 new column    42 blue      42 FALSE\n## 3 GME       4    30   180 new column   214 blue     214 FALSE\n\n# rename columns\ndf |&gt;\n  rename(Name = name, January = Jan, February = Feb)\n## # A tibble: 3 × 9\n##   Name  January February March new          tot newCol   sum big  \n##   &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG     1000     1010  1005 new column  3015 blue    3015 TRUE \n## 2 AMC         2       15    25 new column    42 blue      42 FALSE\n## 3 GME         4       30   180 new column   214 blue     214 FALSE\n\n# rename, reorder, only include certain columns \ndf |&gt;\n  select(Name = name, January = Jan, sum, everything())\n## # A tibble: 3 × 9\n##   Name  January   sum   Feb March new          tot newCol big  \n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;lgl&gt;\n## 1 GOOG     1000  3015  1010  1005 new column  3015 blue   TRUE \n## 2 AMC         2    42    15    25 new column    42 blue   FALSE\n## 3 GME         4   214    30   180 new column   214 blue   FALSE\n\n# order data frame\ndf |&gt; \n  arrange(sum)\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 AMC       2    15    25 new column    42 blue      42 FALSE\n## 2 GME       4    30   180 new column   214 blue     214 FALSE\n## 3 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE\n\ndf |&gt; \n  arrange(desc(sum))\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE \n## 2 GME       4    30   180 new column   214 blue     214 FALSE\n## 3 AMC       2    15    25 new column    42 blue      42 FALSE"
  },
  {
    "objectID": "ws2.html#summarizing-data",
    "href": "ws2.html#summarizing-data",
    "title": "Workshop 2: Introduction to R",
    "section": "Summarizing data",
    "text": "Summarizing data\nThere are a few different useful ways to summarize the data in a dataframe or tibble. If you want to know everything about the dataframe, then the base function summary() is useful. If you would like to have more control to create summary tables, then dplyr::summarize() or dplyr::summarise() are great. This can be paired with group_by() to summarize over specific groups of data.\n\nsummary(iris)\n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \n\niris |&gt; \n  summarize(mean(Petal.Width),\n            sd(Petal.Width))\n##   mean(Petal.Width) sd(Petal.Width)\n## 1          1.199333       0.7622377\n\niris |&gt; \n  group_by(Species)|&gt;\n  summarize(mean(Petal.Width),\n            sd(Petal.Width))\n## # A tibble: 3 × 3\n##   Species    `mean(Petal.Width)` `sd(Petal.Width)`\n##   &lt;fct&gt;                    &lt;dbl&gt;             &lt;dbl&gt;\n## 1 setosa                   0.246             0.105\n## 2 versicolor               1.33              0.198\n## 3 virginica                2.03              0.275"
  },
  {
    "objectID": "ws2.html#combining-mulitple-dataframes",
    "href": "ws2.html#combining-mulitple-dataframes",
    "title": "Workshop 2: Introduction to R",
    "section": "Combining mulitple dataframes",
    "text": "Combining mulitple dataframes\nCombining data together is very common, and depending on the type of combination needed.\n\nBinding\nIf data has the same column names and needs to paste together, then rbind() and dplyr::bind_rows() are the tools need. For rbind(), the column names need to have the same name. bind_rows() does not have this problem.\n\n# bind data together \nsal = tibble(species = rep(c('Salmon'),times = 3),\n              year = c(1999,2005,2020),\n              catch = c(50, 60, 40))\n\ncod = tibble(species = rep('Cod', times = 3),\n             year = c(1999,2005,2020),\n             catch = c(50, 60, 100))\n\ncrab = tibble(species = rep('Crab', times = 3),\n              catch = c(50, 60, 100),\n              effort = c(20, 30, 50))\n\nrbind(sal,cod)\n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Salmon   2005    60\n## 3 Salmon   2020    40\n## 4 Cod      1999    50\n## 5 Cod      2005    60\n## 6 Cod      2020   100\n\n#Why error?\nrbind(sal, crab)\n## Error in match.names(clabs, names(xi)): names do not match previous names\n\n#Flexibility on the order\n\nbind_rows(sal, cod)\n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Salmon   2005    60\n## 3 Salmon   2020    40\n## 4 Cod      1999    50\n## 5 Cod      2005    60\n## 6 Cod      2020   100\n#vs\nbind_rows(sal, crab)\n## # A tibble: 6 × 4\n##   species  year catch effort\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n## 1 Salmon   1999    50     NA\n## 2 Salmon   2005    60     NA\n## 3 Salmon   2020    40     NA\n## 4 Crab       NA    50     20\n## 5 Crab       NA    60     30\n## 6 Crab       NA   100     50\n\n\n\nMerge/Join\nIf two data frames contain different columns of data, then they can be merged together with the family of join functions.\n+left_join() = uses left df as template and joins all matching columns from right df +right_join() = uses right df as template and joins all matching columns from left df +inner_join() = only matches columns contained in both dfs +full_join() = combines all rows in both dfs\n\nleft = tibble(name = c('a', 'b', 'c'),\n              n = c(1, 6, 7), \n              bio = c(100, 43, 57))\n\nright = tibble(name = c('a', 'b', 'd', 'e'),\n               cals = c(500, 450, 570, 600))\n\nleft_join(left, right, by = 'name')\n## # A tibble: 3 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 c         7    57    NA\n\nright_join(left, right, by = 'name')\n## # A tibble: 4 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 d        NA    NA   570\n## 4 e        NA    NA   600\n\ninner_join(left, right, by = 'name')\n## # A tibble: 2 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n\nfull_join(left, right, by = 'name')\n## # A tibble: 5 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 c         7    57    NA\n## 4 d        NA    NA   570\n## 5 e        NA    NA   600\n\n# multiple matches\nfish = tibble(species = rep(c('Salmon', 'Cod'),times = 3),\n              year = rep(c(1999,2005,2020), each = 2),\n              catch = c(50, 60, 40, 50, 60, 100))\n\ncol = tibble(species = c('Salmon', 'Cod'),\n             coast = c('West', 'East'))\n\nleft_join(fish, col, by = 'species')\n## # A tibble: 6 × 4\n##   species  year catch coast\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1 Salmon   1999    50 West \n## 2 Cod      1999    60 East \n## 3 Salmon   2005    40 West \n## 4 Cod      2005    50 East \n## 5 Salmon   2020    60 West \n## 6 Cod      2020   100 East"
  },
  {
    "objectID": "ws2.html#figures-with-ggplot2",
    "href": "ws2.html#figures-with-ggplot2",
    "title": "Workshop 2: Introduction to R",
    "section": "Figures with ggplot2",
    "text": "Figures with ggplot2\nThe ggplot2 package is part of the packages that load with tidyverse and has become the standard in ecology. The syntax builds upon on a base function and is very customizable see cheat sheet and R for data science\nThe base of all ggplot2 begins with ggplot() and geom_...() are built upon them\n\n# read in data\ndf = read_csv(url('https://raw.githubusercontent.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/main/data/LDWFBayAnchovy2007.csv'))\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# plot number of Bay anchovy caught per month\nggplot(df, aes(x = date, y = num))+\n  geom_point()\n\n\n\n\n\n\n\n\nShow color based on basin number and add line connecting dots\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()\n\n\n\n\n\n\n\n\nChange labels and style of plot\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  theme_classic()\n\n\n\n\n\n\n\n\nModify the size of axis label text and legend position\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance', color = 'Basin')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom')\n\n\n\n\n\n\n\n\nOnly plot specific range of the dates on x axis\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  scale_x_date(limits = c(lubridate::ymd('2007-04-01'), lubridate::ymd('2007-10-01')))+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n## Warning: Removed 25 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n## Warning: Removed 25 rows containing missing values or values outside the scale range\n## (`geom_line()`).\n\n\n\n\n\n\n\n\nSplit each trial into own grid\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  facet_wrap(~basin)+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\nModify the date labels on x axis (list of date abbreviations) and make 1 column of plots\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  facet_wrap(~basin, ncol = 1)+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\nModify the label and size of strip text\n\n# doesn't change the order\nlabels = c('Calcasieu' = 'CAL',\n          'Vermilion-Teche' = 'VER',\n          'Terrebonne' = 'TER',\n          'Barataria' = 'BAR',\n          'Pontchartrain' = 'PON')\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  facet_wrap(~basin, ncol = 1, labeller = as_labeller(labels))+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank(),\n        strip.text = element_text(size = 12))\n\n\n\n\n\n\n\n\nRemake figure with the mean Abundance and min and max values from each basin and the summarized line through the points\n\nggplot(df, aes(x = date, y = num))+\n  geom_pointrange(stat = \"summary\",\n                  fun.min = 'min',\n                  fun.max = 'max',\n                  fun = 'mean')+\n  stat_summary(aes(y = num), fun = mean, geom = 'line')+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12))\n\n\n\n\n\n\n\n\nMake box plot of number of seines per month within each basin\n\nggplot(df, aes(x = basin, y = seines))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  theme_bw()\n\n\n\n\n\n\n\n\nChange order of x axis (make basin order from west to east) and color of plot. Colors can be both hex code or from names that R has. A help website for picking colors is here.\n\n\ndf = df %&gt;% \n  mutate(basin = factor(basin, levels = c('Calcasieu',\n          'Vermilion-Teche',\n          'Terrebonne',\n          'Barataria',\n          'Pontchartrain' )))\n\ncolors = c('Calcasieu' = 'darkred',\n          'Vermilion-Teche' = 'cadetblue4',\n          'Terrebonne' = '#FFC125',\n          'Barataria' = '#5d478b',\n          'Pontchartrain' = 'grey55')\n\nggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()\n\n\n\n\n\n\n\n\nModify the labels and remove the legend\n\nggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()+\n  theme(axis.title = element_text(size = 18), \n        axis.text.y = element_text(size = 18, colour = \"black\"), \n        axis.text.x = element_text(size = 10, colour = \"black\"), \n        legend.position = 'none',\n        legend.title = element_blank())\n\n\n\n\n\n\n\n\n\nCombining plots\nSometimes we would like to combine different sub figures together to make a single figure. There are a few packages that can do this with ggpubr and patchwork some of the most common. I like ggpubr and use this one, but people seem to like patchwork.\n\nlibrary(ggpubr)\nlibrary(wesanderson)\n\na = ggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()+\n  theme(axis.title = element_text(size = 14), \n        axis.text.y = element_text(size = 14, colour = \"black\"), \n        axis.text.x = element_text(size = 10, colour = \"black\"), \n        legend.position = 'none',\n        legend.title = element_blank())\n\nb = ggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance', color = 'Basin')+\n  theme_bw()+\n  scale_color_manual(values = colors)+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom')\n\n# plot combined\nggarrange(a,b,\n          labels = c('a)','b)'),\n          ncol = 1)\n\n\n\n\n\n\n\n\n# arrange vertically and move position of labels\nggarrange(a,b,\n          labels = c('a)','b)'),\n          ncol = 1,\n          align = 'v',\n          hjust=-1.5)\n\n\n\n\n\n\n\n\n# common legend\na = ggplot(mtcars, aes(wt, fill = as.character(cyl), \n                       color = as.character(cyl)))+\n  geom_density(alpha = 0.4)+\n  labs(x = 'Weight of car (tonnes)', \n       fill = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'),\n                     guide = \"none\")+\n  scale_fill_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n\nb = ggplot(mtcars, aes(mpg, color = as.character(cyl),\n                       fill = as.character(cyl)))+\n  geom_density(alpha = 0.4)+\n  labs(x = 'Miles/gallon',\n       fill = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'),\n                     guide = \"none\")+\n  scale_fill_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n  \n\nc = ggplot(mtcars, aes(wt, mpg, group = cyl, color = as.character(cyl)))+\n  geom_point(size = 2)+\n  geom_smooth(method = 'lm',size = 1)+\n  labs(x = 'Weight of car (tonnes)', \n       y = 'Miles/gallon',\n       color = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\nggarrange(a,b,c, \n          labels = c('A','B','C'),\n          nrow = 2,ncol = 2,\n          common.legend = F)\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggarrange(a,b,c, \n          labels = c('A','B','C'),\n          nrow = 2, ncol = 2,\n          common.legend = T,\n          legend = 'top')\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggarrange(ggarrange(a,b, labels = c('A','B'), common.legend = T),c,\n          labels = c('','C'),\n          nrow = 2,\n          legend = 'none')\n## `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "ws2.html#exercises",
    "href": "ws2.html#exercises",
    "title": "Workshop 2: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nRead in the LDWFBayAnchovy2007.csv and create a column that calculates the catch per unit effort (CPUE) for Bay anchovy within the dataframe.\nCreate a dataframe or tibble that contains the basin names for the LDWFBayAnchovy2007.csv dataset (Barataria, Terrebonne, Ponchartrain, Vermilion-Teche, and Calcasieu) and the and abbreviation for each basin as a new column.\nMerge the dataframe/tibbles from exercises 1 and 2.\nPlot the CPUE for each basin both over time and as a summary of the entire year using a different color for each basin.\n\nExercise Solutions"
  },
  {
    "objectID": "ws4.html",
    "href": "ws4.html",
    "title": "Workshop 4: Density independent models",
    "section": "",
    "text": "This workshop cover density independent population growth models. These are the simplest form of population models. There are two types of models that can be used discrete and continuous models.\nR script: github\nR script of workshop 4"
  },
  {
    "objectID": "ws4.html#discrete-population-models",
    "href": "ws4.html#discrete-population-models",
    "title": "Workshop 4: Density independent models",
    "section": "Discrete Population models",
    "text": "Discrete Population models\nDiscrete models assume that there are distinct generations. This is very common for populations that live in seasonal habitats - their reproduction is timed to the season, and they breed altogether in one bout. These populations experience geometric growth. Here the population at a given time point (\\(N_t\\)) is defined by the equation\n\\[ N_t = N_0\\lambda^t\\] where \\(N_0\\) is the starting population size, \\(\\lambda\\) is the finite growth rate of the population, and \\(t\\) is the time step."
  },
  {
    "objectID": "ws4.html#continuous-population-growth",
    "href": "ws4.html#continuous-population-growth",
    "title": "Workshop 4: Density independent models",
    "section": "Continuous population growth",
    "text": "Continuous population growth\nNot all populations have discrete reproduction, and therefore are continuously increasing. These populations experience exponential growth, and the population size at a given time (\\(N_t\\)) can be found with the equation\n\\[ N_t = N_0e^{rt} \\] where \\(N_0\\) is the population size at time = 0, \\(r\\) is the instantaneous per capita growth rate, and \\(t\\) is time."
  },
  {
    "objectID": "ws4.html#properties-of-density-independent-growth",
    "href": "ws4.html#properties-of-density-independent-growth",
    "title": "Workshop 4: Density independent models",
    "section": "Properties of density independent growth",
    "text": "Properties of density independent growth\nComparing the methods for geometric (discrete) and exponential (continuous) growth models we find that \\[ \\lambda = e^r\\] or \\[ ln\\lambda = r \\] these relationships can be used to distinguish between \\(\\lambda\\) and \\(r\\).\nBased on the properties there are a few general rules\n\n\nno change in population: \\(r = 0\\); \\(\\lambda = 1\\)\n\npopulation increase: \\(r &gt; 0\\); \\(\\lambda &gt; 1\\)\n\npopulation decline: \\(r &lt; 0\\); \\(\\lambda &lt; 1\\)"
  },
  {
    "objectID": "ws4.html#for-loops",
    "href": "ws4.html#for-loops",
    "title": "Workshop 4: Density independent models",
    "section": "for loops",
    "text": "for loops\nBecause the equations for density independent growth are based on the population size the time step before. for loops are very useful when using these models in R.\nFor loops repeat a process for a certain number of iterations. These can be useful iterate over a dataset or when using information in a time series. The for loop works over the number sequence indicated and does the code within the loop (i.e. the body of the loop; inside of {}) for each number in the sequence. The iteration is typically indicated with i, but is just an object that is replaced at the beginning of each loop and can be anything.\nHere is a simple example where we print the iterator i for each number in the sequence.\n\nfor(i in 1:10){ #Sequence\n  print(i)      #body\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\nThe iterator can be assigned to any object, and the sequence can be any vector of numbers.\n\nfor(turtle in 5:10){\n  print(turtle)\n}\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\nA common use of the iterator is to use it to index values to combine with other coding to repeatedly do a task.\n\nfor(flower in 1:nrow(iris)){\n  cat('The species for this iteration is ',     #Adding text per row based on name species\n      as.character(iris$Species[flower]), '\\n') #note of importance of \"\\n\n}\n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica\n\nAnother common use of for loops is to iterate over values of a vector or dataframe. This can be done by desgniating the sequence from a starting value (e.g. 1) to the length() of a vector or nrow() of a dataframe.\n\nd = seq(1,15, 2) #8 elements\nd\n## [1]  1  3  5  7  9 11 13 15\nfor(i in 1:length(d)){\n  b = d[i] + 1                            #for each i add 1\n  cat('d =',d[i], 'b = d + 1 =', b, '\\n' )#then add string\n}\n## d = 1 b = d + 1 = 2 \n## d = 3 b = d + 1 = 4 \n## d = 5 b = d + 1 = 6 \n## d = 7 b = d + 1 = 8 \n## d = 9 b = d + 1 = 10 \n## d = 11 b = d + 1 = 12 \n## d = 13 b = d + 1 = 14 \n## d = 15 b = d + 1 = 16\n\nThe iterator can be combined with math (e.g. subtraction or addition) to call mulitple values in a specific order. This example uses the the ith term and the i-1th terms to complete a task.\nNote This will be very useful in population models that depend upon previous time steps.\n\nb = 1:10\nfor (i in 2:10){    #Call a section of vector to start sequence\n  z = b[i] - b[i-1]\n  \n  cat('z =', z, 'b[i] =', b[i], 'b[i-1] =', b[i-1], '\\n')\n}\n## z = 1 b[i] = 2 b[i-1] = 1 \n## z = 1 b[i] = 3 b[i-1] = 2 \n## z = 1 b[i] = 4 b[i-1] = 3 \n## z = 1 b[i] = 5 b[i-1] = 4 \n## z = 1 b[i] = 6 b[i-1] = 5 \n## z = 1 b[i] = 7 b[i-1] = 6 \n## z = 1 b[i] = 8 b[i-1] = 7 \n## z = 1 b[i] = 9 b[i-1] = 8 \n## z = 1 b[i] = 10 b[i-1] = 9"
  },
  {
    "objectID": "ws4.html#simulate-a-population",
    "href": "ws4.html#simulate-a-population",
    "title": "Workshop 4: Density independent models",
    "section": "Simulate a population",
    "text": "Simulate a population\nNow we can use for loops to simulate a simple population.\nWe first create indicate our starting population size (\\(N_0\\)) and create a dataframe with all of our time steps and a column for the population size at each time step (\\(N_t\\)).\n\nlibrary(tidyverse)\nN_0 = 10 \nyears = 10\npop = tibble(time = 0:years, Nt = NA) #Output vector size 10\npop$Nt[pop$time == 0] = N_0\npop\n## # A tibble: 11 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## 11    10    NA\n\nWe can use a for loop to go through each time point, randomly generate a number of individuals born from a Poisson distribution and add it to the populations size from the time before.\n*Note this simulation will change with each run because growth rate is randomly generated each time step.\n\nfor (t in 1:years){ #sequence \n  growth = rpois(1, lambda = 3) #extracting random value from Poisson Dist\n  pop$Nt[pop$time == t] = growth + pop$Nt[pop$time == (t-1)]\n}\npop\n## # A tibble: 11 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    16\n##  3     2    18\n##  4     3    18\n##  5     4    20\n##  6     5    23\n##  7     6    24\n##  8     7    26\n##  9     8    31\n## 10     9    33\n## 11    10    35\n\n\nggplot(pop, aes(time, Nt))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  scale_x_continuous(breaks = seq(0,10,1))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))"
  },
  {
    "objectID": "ws4.html#average-growth-rate",
    "href": "ws4.html#average-growth-rate",
    "title": "Workshop 4: Density independent models",
    "section": "Average growth rate",
    "text": "Average growth rate\nIn real populations \\(N_t/N_{t-1}\\) are not constant. We can calculate the yearly \\(\\lambda\\) also referred to as the annual growth rate (\\(R\\)) which is \\[R = N_{t+1}/N_t\\] This can be calculated within a for loop\n\n# create column to store data\npop$R = NA\nfor (i in 1:length(pop$time)){\n  pop$R[i] = pop$Nt[i+1]/pop$Nt[i]\n}\npop\n## # A tibble: 11 × 3\n##     time    Nt     R\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    10  1.6 \n##  2     1    16  1.12\n##  3     2    18  1   \n##  4     3    18  1.11\n##  5     4    20  1.15\n##  6     5    23  1.04\n##  7     6    24  1.08\n##  8     7    26  1.19\n##  9     8    31  1.06\n## 10     9    33  1.06\n## 11    10    35 NA\n\nWhat \\(R\\) is representing if \\(Nt\\) is population size at Time \\(t\\)?\n\n\\(\\lambda &gt; 1\\) for all years so the population is always growing\n\nThis may be the case depending on the random draws from Poisson Distribution, which may include lower sequential values from starting point\n\n\n\n\n\n\n\n\n\n\nThis can also be done in dpylr\nNote the correction. Need to use the lead() function to \\(N_{t+1}\\). The lag() function would be to represent \\(N_{t-1}\\).\n\npop = pop  |&gt;  \n  mutate(R.2 = lead(Nt) / Nt)\n\npop\n## # A tibble: 11 × 4\n##     time    Nt     R   R.2\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    10  1.6   1.6 \n##  2     1    16  1.12  1.12\n##  3     2    18  1     1   \n##  4     3    18  1.11  1.11\n##  5     4    20  1.15  1.15\n##  6     5    23  1.04  1.04\n##  7     6    24  1.08  1.08\n##  8     7    26  1.19  1.19\n##  9     8    31  1.06  1.06\n## 10     9    33  1.06  1.06\n## 11    10    35 NA    NA"
  },
  {
    "objectID": "ws4.html#random-sampling",
    "href": "ws4.html#random-sampling",
    "title": "Workshop 4: Density independent models",
    "section": "Random sampling",
    "text": "Random sampling\n\nRandom numbers\nIn the above example we generated random growth from a Poisson distribution, but R can handle many other types. Since they are randomly generated, these numbers will be different each time. You can also use the set.seed() to repeat the answer.\n\nrnorm(5, mean = 0, sd = 1)\n## [1]  1.1104285 -0.1024504 -0.3213595  0.9741068  2.0356239\nrunif(5, min = 0, max = 5)\n## [1] 0.2300484 3.8160084 3.9887727 3.0719079 0.6847662\nrpois(10, lambda = 10)\n##  [1] 14 13  7 11  8 12  9  9  8 10\nrpois(10, lambda = 1:10)\n##  [1]  1  1  7  2  3  6  7  6  7 13\nrbinom(5, size = 2, prob = 0.5)\n## [1] 0 1 1 1 1\nrbinom(5, size = 2, prob = 0.2)\n## [1] 1 0 0 1 0\n\n# get same answer\nrnorm(5, mean = 0, sd = 1)\n## [1] -0.05243607 -1.27053266  1.15072977 -0.28730179  0.39866448\n\nset.seed(14)\nrnorm(5, mean = 0, sd = 1)\n## [1] -0.66184983  1.71895416  2.12166699  1.49715368 -0.03614058\n\nset.seed(14)\nrnorm(5, mean = 0, sd = 1)\n## [1] -0.66184983  1.71895416  2.12166699  1.49715368 -0.03614058\n\nPackages like truncnorm can be useful for specialized cases of random number generation. In this case truncnorm generates numbers from a random normal distribution with within a minimum and maximum value. Note that there currently is not a\n\nlibrary(truncnorm)\n# truncnorm to truncate normal distribution\nrnorm(20, mean = 1, sd = 2)\n##  [1]  3.4638904  0.8702385  3.1379875  0.2460694  3.0863662  0.2343562\n##  [7]  1.5988432  2.3484795  0.4143674  1.9761067  2.7656036  4.7254980\n## [13]  4.2234506  1.2709591  3.1761720 -1.5336295  0.6028334  1.2777316\n## [19]  0.4413280  2.4178388\ntruncnorm::rtruncnorm(20, mean = 1, sd = 2, a=-Inf, b=Inf)\n##  [1] -0.5332209  3.8867259  2.6897586  0.2012592 -1.8555352 -1.8439849\n##  [7]  0.3435434  1.5691401  2.4386718  1.8648320  0.2961505  1.5954429\n## [13]  0.4771353  3.6173795  1.0317405  0.1376513  1.7648931  1.0822502\n## [19]  0.8815520 -1.5928480\ntruncnorm::rtruncnorm(20, mean = 1, sd = 2, a=0, b=2)\n##  [1] 0.03259992 0.37152808 1.45994701 1.44008734 0.99530685 0.06211853\n##  [7] 1.93274772 0.32162900 0.14693736 0.98817199 1.40848303 0.41730609\n## [13] 0.75023858 1.73363648 0.88728165 0.83727607 0.49600072 0.96570812\n## [19] 0.24541725 0.43970458\n\n\n\nRandom selection\nAnother type of random sampling is drawing from a sample from a vector and this can be done with sample() in base R with replacement or without replacement and based on certain probabilities.\n\n# base R \nb = 1:10\nsample(b, size =2, replace = F)\n## [1] 5 8\n\nc = 1:5 \nsample(c, size = 6, replace = T)\n## [1] 1 1 4 4 4 1\n\n# from list\nsample(c('good', 'bad'), size = 8, replace = T)\n## [1] \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"good\" \"bad\"  \"bad\"  \"bad\"\n\n# change probability\nsample(c('good', 'bad'), size = 8, replace = T, prob = c(0.2, 0.8))\n## [1] \"good\" \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"bad\"\n\n# sample matrices from list \nm1 = matrix(c(6,5,4,3,2,1), ncol = 2)\nm2 = matrix(c(1,2,3,4,5,6), ncol = 2)\nm3 = matrix(c(1,2,3,4,5,6), ncol = 2, byrow = T)\n\nm = list(m1, m2, m3)\n\nsample(m, size = 4, replace = T)\n## [[1]]\n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## [3,]    5    6\n## \n## [[4]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n\nsample(m, size = 4, replace = T, prob = c(0.8, 0.1, 0.1))\n## [[1]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n## \n## [[4]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n\ndplyr has a useful function sample_n() that is specialized to work with dataframes and tibbles\n\n#library(tidyverse)\ndf = tibble(cond = c('good', 'bad', 'ok'), prob = c(0.5, 0.3, 0.2))\n\ndplyr::sample_n(df, size = 2, replace = F)\n## # A tibble: 2 × 2\n##   cond   prob\n##   &lt;chr&gt; &lt;dbl&gt;\n## 1 ok      0.2\n## 2 bad     0.3\n\ndplyr::sample_n(df, size = 3, replace = T)\n## # A tibble: 3 × 2\n##   cond   prob\n##   &lt;chr&gt; &lt;dbl&gt;\n## 1 good    0.5\n## 2 bad     0.3\n## 3 bad     0.3\n\ndplyr::sample_n(df, size = 10, replace = T, weight = prob)\n## # A tibble: 10 × 2\n##    cond   prob\n##    &lt;chr&gt; &lt;dbl&gt;\n##  1 good    0.5\n##  2 good    0.5\n##  3 bad     0.3\n##  4 ok      0.2\n##  5 good    0.5\n##  6 bad     0.3\n##  7 bad     0.3\n##  8 bad     0.3\n##  9 good    0.5\n## 10 ok      0.2\n\n\n\nDensity independent continuous population models\n\\(r\\) is the instantaneous per capita growth rate. It’s value determines how population size will change over time.\nWhat are we doing here?\n\nr = c(-0.03, -0.02, 0, 0.02, 0.03)\n\nN_0 = 10\nyears = 100 #hundred time steps\npop = tibble(time = rep(0:years, times = length(r)),\n              Nt = NA, growth = rep(r, each = years+1))\npop\n## # A tibble: 505 × 3\n##     time Nt    growth\n##    &lt;int&gt; &lt;lgl&gt;  &lt;dbl&gt;\n##  1     0 NA     -0.03\n##  2     1 NA     -0.03\n##  3     2 NA     -0.03\n##  4     3 NA     -0.03\n##  5     4 NA     -0.03\n##  6     5 NA     -0.03\n##  7     6 NA     -0.03\n##  8     7 NA     -0.03\n##  9     8 NA     -0.03\n## 10     9 NA     -0.03\n## # ℹ 495 more rows\n\nfor(i in seq_along(pop$time)){\n  pop$Nt[i] = N_0  * exp(pop$growth[i] * pop$time[i])\n}\npop\n## # A tibble: 505 × 3\n##     time    Nt growth\n##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n##  1     0 10     -0.03\n##  2     1  9.70  -0.03\n##  3     2  9.42  -0.03\n##  4     3  9.14  -0.03\n##  5     4  8.87  -0.03\n##  6     5  8.61  -0.03\n##  7     6  8.35  -0.03\n##  8     7  8.11  -0.03\n##  9     8  7.87  -0.03\n## 10     9  7.63  -0.03\n## # ℹ 495 more rows\n\nAlso can be done in dplyr\n\n#Using dplyr\npop = pop  |&gt;  \n  mutate(Nt.2 = N_0 * exp(growth*time), \n         ln.Nt = log(Nt.2))\npop\n## # A tibble: 505 × 5\n##     time    Nt growth  Nt.2 ln.Nt\n##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0 10     -0.03 10     2.30\n##  2     1  9.70  -0.03  9.70  2.27\n##  3     2  9.42  -0.03  9.42  2.24\n##  4     3  9.14  -0.03  9.14  2.21\n##  5     4  8.87  -0.03  8.87  2.18\n##  6     5  8.61  -0.03  8.61  2.15\n##  7     6  8.35  -0.03  8.35  2.12\n##  8     7  8.11  -0.03  8.11  2.09\n##  9     8  7.87  -0.03  7.87  2.06\n## 10     9  7.63  -0.03  7.63  2.03\n## # ℹ 495 more rows\n\nWhat ln.Nt is representing?\nLet’s see with ggplot\n\n###Let's see it using ggplot\nlibrary(ggpubr)\n\na = ggplot(pop, aes(x = time, y = Nt, color = as.factor(growth))) +\n  geom_line(linewidth = 1) +\n  labs(x = 'Time', y = expression(italic(N[t])),\n       color = expression(italic(r)),\n       title = 'Exponential')+\n  theme_bw()\n\nb = ggplot(pop, aes(x = time, y = ln.Nt, color = as.factor(growth))) +\n  geom_line(linewidth = 1) +\n    labs(x = 'Time', y = expression('ln('~italic(N[t])~')'),\n       color = expression(italic(r)),\n       title = 'Semilogarithmic')+\n  theme_bw()\n\n# plot combined\nggarrange(a,b,\n          nrow = 1,\n          common.legend = T)\n\n\n\n\n\n\n\n\nSlope of line in b is \\(r\\) (intrisic rate of increase)"
  },
  {
    "objectID": "ws4.html#exercises",
    "href": "ws4.html#exercises",
    "title": "Workshop 4: Density independent models",
    "section": "Exercises",
    "text": "Exercises\n\nDownload primer and open primer package. Upload the sparrows dataset from package and plot counts as function of years.\nCalculate the annual rate of increase (\\(\\lambda\\)) for each time step and plot \\(\\lambda\\) as function of years as a scatterplot\nHint: Look at the for loop/dplyr examples above\nChallenge: Simulate a population with varying \\(\\lambda\\) at each time step.\n\nExercise Solutions"
  },
  {
    "objectID": "ws6.html",
    "href": "ws6.html",
    "title": "Workshop 6: Demographic matrix models",
    "section": "",
    "text": "This workshop covers population demographic models.\nR script: github\nR script of workshop 6"
  },
  {
    "objectID": "ws6.html#matrix-projection-models",
    "href": "ws6.html#matrix-projection-models",
    "title": "Workshop 6: Demographic matrix models",
    "section": "Matrix projection models",
    "text": "Matrix projection models\nWhen modeling populations, not are life stages are equal. There can be drastic differences in survival or reproductive output depending on the life stage. Therefore, it is important to consider the demography when modeling the population. This can be done with matrices to model structured populations. These models use a transition (also called projection) matrix (\\(A\\)) that represents mathematically all of the stages and transitions between stages in the population. The population at time \\(N_{t+1}\\) can be found with the following formula that takes advantage of matrix multiplication: \\[N_{t+1} = AN_t\\]"
  },
  {
    "objectID": "ws6.html#matrices-in-r",
    "href": "ws6.html#matrices-in-r",
    "title": "Workshop 6: Demographic matrix models",
    "section": "Matrices in R",
    "text": "Matrices in R\nAnother data structure that is useful in ecological uses of R are matrices. A matrix is made with the matrix() function with the basic syntax matrix(data = , nrow = , ncol = , byrow = , dimnames = ).\ndata = the input vector which becomes the data elements of the matrix.\nnrow = the number of rows to be created.\nncol = the number of columns to be created.\nbyrow = FALSE if TRUE then the input vector elements are arranged by row.\ndimname = the names assigned to the rows and columns.\n\n# make a matrix using nrow\nm1 = matrix(c(1,2,3,4,5,6), nrow = 2)\nm1 \n##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\n\n# make a matrix using ncol\nm2 = matrix(c(1,2,3,4,5,6), ncol = 2)\nm2 \n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n\n# make a matrix using nrow and by row\nm3 = matrix(c(1,2,3,4,5,6), ncol = 2, byrow = T)\nm3\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## [3,]    5    6\n\n\nIndexing\nMatrices can be indexed in 2 ways\n\n# make a matrix using ncol\nm2 = matrix(c(1,2,3,4,5,6), ncol = 2)\nm2 \n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n\nm2[1,2]\n## [1] 4\nm2[4]\n## [1] 4\n# make a matrix using nrow and by row\nm3 = matrix(c(1,2,3,4,5,6), ncol = 2, byrow = T)\nm3\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## [3,]    5    6\n\nm3[1,2]\n## [1] 2\nm3[4]\n## [1] 2\n\n\n\nMatrix algebra\nMatrix algebra can be done on matrices. There are specific matrix opperation like %*%, and functions like sum(),mean(), rowSums(), colSums(), rowMeans(), and colMeans() can be used to sum up entire matrices or specific rows or columns.\n\n\nm2 = matrix(c(1,2,3,4,5,6), ncol = 3)\nm2 \n##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\n\nm2 + 1 \n##      [,1] [,2] [,3]\n## [1,]    2    4    6\n## [2,]    3    5    7\nm2/3\n##           [,1]     [,2]     [,3]\n## [1,] 0.3333333 1.000000 1.666667\n## [2,] 0.6666667 1.333333 2.000000\n\nm3 = matrix(c(1,2,3,4,5,6), ncol = 3, byrow = T)\nm3\n##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\n\nm2 + m3 \n##      [,1] [,2] [,3]\n## [1,]    2    5    8\n## [2,]    6    9   12\nm3 - m2\n##      [,1] [,2] [,3]\n## [1,]    0   -1   -2\n## [2,]    2    1    0\n\n# multply matrix with vector\nv = c(1,2,3)\n\nm2*v\n##      [,1] [,2] [,3]\n## [1,]    1    9   10\n## [2,]    4    4   18\n\n# matrix multiplication \nm4 = matrix(c(1,2,3), ncol = 1)\nm2 %*% m4\n##      [,1]\n## [1,]   22\n## [2,]   28\n\n# functions with matrices\nm2\n##      [,1] [,2] [,3]\n## [1,]    1    3    5\n## [2,]    2    4    6\nsum(m2)\n## [1] 21\nmean(m2)\n## [1] 3.5\nrowSums(m2)\n## [1]  9 12\nrowMeans(m2)\n## [1] 3 4\ncolSums(m2)\n## [1]  3  7 11\ncolMeans(m2)\n## [1] 1.5 3.5 5.5\n\n\n\nRandom sampling of matrices\n\n# sample matrices from list \nm1 = matrix(c(4,3,2,1), ncol = 2)\nm2 = matrix(c(1,2,3,4), ncol = 2)\nm3 = matrix(c(1,2,3,4), ncol = 2, byrow = T)\n\nm = list(m1, m2, m3)\n\nsample(m, size = 4, replace = T)\n## [[1]]\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    4    2\n## [2,]    3    1\n## \n## [[4]]\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n\nsample(m, size = 4, replace = T, prob = c(0.8, 0.1, 0.1))\n## [[1]]\n##      [,1] [,2]\n## [1,]    4    2\n## [2,]    3    1\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    4    2\n## [2,]    3    1\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    4    2\n## [2,]    3    1\n## \n## [[4]]\n##      [,1] [,2]\n## [1,]    4    2\n## [2,]    3    1"
  },
  {
    "objectID": "ws6.html#stage-matrix-model",
    "href": "ws6.html#stage-matrix-model",
    "title": "Workshop 6: Demographic matrix models",
    "section": "2 stage matrix model",
    "text": "2 stage matrix model\nThe transition matrix (\\(A\\)) represents the growth, survival, and fecundity of each life stage. Here we use a simple two stage demographic model for a population with a distinct juvenile and adult stage (this can also represent seed and adult plant). The transition matrix can be represented as \\[ A = \\begin{bmatrix}\np_{11}&F_{12} \\\\\np_{21}&p_{22} \\\\\n\\end{bmatrix}\\] where from time \\(t\\) to \\(t + 1\\)\n- \\(p_{11}\\) is the probability juveniles survives and stays as a juvenile\n- \\(p_{21}\\) is the probability juveniles survives and transitions to an adult\n- \\(p_{22}\\) is the probability adults survives\n- \\(F_{12}\\) is contribution of adults to juveniles (e.g. reproduction)\n\n\n# setting up initial conditions \np11 = 0\np21 = 0.2\np22 = 0.8\nF12 = 1.5\n\n# set up transition matrix \nA = matrix(c(p11, F12, p21, p22), byrow = T, ncol = 2)\nA\n##      [,1] [,2]\n## [1,]  0.0  1.5\n## [2,]  0.2  0.8\n\n# initial population conditions\njuv = 50\nad = 100\n\n#matrix of populations\np = matrix(c(juv, ad), ncol = 1)\np\n##      [,1]\n## [1,]   50\n## [2,]  100\n\nWe can use for loops to simulate population dynamics\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n# set conditions\nyears = 50\n\n# place to store data\npop = tibble(time = 0:years,\n             Nt = NA, \n             juvs = NA,\n             adults = NA)\n\npop$Nt[pop$time == 0] = sum(p)\npop$juvs[pop$time == 0] = p[1]\npop$adults[pop$time == 0] = p[2]\n\npop\n## # A tibble: 51 × 4\n##     time    Nt  juvs adults\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n##  1     0   150    50    100\n##  2     1    NA    NA     NA\n##  3     2    NA    NA     NA\n##  4     3    NA    NA     NA\n##  5     4    NA    NA     NA\n##  6     5    NA    NA     NA\n##  7     6    NA    NA     NA\n##  8     7    NA    NA     NA\n##  9     8    NA    NA     NA\n## 10     9    NA    NA     NA\n## # ℹ 41 more rows\n\nfor(i in 1:years){\n  p = A %*% p\n  pop$Nt[pop$time == i] = sum(p)\n  pop$juvs[pop$time == i] = p[1]\n  pop$adults[pop$time == i] = p[2]\n}\n\ndf = pop %&gt;% \n  pivot_longer(Nt:adults, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, levels = c('Nt','juvs','adults')))\n\nggplot(df, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(linewidth = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'red', 'blue'))+\n  theme_bw()"
  },
  {
    "objectID": "ws6.html#popbio",
    "href": "ws6.html#popbio",
    "title": "Workshop 6: Demographic matrix models",
    "section": "popbio",
    "text": "popbio\nThe package popbio was developed for estimating and analyzing demographic models. This package can be useful as these models become more complex with more life stages.\n\nConstructing transition and fertility matrices (from popbio package info: Stubben & Brook. 2007. J Stats Soft)\nThe data are derived from a census - i.e., track fate of marked individuals and reproduction output. There are four main steps. It is recommended to use a long format to organized and structure your census data.\n\nStep 1 - Create a stage-fate data frame\n\nlibrary(popbio)\ndata(\"test.census\")\n\ntrans = full_join(test.census, test.census, by = 'plant', \n                  relationship = \"many-to-many\") |&gt; \n  filter(year.x == year.y -1) |&gt; \n  rename(year = year.x, stage = stage.x, fruits = fruits.x,\n         year2 = year.y, fate = stage.y, fruits2 = fruits.y)\n\ntrans\n##    plant year        stage fruits year2         fate fruits2\n## 1      1 2001     seedling      0  2002         dead       0\n## 2      2 2001     seedling      0  2002   vegetative       0\n## 3      3 2001     seedling      0  2002         dead       0\n## 4      4 2001     seedling      0  2002         dead       0\n## 5      5 2001     seedling      0  2002   vegetative       0\n## 6      6 2001     seedling      0  2002   vegetative       0\n## 7      7 2001   vegetative      0  2002 reproductive       2\n## 8      8 2001   vegetative      0  2002   vegetative       0\n## 9      9 2001 reproductive      2  2002         dead       0\n## 10    10 2001 reproductive      4  2002 reproductive       7\n## 11    11 2001 reproductive      9  2002 reproductive       3\n## 12     2 2002   vegetative      0  2003   vegetative       0\n## 13     5 2002   vegetative      0  2003         dead       0\n## 14     6 2002   vegetative      0  2003   vegetative       0\n## 15     7 2002 reproductive      2  2003   vegetative       0\n## 16     8 2002   vegetative      0  2003         dead       0\n## 17    10 2002 reproductive      7  2003         dead       0\n## 18    11 2002 reproductive      3  2003         dead       0\n## 19    12 2002     seedling      0  2003         dead       0\n## 20    13 2002     seedling      0  2003         dead       0\n## 21    14 2002     seedling      0  2003         dead       0\n## 22    15 2002     seedling      0  2003   vegetative       0\n## 23    16 2002     seedling      0  2003         dead       0\n\n\n\nStep 2 - Adding fertility using relative values (blind/anynymous reproduction)\n\nseedlings = test.census |&gt; \n  filter(year == 2002, stage == 'seedling') |&gt; \n  nrow()\n\nseedlings\n## [1] 5\n\ntrans01 = trans |&gt;  \n  filter(year == 2001) |&gt; \n  select(plant, stage, fruits, fate) |&gt; \n  mutate(seedling = fruits/sum(fruits)*seedlings)\n\ntrans01\n##    plant        stage fruits         fate  seedling\n## 1      1     seedling      0         dead 0.0000000\n## 2      2     seedling      0   vegetative 0.0000000\n## 3      3     seedling      0         dead 0.0000000\n## 4      4     seedling      0         dead 0.0000000\n## 5      5     seedling      0   vegetative 0.0000000\n## 6      6     seedling      0   vegetative 0.0000000\n## 7      7   vegetative      0 reproductive 0.0000000\n## 8      8   vegetative      0   vegetative 0.0000000\n## 9      9 reproductive      2         dead 0.6666667\n## 10    10 reproductive      4 reproductive 1.3333333\n## 11    11 reproductive      9 reproductive 3.0000000\n\n\n\nStep 3 - Creating projection matrix A = T + F\n\n#Using popbio to construct projection matrix from transition and fertility matrices\nstages = c(\"seedling\", \"vegetative\", \"reproductive\")\n\nprojection.matrix(trans01, sort = stages)\n##               \n##                 seedling vegetative reproductive\n##   seedling     0.0000000  0.0000000    1.6666667\n##   vegetative   0.5000000  0.5000000    0.0000000\n##   reproductive 0.0000000  0.5000000    0.6666667\n\ntrans01 = trans01 |&gt; \n  mutate(stage = ordered(stage, levels = stages))\n\nprojection.matrix(trans01, TF = TRUE)\n## $T\n##               \n##                 seedling vegetative reproductive\n##   seedling     0.0000000  0.0000000    0.0000000\n##   vegetative   0.5000000  0.5000000    0.0000000\n##   reproductive 0.0000000  0.5000000    0.6666667\n## \n## $F\n##               \n##                seedling vegetative reproductive\n##   seedling     0.000000   0.000000     1.666667\n##   vegetative   0.000000   0.000000     0.000000\n##   reproductive 0.000000   0.000000     0.000000\n\n\n\nStep 4 - Adding other information not included in the census\n\ndata('aq.trans')\n\n#subset for 1996\naq96 = aq.trans |&gt; \n  filter(year == 1996) |&gt;  \n  select(plot, plant,stage, fate, fruits)\n\n# measured metrics\nseed.survival = 0.126\nseed.bank.size = 10000\nseeds.per.fruit = 120\n\n#calculate metrics\nrecruits = test.census |&gt; \n  filter(year == 1997, stage == 'recruits') |&gt; \n  nrow()\n\nseeds.from.plants = sum(aq96$fruits) * seeds.per.fruit\n\nrecruitment.rate = recruits/(seed.bank.size + seeds.from.plants)\n\n#calculate recruits and seeds \naq96 = aq96 |&gt; \n  mutate(recruit = fruits/sum(fruits) * seeds.from.plants * recruitment.rate,\n         seed = fruits * seeds.per.fruit * seed.survival)\naq96\n##      plot plant   stage   fate fruits recruit   seed\n## 1     903     1   small  small      0       0   0.00\n## 2     903     2  flower  large      1       0  15.12\n## 3     903     3   small  large      0       0   0.00\n## 4     903     4   small  small      0       0   0.00\n## 5     903     7   small  large      0       0   0.00\n## 6     903     8   small  large      0       0   0.00\n## 7     903    10   small   dead      0       0   0.00\n## 8     903    11  flower  large      1       0  15.12\n## 9     903    14   small  large      0       0   0.00\n## 10    903    15   small   dead      0       0   0.00\n## 11    903    21   small   dead      0       0   0.00\n## 12    903    23   small  small      0       0   0.00\n## 13    903    28   small  large      0       0   0.00\n## 14    903    29  flower  large      1       0  15.12\n## 15    903    30   small  large      0       0   0.00\n## 16    903    33   small   dead      0       0   0.00\n## 17    903    35   small  large      0       0   0.00\n## 91    906     1   small  small      0       0   0.00\n## 92    906     8  flower  large     10       0 151.20\n## 93    906    11   small   dead      0       0   0.00\n## 94    906    12 recruit   dead      0       0   0.00\n## 95    906    13 recruit   dead      0       0   0.00\n## 96    906    14 recruit  small      0       0   0.00\n## 97    906    15 recruit  small      0       0   0.00\n## 98    906    16 recruit   dead      0       0   0.00\n## 99    906    17 recruit  small      0       0   0.00\n## 100   906    19  flower  large      6       0  90.72\n## 101   906    21  flower  large     10       0 151.20\n## 102   906    22   small  small      0       0   0.00\n## 137   909     1   small  large      0       0   0.00\n## 138   909     2   small  small      0       0   0.00\n## 139   909     4   small  large      0       0   0.00\n## 140   909     8   small  large      0       0   0.00\n## 141   909     9  flower  large      1       0  15.12\n## 142   909    10   small   dead      0       0   0.00\n## 143   909    13  flower   dead      1       0  15.12\n## 144   909    14  flower  large      1       0  15.12\n## 145   909    15   small   dead      0       0   0.00\n## 146   909    18   small  large      0       0   0.00\n## 147   909    19  flower  large      0       0   0.00\n## 148   909    23   small  large      0       0   0.00\n## 149   909    24   small  large      0       0   0.00\n## 150   909    28   small  large      0       0   0.00\n## 151   909    30  flower  large      1       0  15.12\n## 152   909    31   small   dead      0       0   0.00\n## 153   909    32   small   dead      0       0   0.00\n## 154   909    36   small   dead      0       0   0.00\n## 155   909    38   small   dead      0       0   0.00\n## 156   909    39  flower  large      4       0  60.48\n## 157   909    46   small  small      0       0   0.00\n## 158   909    48   small  large      0       0   0.00\n## 159   909    49   small   dead      0       0   0.00\n## 160   909    50   small  small      0       0   0.00\n## 161   909    51   small  large      0       0   0.00\n## 162   909    59   small  large      0       0   0.00\n## 163   909    61   small  large      0       0   0.00\n## 164   909    62   small   dead      0       0   0.00\n## 286   913     3  flower  large      0       0   0.00\n## 287   913     4   large  large      0       0   0.00\n## 288   913     6   small   dead      0       0   0.00\n## 289   913    12   large  small      0       0   0.00\n## 290   913    16   small  small      0       0   0.00\n## 291   913    23   large  large      0       0   0.00\n## 292   913    24   small  small      0       0   0.00\n## 293   913    25   small  small      0       0   0.00\n## 417   914     1 recruit   dead      0       0   0.00\n## 418   914     2   large   dead      0       0   0.00\n## 419   914     3   small   dead      0       0   0.00\n## 420   914     4   large   dead      0       0   0.00\n## 421   914     5   small   dead      0       0   0.00\n## 422   914     7   small   dead      0       0   0.00\n## 423   914     8   small   dead      0       0   0.00\n## 424   914     9   small   dead      0       0   0.00\n## 425   914    10   small  small      0       0   0.00\n## 426   914    12   small  small      0       0   0.00\n## 427   914    14  flower  large      3       0  45.36\n## 428   914    16  flower   dead      1       0  15.12\n## 429   914    17   small  small      0       0   0.00\n## 430   914    18  flower flower      5       0  75.60\n## 431   914    20  flower   dead      2       0  30.24\n## 432   914    21  flower  large      3       0  45.36\n## 433   914    22   small  small      0       0   0.00\n## 434   914    26  flower  large      1       0  15.12\n## 435   914    27   small  small      0       0   0.00\n## 436   914    28   small  small      0       0   0.00\n## 437   914    29  flower flower      1       0  15.12\n## 438   914    30   small   dead      0       0   0.00\n## 439   914    31   small  small      0       0   0.00\n## 440   914    32   large   dead      0       0   0.00\n## 441   914    33 recruit   dead      0       0   0.00\n## 442   914    34 recruit  small      0       0   0.00\n## 443   914    35 recruit   dead      0       0   0.00\n## 444   914    36 recruit  small      0       0   0.00\n## 445   914    37   small   dead      0       0   0.00\n## 446   914    38   small  large      0       0   0.00\n## 447   914    39   large  large      0       0   0.00\n## 448   914    40  flower  large      6       0  90.72\n## 449   914    41  flower flower      0       0   0.00\n## 450   914    43   large  large      0       0   0.00\n## 451   914    44   small  small      0       0   0.00\n## 452   914    99   large flower      0       0   0.00\n## 579   916     1   large  large      0       0   0.00\n## 580   916     3   small  large      0       0   0.00\n## 581   916     4   small  large      0       0   0.00\n## 582   916     6   small  small      0       0   0.00\n## 583   916     9   small  large      0       0   0.00\n## 584   916    17   small  small      0       0   0.00\n## 585   916    18   small  small      0       0   0.00\n## 586   916    19  flower  large      2       0  30.24\n## 587   916    27   small  large      0       0   0.00\n## 588   916    33 recruit  small      0       0   0.00\n## 589   916    39  flower  large      1       0  15.12\n## 590   916    49  flower  large      3       0  45.36\n## 591   916    51   small  large      0       0   0.00\n## 662   921     1   large  small      0       0   0.00\n## 663   921     2   small  small      0       0   0.00\n## 664   921     4  flower   dead      0       0   0.00\n## 665   921     5  flower  small      0       0   0.00\n## 666   921     6  flower   dead      0       0   0.00\n## 691   923     1   small  small      0       0   0.00\n## 692   923     4  flower  small      1       0  15.12\n## 693   923     5  flower  small      1       0  15.12\n## 694   923     7  flower  small      3       0  45.36\n## 695   923    10  flower  small      3       0  45.36\n## 696   923    11   small  small      0       0   0.00\n## 697   923    12  flower  small      1       0  15.12\n## 698   923    14   large  large      0       0   0.00\n## 699   923    17   small   dead      0       0   0.00\n## 700   923    19  flower  small      3       0  45.36\n## 701   923    20  flower  small      2       0  30.24\n## 702   923    23   small   dead      0       0   0.00\n## 703   923    25   small  small      0       0   0.00\n## 704   923    26   small   dead      0       0   0.00\n## 705   923    28  flower flower      1       0  15.12\n## 706   923    29   small   dead      0       0   0.00\n## 707   923    30   small  small      0       0   0.00\n## 708   923    31   small   dead      0       0   0.00\n## 709   923    32   small  small      0       0   0.00\n## 710   923    33   small  small      0       0   0.00\n## 711   923    35   small   dead      0       0   0.00\n## 712   923    36   small  small      0       0   0.00\n## 713   923    38   small  small      0       0   0.00\n## 714   923    43   small   dead      0       0   0.00\n## 715   923    44  flower  small      2       0  30.24\n## 716   923    46  flower  small      2       0  30.24\n## 717   923    49   small   dead      0       0   0.00\n## 718   923    50   small   dead      0       0   0.00\n## 719   923    52   small   dead      0       0   0.00\n## 720   923    53  flower  small      1       0  15.12\n## 721   923    61  flower  small      1       0  15.12\n## 722   923    62   small   dead      0       0   0.00\n## 723   923    63   small  small      0       0   0.00\n## 724   923    64   small   dead      0       0   0.00\n## 725   923    71   large flower      0       0   0.00\n## 726   923    76  flower  large      3       0  45.36\n## 727   923    77   small   dead      0       0   0.00\n## 728   923    78   large   dead      0       0   0.00\n## 729   923    79   small   dead      0       0   0.00\n## 730   923    80   small   dead      0       0   0.00\n## 731   923    81  flower  large      2       0  30.24\n## 732   923    82   small  small      0       0   0.00\n## 733   923    83   small   dead      0       0   0.00\n## 734   923   150   small  small      0       0   0.00\n## 735   923   165  flower  large     19       0 287.28\n## 736   923   168   small  large      0       0   0.00\n## 737   923   173   small  large      0       0   0.00\n## 953   929     1   small   dead      0       0   0.00\n## 954   929     3  flower  large      9       0 136.08\n## 955   929     4   large  large      0       0   0.00\n## 956   929     5   small  small      0       0   0.00\n## 957   929     7  flower   dead      2       0  30.24\n## 958   929     8  flower  large      7       0 105.84\n## 959   929     9   small  large      0       0   0.00\n## 960   929    11   small  small      0       0   0.00\n## 961   929    13  flower  large      1       0  15.12\n## 962   929    14   small   dead      0       0   0.00\n## 963   929    15   small   dead      0       0   0.00\n## 964   929    18   small   dead      0       0   0.00\n## 965   929    22  flower  large      2       0  30.24\n## 966   929    24   small  large      0       0   0.00\n## 967   929    32   small   dead      0       0   0.00\n## 968   929    33   small  large      0       0   0.00\n## 969   929    38  flower  large     20       0 302.40\n## 970   929    40  flower  large      3       0  45.36\n## 971   929    42  flower  large      2       0  30.24\n## 972   929    43   small  large      0       0   0.00\n## 973   929    44  flower  large      1       0  15.12\n## 974   929    45  flower flower      4       0  60.48\n## 975   929    46   small  large      0       0   0.00\n## 976   929    47   small  large      0       0   0.00\n## 1297  930     2   small   dead      0       0   0.00\n## 1298  930     3   small   dead      0       0   0.00\n## 1299  930    19   small  small      0       0   0.00\n## 1300  930    26   small  small      0       0   0.00\n## 1301  930    27   small  small      0       0   0.00\n## 1302  930    28   small  small      0       0   0.00\n## 1303  930    30  flower  small      1       0  15.12\n## 1304  930    36  flower  small      1       0  15.12\n## 1305  930    37   small  small      0       0   0.00\n## 1306  930    39  flower  small      1       0  15.12\n## 1307  930    46  flower  small     14       0 211.68\n## 1308  930    47   small  small      0       0   0.00\n## 1309  930    69  flower   dead      4       0  60.48\n## 1310  930    70   small  small      0       0   0.00\n## 1311  930    73   small  small      0       0   0.00\n## 1312  930    75   large  small      0       0   0.00\n## 1313  930    79   small  small      0       0   0.00\n## 1314  930    80  flower  small      5       0  75.60\n## 1315  930    81  flower  small      2       0  30.24\n## 1316  930    83   small   dead      0       0   0.00\n## 1317  930    84   small  small      0       0   0.00\n## 1318  930    85   small  small      0       0   0.00\n## 1319  930    86   small  small      0       0   0.00\n## 1320  930    87   small   dead      0       0   0.00\n## 1321  930    88   small  small      0       0   0.00\n## 1322  930    91   small   dead      0       0   0.00\n## 1323  930    92  flower   dead      3       0  45.36\n## 1324  930    93   small   dead      0       0   0.00\n## 1325  930    94   small  small      0       0   0.00\n## 1326  930    95   small  small      0       0   0.00\n## 1327  930    98   large  large      0       0   0.00\n## 1328  930   103   small  small      0       0   0.00\n## 1329  930   104   small  small      0       0   0.00\n## 1330  930   105   small  small      0       0   0.00\n## 1331  930   106  flower  small      5       0  75.60\n# matrix \nprojection.matrix(aq96, add = c(1, 1, seed.survival,2, 1, recruitment.rate))\n##          \n##                  seed     recruit       small       large      flower\n##   seed     0.12600000  0.00000000  0.00000000  0.00000000 48.04258065\n##   recruit  0.00000000  0.00000000  0.00000000  0.00000000  0.00000000\n##   small    0.00000000  0.50000000  0.40298507  0.17647059  0.30645161\n##   large    0.00000000  0.00000000  0.23880597  0.47058824  0.48387097\n##   flower   0.00000000  0.00000000  0.00000000  0.11764706  0.08064516\n\n\n\n\npop.projection()\npopbio::pop.projection() can be used to project population change and returns list of information about the model.\n- lambda - estimate of lambda using change between the last two population counts\n- stable.stage - estimate of stable stage distribution using proportions in last stage vector\n- stage.vector - A matrix with the number of projected individuals in each stage class\n- pop.sizes - total number of projected individuals\n- pop.changes - proportional change in populations size\n\nFor more information about calculating \\(\\lambda\\) and stable stage you can refer to Chapter 4 of Steven’s Primer of Ecology using R or Chapter 3 of Gotelli’s A primer of Ecology.\n\nstages = c(\"seedling\", \"vegetative\", \"flowering\")\n\n# create projection matrix\nA = matrix(c(0, 0, 5.905, 0.368, 0.639, 0.025, 0.001, 0.152, 0.051), \n           nrow = 3, byrow = TRUE, dimnames = list(stages, stages))\n\n# Initial vector of population sizes across stages\nn = c(5, 5, 5)\n\n# run model\np = pop.projection(A = A, n = n, iterations = 15)\np\n## $lambda\n## [1] 0.9969892\n## \n## $stable.stage\n##   seedling vegetative  flowering \n## 0.45252933 0.47113978 0.07633089 \n## \n## $stage.vectors\n##            0      1         2         3         4         5         6         7\n## seedling   5 29.525  6.023100  5.112933 13.030853 10.841000  8.851612 10.114475\n## vegetative 5  5.160 14.187940 11.304241  9.160138 10.694580 10.860800 10.240266\n## flowering  5  1.020  0.865865  2.206749  1.835902  1.499003  1.712866  1.747049\n##                    8         9        10        11        12        13\n## seedling   10.316326  9.777111  9.812795  9.915667  9.809763  9.745986\n## vegetative 10.309333 10.425465 10.301394 10.235679 10.231096 10.188925\n## flowering   1.655734  1.661777  1.679198  1.661264  1.650463  1.649110\n##                   14\n## seedling    9.737995\n## vegetative 10.138473\n## flowering   1.642567\n## \n## $pop.sizes\n##  [1] 15.00000 35.70500 21.07691 18.62392 24.02689 23.03458 21.42528 22.10179\n##  [9] 22.28139 21.86435 21.79339 21.81261 21.69132 21.58402 21.51904\n## \n## $pop.changes\n##  [1] 2.3803333 0.5903068 0.8836175 1.2901091 0.9587000 0.9301353 1.0315755\n##  [8] 1.0081262 0.9812831 0.9967542 1.0008820 0.9944395 0.9950533 0.9969892\n\nstage.vector.plot(p$stage.vectors)\n\n\n\n\n\n\n\n\nPlot using ggplot\n\npp = tibble(time = as.numeric(colnames(p$stage.vectors)),\n            seedling = p$stage.vectors[1,],\n            vegetative = p$stage.vectors[2,],\n            flowering = p$stage.vectors[3,],\n            total = p$pop.sizes) %&gt;% \n  pivot_longer(seedling:total, names_to = 'stage', values_to = 'n') %&gt;% \n  mutate(stage = factor(stage, \n                        levels =c('total','seedling','vegetative','flowering')))\n\nggplot(pp, aes(time, n, color = stage)) +\n  geom_point() +\n  geom_line(size = 1) +\n  labs(x = 'Time', y = 'Population size', color = 'Stage') +\n  scale_color_manual(values = c('black', 'brown', 'green', 'pink'))+\n  theme_bw()\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\npopulation variability and stochastic growth\nThe stoch.projection() function came be used to project stochastic growth using whole matrix selection techniques in an independently and identically distributed (iid) environment from a set of two or more projection matrices. Returns a matrix listing final population sizes by stage class.\n\n#install.packages(popdemo)\nlibrary(popdemo)\n## Welcome to popdemo! This is version 1.3-0\n## Use ?popdemo for an intro, or browseVignettes('popdemo') for vignettes\n## Citation for popdemo is here: doi.org/10.1111/j.2041-210X.2012.00222.x\n## Development and legacy versions are here: github.com/iainmstott/popdemo\n\ndata(\"hudsonia\")\nhudsonia\n## $A85\n##             seed seedlings   tiny   small  medium   large\n## seed      0.4995    0.0000 4.5782 12.1425 22.3167 50.1895\n## seedlings 0.0004    0.0000 0.0039  0.0102  0.0188  0.0423\n## tiny      0.0000    0.4773 0.7059  0.1294  0.0831  0.0000\n## small     0.0000    0.0000 0.1345  0.4530  0.2079  0.2000\n## medium    0.0000    0.0000 0.0000  0.3235  0.6238  0.2000\n## large     0.0000    0.0000 0.0000  0.0647  0.0831  0.6000\n## \n## $A86\n##             seed seedlings   tiny   small  medium   large\n## seed      0.4995    0.0000 4.5782 12.1425 22.3167 50.1895\n## seedlings 0.0004    0.0000 0.0039  0.0102  0.0188  0.0423\n## tiny      0.0000    0.4773 0.4995  0.2178  0.0493  0.0000\n## small     0.0000    0.0000 0.2913  0.4356  0.1480  0.0000\n## medium    0.0000    0.0000 0.0000  0.2722  0.4440  0.0000\n## large     0.0000    0.0000 0.0000  0.0000  0.3454  0.9994\n## \n## $A87\n##             seed seedlings   tiny   small  medium   large\n## seed      0.4995    0.0000 4.4234 11.7319 21.5620 48.4923\n## seedlings 0.0003    0.0000 0.0028  0.0073  0.0135  0.0303\n## tiny      0.0000    0.4545 0.4575  0.3079  0.1425  0.0000\n## small     0.0000    0.0000 0.1144  0.5544  0.1425  0.0769\n## medium    0.0000    0.0000 0.0000  0.0616  0.4985  0.3846\n## large     0.0000    0.0000 0.0000  0.0000  0.2137  0.5385\n## \n## $A88\n##             seed seedlings   tiny   small  medium   large\n## seed      0.4995       0.0 4.7330 12.5531 23.0714 51.8867\n## seedlings 0.0003       0.0 0.0028  0.0075  0.0137  0.0308\n## tiny      0.0000       0.5 0.7331  0.1428  0.0000  0.0000\n## small     0.0000       0.0 0.2200  0.4286  0.0000  0.0000\n## medium    0.0000       0.0 0.0000  0.4286  0.6154  0.1000\n## large     0.0000       0.0 0.0000  0.0000  0.3846  0.9000\n\n# starting population size\nn = c(4264, 3, 30, 16, 25, 5)\nnames(n) = c(\"seed\", \"seedlings\", \"tiny\", \"small\", \"medium\",\"large\")\n\n# projection with equal probabilities \nx.eq = stoch.projection(matrices = hudsonia, n0 = n, nreps = 100) %&gt;% \n  as_tibble() %&gt;% \n  mutate(rep = row_number(),\n         total = seed + seedlings + tiny + small + medium + large,\n         type = 'equal')\n\nx.eq\n## # A tibble: 100 × 9\n##     seed seedlings  tiny small medium large   rep total type \n##    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;\n##  1 1068.     0.877 2.90  3.81   5.21   5.04     1 1086. equal\n##  2  718.     0.429 3.10  2.18   3.95   5.36     2  733. equal\n##  3  555.     0.332 1.29  0.835  2.52   3.93     3  564. equal\n##  4  237.     0.195 1.05  1.11   1.52   1.06     4  242. equal\n##  5  580.     0.346 3.50  2.36   4.53   3.55     5  594. equal\n##  6  266.     0.159 0.748 0.478  0.905  2.18     6  271. equal\n##  7 1248.     1.03  2.07  3.35   3.91   6.80     7 1265. equal\n##  8  646.     0.386 1.76  1.13   2.19   5.45     8  657. equal\n##  9  511.     0.313 2.12  1.81   2.85   2.39     9  521. equal\n## 10  461.     0.379 2.06  2.28   2.57   2.11    10  470. equal\n## # ℹ 90 more rows\n\n# unequal probabilities for projection matrices\nx.uneq = stoch.projection(matrices = hudsonia, n0 = n, nreps = 100, prob = c(0.2, 0.2, 0.2, 0.4))%&gt;% \n  as_tibble() %&gt;% \n  mutate(rep = row_number(),\n         total = seed + seedlings + tiny + small + medium + large,\n         type = 'unequal')\n\nx.uneq\n## # A tibble: 100 × 9\n##     seed seedlings  tiny small medium large   rep total type   \n##    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;  \n##  1  630.     0.376 1.67  0.902  2.47   5.35     1  641. unequal\n##  2  713.     0.426 2.64  1.49   3.73   5.61     2  727. unequal\n##  3  464.     0.283 2.81  2.40   2.23   1.61     3  473. unequal\n##  4  376.     0.310 0.596 0.473  0.309  3.65     4  382. unequal\n##  5 1170.     0.963 3.89  4.56   6.31   5.85     5 1191. unequal\n##  6 1126.     0.688 6.03  5.41   5.92   4.10     6 1148. unequal\n##  7 2366.     1.95  5.57  5.41   6.05  22.1      7 2407. unequal\n##  8  687.     0.563 2.14  2.67   3.77   2.78     8  699. unequal\n##  9 1706.     1.02  4.96  3.75   9.63  10.9      9 1736. unequal\n## 10 1324.     1.09  3.53  4.94   5.56   7.34    10 1347. unequal\n## # ℹ 90 more rows\n\npop2 = bind_rows(x.eq,x.uneq)\n\nggplot(pop2, aes(total, fill = type)) +\n  geom_density(alpha = 0.5) +\n  labs(x = 'Ending population size', color = NULL) +\n  theme_bw()"
  },
  {
    "objectID": "ws6.html#exercises",
    "href": "ws6.html#exercises",
    "title": "Workshop 6: Demographic matrix models",
    "section": "Exercises",
    "text": "Exercises\n\nCreate a transition matrix for a 2 stage population where the the probability of stage 1 survival and stays in stage 1 = 0, the probability of survival of stage 1 and transition to stage 2 = 0.1, the survival of stage 2 = 0.8, and contribution of stage 2 to stage 1 = 2.\nUse the transition matrix from exercise 1 to simulate 50 years of a population with a starting population of 50 individuals in stage 1 and 25 individuals in stage 2. Plot the results.\nChallenge: Using the 3 matrices below. Simulate the same population above. Use a probability of 0.5 for average year, 0.3 for poor year, and 0.2 for good year. Plot your results\n\\[ average = \\begin{bmatrix}\n0&2 \\\\\n0.1&0.8\n\\end{bmatrix}\\] \\[\npoor = \\begin{bmatrix}\n0&1 \\\\\n0.1&0.6\n\\end{bmatrix}\\]\n\n\\[\ngood = \\begin{bmatrix}\n0&3 \\\\\n0.1&0.8\n\\end{bmatrix}\\]\nExercise Solutions"
  },
  {
    "objectID": "ws8.html",
    "href": "ws8.html",
    "title": "Workshop 8: Community data: vegan and multivariate methods",
    "section": "",
    "text": "This workshop discusses working with community data by introducing the vegan package and how to do simple multivariate analyses.\nR script: github\nR script of workshop 8\ndata"
  },
  {
    "objectID": "ws8.html#community-data",
    "href": "ws8.html#community-data",
    "title": "Workshop 8: Community data: vegan and multivariate methods",
    "section": "Community Data",
    "text": "Community Data\nCommunity data can vary in format, but typically involves abundance, biomass, or CPUE data for multiple species collected in each sample. Data can be stored in wide (species ID for each column) or long format. The vegan package can be useful for calculating diversity metrics. vegan calculates metrics from a community matrix (long format).\n\n# calculate metrics for each pool\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# data in wide format\nmarsh_w = read_csv('data/Calcasieu.csv') |&gt; \n  mutate(site = as.character(site),\n         month = month(date)) \n## Rows: 90 Columns: 62\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr   (1): basin\n## dbl  (60): site, Speckled Madtom, Sailfin Molly, Blue Crab, Atlantic Croaker...\n## date  (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmarsh_w\n## # A tibble: 90 × 63\n##    site  date       basin     `Speckled Madtom` `Sailfin Molly` `Blue Crab`\n##    &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;                 &lt;dbl&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n##  1 15    2007-01-10 Calcasieu                 2               1          10\n##  2 15    2007-02-22 Calcasieu                 0               0           0\n##  3 15    2007-03-02 Calcasieu                 0               0          19\n##  4 15    2007-04-11 Calcasieu                 0               2          23\n##  5 15    2007-06-05 Calcasieu                 0               0           0\n##  6 15    2007-07-24 Calcasieu                 0               0           3\n##  7 15    2007-08-07 Calcasieu                 0               0           6\n##  8 15    2007-09-20 Calcasieu                 0               0           0\n##  9 15    2007-09-27 Calcasieu                 0               0           0\n## 10 15    2007-10-03 Calcasieu                 0               0           0\n## # ℹ 80 more rows\n## # ℹ 57 more variables: `Atlantic Croaker` &lt;dbl&gt;, `Gulf Menhaden` &lt;dbl&gt;,\n## #   `Grass Shrimp` &lt;dbl&gt;, `Striped Mullet` &lt;dbl&gt;, `Inland Silverside` &lt;dbl&gt;,\n## #   `Sheepshead Minnow` &lt;dbl&gt;, `Gulf Killifish` &lt;dbl&gt;, `Freshwater Goby` &lt;dbl&gt;,\n## #   `Mosquito Fish` &lt;dbl&gt;, `White Shrimp` &lt;dbl&gt;, `Bay Anchovy` &lt;dbl&gt;,\n## #   `Southern Flounder` &lt;dbl&gt;, `Diamond Killifish` &lt;dbl&gt;, `Naked Goby` &lt;dbl&gt;,\n## #   `Brown Shrimp` &lt;dbl&gt;, `Sand Seatrout` &lt;dbl&gt;, Pinfish &lt;dbl&gt;, …\n\n\nvegan diversity functions\nThere are useful functions in vegan that can be used to calculate diverstiy metrics.\nspecnumber() calculates species richness. diversity() can calculate Shannon, simpson, and inverse simpson metrics.\n\nlibrary(vegan)\n## Loading required package: permute\n## Loading required package: lattice\n## This is vegan 2.6-8\n\nmarsh_div = marsh_w |&gt; \n  mutate(richness = specnumber(across(`Speckled Madtom`:`Smooth Puffer`)),\n         H = diversity(across(`Speckled Madtom`:`Smooth Puffer`)),\n         simp = diversity(across(`Speckled Madtom`:`Smooth Puffer`), \"simpson\"),\n         invsimp = diversity(across(`Speckled Madtom`:`Smooth Puffer`),\"inv\")) \n\n#average\naverage_div = marsh_div |&gt; \n  group_by(month) |&gt; \n  summarize(across(richness:invsimp, list(mean = mean, sd = sd)))\n\naverage_div\n## # A tibble: 12 × 9\n##    month richness_mean richness_sd H_mean  H_sd simp_mean simp_sd invsimp_mean\n##    &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n##  1     1          9.17        3.37  1.18  0.469     0.537   0.217         2.65\n##  2     2          7.17        2.14  0.819 0.325     0.430   0.177         1.94\n##  3     3          8           1.79  0.868 0.541     0.412   0.274         2.06\n##  4     4          7.67        2.07  1.03  0.370     0.491   0.182         2.14\n##  5     5          9.33        1.53  0.841 0.153     0.368   0.107         1.61\n##  6     6         11.2         1.72  1.16  0.523     0.541   0.253         2.74\n##  7     7         11.8         3.66  1.33  0.338     0.606   0.116         2.74\n##  8     8          9.33        4.63  1.20  0.612     0.544   0.284         2.88\n##  9     9          7.33        3.31  0.898 0.456     0.463   0.221         2.15\n## 10    10          9.67        2.19  0.878 0.471     0.416   0.231         2.04\n## 11    11          7.33        2.06  0.837 0.390     0.422   0.213         1.96\n## 12    12          8.22        1.99  1.07  0.333     0.530   0.178         2.44\n## # ℹ 1 more variable: invsimp_sd &lt;dbl&gt;\n\nggplot(average_div, aes(month, richness_mean))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Month', y = 'Species richness')+\n  theme_bw()"
  },
  {
    "objectID": "ws8.html#diversity-partitioning",
    "href": "ws8.html#diversity-partitioning",
    "title": "Workshop 8: Community data: vegan and multivariate methods",
    "section": "Diversity partitioning",
    "text": "Diversity partitioning\n-From Stevens 2010 - A primer of ecology with R\n\nWe frequently refer to biodiversity (i.e., richness, Simpson’s, and Shannon diversity) at different spatial scales as \\(\\alpha\\), \\(\\beta\\), and \\(\\gamma\\) diversity.\n\nAlpha diversity, \\(\\alpha\\), is the diversity of a point location or of a single sample.\nBeta diversity, \\(\\beta\\), is the diversity due to multiple localities and can be used to describe differences in species composition among sites.\nGamma diversity, \\(\\gamma\\), is the diversity of a region, or at least the diversity of all the species in a set of samples collected over a large area (with large extent relative to a single sample).\nDiversity across spatial scales can be further be partitioned in one of two ways, either using additive or multiplicative partitioning.\n\n\nAdditive partitioning\nAdditive partitioning is \\[\\overline{\\alpha} + \\beta = \\gamma\\] where \\(\\alpha\\) is the average diversity of samples, \\(\\gamma\\) is the diversity of pooled samples and \\(\\beta\\) is found as \\[\\beta = \\gamma - \\overline{\\alpha}\\] We can think of \\(\\beta\\) as the average number of species not found in a sample, but which we know to be in the region. Additive partitioning allows direct comparison of average richness among samples at any hierarchical level of organization because all three measures of diversity \\(\\alpha\\), \\(\\beta\\), and \\(\\gamma\\) are expressed in the same units. This makes it analogous to partitioning variance in ANOVA. This is not the case for multiplicative partitioning diversity.\n\n# gamma diversity\n# convert to long format for plotting\nmarsh_l = marsh_w |&gt; \n  pivot_longer(cols = 4:62, \n               names_to = \"Species\", \n               values_to = \"Count\") \n\nmarsh_l\n## # A tibble: 5,310 × 6\n##    site  date       basin     month Species           Count\n##    &lt;chr&gt; &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;\n##  1 15    2007-01-10 Calcasieu     1 Speckled Madtom       2\n##  2 15    2007-01-10 Calcasieu     1 Sailfin Molly         1\n##  3 15    2007-01-10 Calcasieu     1 Blue Crab            10\n##  4 15    2007-01-10 Calcasieu     1 Atlantic Croaker     47\n##  5 15    2007-01-10 Calcasieu     1 Gulf Menhaden         5\n##  6 15    2007-01-10 Calcasieu     1 Grass Shrimp        134\n##  7 15    2007-01-10 Calcasieu     1 Striped Mullet        2\n##  8 15    2007-01-10 Calcasieu     1 Inland Silverside    50\n##  9 15    2007-01-10 Calcasieu     1 Sheepshead Minnow    10\n## 10 15    2007-01-10 Calcasieu     1 Gulf Killifish        1\n## # ℹ 5,300 more rows\n\ngammaDiv = length(unique(marsh_l$Species))\n\n# calculate beta diversity\nbetaDiv = marsh_div |&gt; \n  group_by(month) |&gt; \n  summarise(alpha = mean(richness, na.rm = TRUE),\n            gamma = gammaDiv,\n            beta_a = gamma - alpha)\n\n# plot \nlibrary(ggpubr)\nlibrary(viridis)\n## Loading required package: viridisLite\n\na = ggplot(betaDiv, aes(month, alpha))+\n  geom_point()+\n  geom_line()+\n  scale_y_continuous(limits = c(0,60))+\n  labs(x = 'month', y = expression(alpha ~ 'diversity'))+\n  theme_bw()\n\nb = ggplot(betaDiv, aes(month, beta_a))+\n  geom_point()+\n  geom_line()+\n  scale_y_continuous(limits = c(0,60))+\n  labs(x = 'month', y = expression(beta ~ 'diversity'))+\n  theme_bw()\n\nggarrange(a,b,nrow =1, common.legend = T,align = 'h')\n\n\n\n\n\n\n\n\n\n\nMultiplicative partitioning\nMultiplicative partitioning is \\[\\overline{\\alpha} \\beta = \\gamma\\] and\n\\[\\beta = \\gamma/\\overline{\\alpha}\\] where \\(\\beta\\) is a conversion factor that describes the relative change in species composition among samples. Sometimes this type of \\(\\beta\\) diversity is thought of as the number of different community types in a set of samples. However, use this interpretation with great caution, as \\(\\beta\\) diversity depends completely on the sizes or extent of the samples used for \\(\\alpha\\) diversity.\n\nbetaDiv = betaDiv |&gt; \n  mutate(beta_m = gamma/alpha)\n\n\nb = ggplot(betaDiv, aes(month, beta_a))+\n  geom_point()+\n  geom_line()+\n  scale_y_continuous(limits = c(0,60))+\n  labs(x = 'month', y = expression('Additive'~ beta ~ 'diversity'))+\n  theme_bw()\n\nm = ggplot(betaDiv, aes(month, beta_m))+\n  geom_point()+\n  geom_line()+\n  scale_y_continuous(limits = c(0,60))+\n  labs(x = 'month', y = expression('Multiplicative'~beta ~ 'diversity'))+\n  theme_bw()\n\nggarrange(b,m,nrow =1, common.legend = T,align = 'h')"
  },
  {
    "objectID": "ws8.html#species-compositioncommunity-structure",
    "href": "ws8.html#species-compositioncommunity-structure",
    "title": "Workshop 8: Community data: vegan and multivariate methods",
    "section": "Species composition/Community structure",
    "text": "Species composition/Community structure\nInstead of distilling community data into metrics, comparisons can be made doing with the multivariate method. This is commonly done with distance or dissimilarity, and represent how similar communities are.\n\n# filter to 2 species in for visualization\nmarsh_spp = marsh_w |&gt; \n  group_by(site) |&gt; \n  summarise(across(c(`Gulf Menhaden`, `White Shrimp`), mean)) \n\nggplot(marsh_spp, aes(`Gulf Menhaden`, `White Shrimp`, color = site)) +\n  geom_point(size = 4)+\n  scale_color_viridis_d(option = 'turbo')+\n  theme_bw()\n\n\n\n\n\n\n\n\n\nEuclidean distance\nOne way to measure the distance between two points is to use eclidean distance, which is the straight line distance between two points. Euclidean distance between two points \\(d(p,q)\\) can be measured using the following formula \\[d(p,q) = \\sqrt{\\sum_{i = 1}^{n} (p_i - q_i)^2}\\]\nNote that this is not great for community data.\n\n#Example - Euclidean distance between site 15 and site 16\n\ngm_diff = marsh_spp$`Gulf Menhaden`[1] - marsh_spp$`Gulf Menhaden`[2] #Atya abundance pool 0 - pool 13\nws_diff = marsh_spp$`White Shrimp`[1] - marsh_spp$`White Shrimp`[2] #MAC abundance pool 0 - pool 13\n\nsqrt(gm_diff^2+ws_diff^2)\n## [1] 441.9072\n\n\n\nBray-Curtis\nA common distance method for community data is Bray-Curtis. This is the difference in species abundance between two sites divided by the total abundance at each site. Interpret as the proportion of all individuals that would remain unpaired - percentage of dissimilarity. Reflects changes in composition and changes in relative. This can be calculated with the vegan package.\n\n#First, lets create a community species matrix for average at each site\n\nmarsh_comm = marsh_w |&gt; \n  group_by(site) |&gt; \n  summarise(across(`Speckled Madtom`:`Smooth Puffer`, mean)) |&gt; \n  column_to_rownames(var = \"site\")\n\n# converts to dataframe\nmarsh_comm \n##    Speckled Madtom Sailfin Molly Blue Crab Atlantic Croaker Gulf Menhaden\n## 15       0.1333333    0.26666667 5.0000000        21.466667    238.000000\n## 16       4.5333333    0.00000000 0.8666667         2.933333      2.933333\n## 28       0.2000000    0.06666667 0.6000000         6.000000      6.800000\n## 30       4.7333333    0.00000000 0.7333333         3.733333    174.400000\n## 32       5.5333333    0.00000000 1.8666667         2.266667    142.200000\n## 51       0.2000000    0.00000000 0.8666667         1.066667      1.333333\n##    Grass Shrimp Striped Mullet Inland Silverside Sheepshead Minnow\n## 15     80.53333       3.200000          43.53333        0.93333333\n## 16    132.26667       3.200000          60.40000        0.40000000\n## 28     38.00000      11.933333          20.40000        0.06666667\n## 30    139.26667       7.866667          45.20000        0.40000000\n## 32    137.13333      12.133333          65.33333        1.80000000\n## 51    184.26667       5.733333          21.26667        0.13333333\n##    Gulf Killifish Freshwater Goby Mosquito Fish White Shrimp Bay Anchovy\n## 15     0.26666667      0.06666667    0.13333333    169.06667    84.26667\n## 16     0.53333333      0.00000000    0.00000000    543.26667    24.86667\n## 28     0.13333333      0.33333333    0.06666667    138.33333    21.86667\n## 30     1.80000000      0.00000000    0.00000000    549.40000    74.86667\n## 32     0.00000000      0.00000000    0.13333333     99.26667    70.20000\n## 51     0.06666667      0.33333333    0.00000000     36.46667    23.46667\n##    Southern Flounder Diamond Killifish Naked Goby Brown Shrimp Sand Seatrout\n## 15        0.26666667        0.06666667 0.20000000    23.533333     3.4666667\n## 16        1.13333333        0.06666667 0.20000000    15.200000     0.2000000\n## 28        0.06666667        0.00000000 0.00000000    18.533333     2.9333333\n## 30        0.00000000        0.00000000 0.06666667    28.733333     8.0000000\n## 32        0.00000000        0.00000000 0.46666667    24.466667     6.5333333\n## 51        0.00000000        0.00000000 0.20000000     6.533333     0.2666667\n##       Pinfish Striped Anchovy Skilletfish       Spot Atlantic Spadefish\n## 15 0.53333333       0.4000000  0.06666667 0.06666667                0.2\n## 16 0.53333333       0.4000000  0.00000000 0.40000000                0.0\n## 28 0.06666667       0.1333333  0.00000000 6.60000000                0.0\n## 30 0.33333333       0.3333333  0.26666667 2.73333333                0.0\n## 32 0.00000000       0.6666667  0.00000000 0.00000000                0.0\n## 51 0.13333333       0.0000000  0.00000000 0.00000000                0.0\n##      Ladyfish   Red Drum  Hogchoker Silver Perch Southern Kingfish\n## 15 0.13333333 0.06666667 0.06666667    0.1333333        0.13333333\n## 16 0.00000000 1.26666667 0.00000000    0.4666667        0.00000000\n## 28 0.00000000 0.40000000 0.00000000    0.0000000        0.33333333\n## 30 0.06666667 0.20000000 0.00000000    0.7333333        0.00000000\n## 32 0.00000000 0.73333333 0.00000000    0.4000000        0.06666667\n## 51 0.06666667 0.13333333 0.00000000    0.2000000        0.00000000\n##    Spotted Seatrout Threadfin Shad Scaled Sardine White Mullet Butterfish\n## 15        0.3333333     0.06666667     0.20000000    0.2000000        0.2\n## 16        1.2000000     0.06666667     0.26666667   59.1333333        0.0\n## 28        0.4666667     0.00000000     0.06666667    0.4000000        0.0\n## 30        0.8000000     0.00000000     0.46666667    0.1333333        0.0\n## 32        0.5333333     0.00000000     0.13333333    0.0000000        0.0\n## 51        0.2000000     0.00000000     0.73333333    5.8000000        0.0\n##    Gizzard Shad Sea Catfish Leatherjacket Shrimp Eel Gulf Kingfish\n## 15   0.06666667  0.06666667    0.13333333 0.06666667     0.1333333\n## 16   0.00000000  0.00000000    0.33333333 0.00000000     0.0000000\n## 28   0.00000000  0.00000000    0.13333333 0.00000000     0.0000000\n## 30   0.00000000  0.46666667    0.13333333 0.00000000     0.0000000\n## 32   0.00000000  1.86666667    0.06666667 0.00000000     0.0000000\n## 51   0.00000000  0.06666667    0.33333333 0.00000000     0.0000000\n##    Furrowed Mud Crab Lesser Rock Shrimp Bayou Killifish Rainwater Killifish\n## 15        0.06666667          0.1333333      0.06666667          0.00000000\n## 16        0.20000000          0.0000000      0.00000000          0.06666667\n## 28        0.00000000          0.0000000      0.00000000          0.13333333\n## 30        0.06666667          0.0000000      0.00000000          0.00000000\n## 32        0.00000000          0.0000000      0.00000000          2.20000000\n## 51        0.00000000          0.0000000      0.00000000          0.06666667\n##    Atlantic Stingray Inshore Lizardfish Silver Jenny Florida Stone Crab\n## 15        0.00000000         0.00000000   0.00000000          0.0000000\n## 16        0.06666667         0.06666667   0.93333333          0.0000000\n## 28        0.00000000         0.00000000   0.00000000          0.1333333\n## 30        0.00000000         0.00000000   0.20000000          0.0000000\n## 32        0.33333333         0.00000000   0.06666667          0.0000000\n## 51        0.00000000         0.00000000   0.00000000          0.0000000\n##    Black Drum Rough Silverside Atlantic Needlefish Gray Snapper American Eel\n## 15 0.00000000        0.0000000          0.00000000   0.00000000   0.00000000\n## 16 0.00000000        0.0000000          0.00000000   0.00000000   0.00000000\n## 28 0.06666667        0.5333333          0.06666667   0.00000000   0.00000000\n## 30 0.00000000        0.0000000          0.00000000   0.06666667   0.06666667\n## 32 0.06666667        0.0000000          0.06666667   0.00000000   0.06666667\n## 51 0.06666667        0.0000000          0.06666667   0.13333333   0.00000000\n##    Sheepshead Gafftopsail Catfish Skilletfish Spp. Least Puffer\n## 15 0.00000000          0.00000000       0.00000000    0.0000000\n## 16 0.00000000          0.00000000       0.00000000    0.0000000\n## 28 0.00000000          0.00000000       0.00000000    0.0000000\n## 30 0.06666667          0.06666667       0.06666667    0.0000000\n## 32 0.00000000          0.13333333       0.00000000    0.0000000\n## 51 0.00000000          0.00000000       0.00000000    0.1333333\n##    Spanish Mackerel Crevalle Jack Smooth Puffer\n## 15       0.00000000    0.00000000    0.00000000\n## 16       0.00000000    0.00000000    0.00000000\n## 28       0.00000000    0.00000000    0.00000000\n## 30       0.00000000    0.00000000    0.00000000\n## 32       0.00000000    0.00000000    0.00000000\n## 51       0.06666667    0.06666667    0.06666667\n\neuc_dist = vegdist(marsh_comm, method = \"euclidean\")\neuc_dist\n##          15       16       28       30       32\n## 16 453.5516                                    \n## 28 247.0644 422.0155                           \n## 30 390.7345 189.6752 459.2780                  \n## 32 135.7735 471.5434 184.9054 451.8317         \n## 51 298.8629 513.8484 179.1420 546.7370 174.9669\n\nbray_dist = vegdist(marsh_comm, method = \"bray\")\nbray_dist\n##           15        16        28        30        32\n## 16 0.5484487                                        \n## 28 0.4580275 0.5657694                              \n## 30 0.3273796 0.1813950 0.6016133                    \n## 32 0.2464400 0.5135411 0.4736101 0.3304584          \n## 51 0.6348868 0.5919694 0.5263653 0.6436799 0.4565301\n\n\n\nJaccard\nAnother common way to analyze community data is with presence absence data. This is best compared with Jaccard dissimilarity. Represents the proportion of unshared species. Frequently used to interpret turnover. Average Jaccard dissimilarity is a measure of beta diversity.\n\njac_dist = vegdist(marsh_comm, method = \"jaccard\")\njac_dist\n##           15        16        28        30        32\n## 16 0.7083847                                        \n## 28 0.6282838 0.7226727                              \n## 30 0.4932720 0.3070861 0.7512591                    \n## 32 0.3954301 0.6785955 0.6427889 0.4967587          \n## 51 0.7766737 0.7436944 0.6896977 0.7832181 0.6268735\n\nmean(jac_dist)\n## [1] 0.6296459\n\n\n\nPlot distance in ordination space\nOrdination - represent data along a reduced number of orthogonal axis. Or, show us patterns of relationship between samples in the high dimensional space in way smaller number of dimension (2 or 3, or more depending on complexity). Different techniques, which use will depend on the research question or objectives e.g., Principal component analysis, Correspondence Analysis, Pricinpal Coordinate Analysis, and MDS.\nnon-metric MDS, most commonly used for data exploration and illustrate patterns. Technique that maximize the rank correlation between dissimilarity matrix and n dimensions space through an iterative process.\n\nmarsh.nmds.bc = metaMDS(marsh_comm, distance = \"bray\", k = 2, try = 100)\n## Square root transformation\n## Wisconsin double standardization\n## Run 0 stress 0.01585851 \n## Run 1 stress 0.2028672 \n## Run 2 stress 0.07304488 \n## Run 3 stress 0.07304488 \n## Run 4 stress 0.1704538 \n## Run 5 stress 0.01585851 \n## ... New best solution\n## ... Procrustes: rmse 3.903545e-06  max resid 6.895181e-06 \n## ... Similar to previous best\n## Run 6 stress 0.01585852 \n## ... Procrustes: rmse 1.409714e-05  max resid 2.635088e-05 \n## ... Similar to previous best\n## Run 7 stress 0.07304488 \n## Run 8 stress 0.01585851 \n## ... New best solution\n## ... Procrustes: rmse 6.612714e-07  max resid 1.027452e-06 \n## ... Similar to previous best\n## Run 9 stress 0.07304488 \n## Run 10 stress 0.01585853 \n## ... Procrustes: rmse 5.230578e-05  max resid 9.654731e-05 \n## ... Similar to previous best\n## Run 11 stress 0.1015294 \n## Run 12 stress 0.01585851 \n## ... Procrustes: rmse 9.15072e-06  max resid 1.707275e-05 \n## ... Similar to previous best\n## Run 13 stress 0.01585852 \n## ... Procrustes: rmse 7.663911e-06  max resid 1.39117e-05 \n## ... Similar to previous best\n## Run 14 stress 0.07304488 \n## Run 15 stress 0.1015295 \n## Run 16 stress 0.1704538 \n## Run 17 stress 0.01585852 \n## ... Procrustes: rmse 1.190878e-05  max resid 2.334047e-05 \n## ... Similar to previous best\n## Run 18 stress 0.07304488 \n## Run 19 stress 0.01585851 \n## ... Procrustes: rmse 1.315509e-05  max resid 2.424681e-05 \n## ... Similar to previous best\n## Run 20 stress 0.1704538 \n## *** Best solution repeated 6 times\nmarsh.nmds.ec = metaMDS(marsh_comm, distance = \"euclidean\", k = 2, try = 100)\n## Square root transformation\n## Wisconsin double standardization\n## Run 0 stress 9.540596e-05 \n## Run 1 stress 0.2180643 \n## Run 2 stress 0.1620082 \n## Run 3 stress 9.162634e-05 \n## ... New best solution\n## ... Procrustes: rmse 0.1643686  max resid 0.2940625 \n## Run 4 stress 0.04464236 \n## Run 5 stress 8.985987e-05 \n## ... New best solution\n## ... Procrustes: rmse 0.1643662  max resid 0.2939761 \n## Run 6 stress 8.094077e-05 \n## ... New best solution\n## ... Procrustes: rmse 0.0003873662  max resid 0.0006348224 \n## ... Similar to previous best\n## Run 7 stress 9.094589e-05 \n## ... Procrustes: rmse 0.1643307  max resid 0.2940683 \n## Run 8 stress 0.04464213 \n## Run 9 stress 8.849902e-05 \n## ... Procrustes: rmse 1.946054e-05  max resid 2.580558e-05 \n## ... Similar to previous best\n## Run 10 stress 8.572791e-05 \n## ... Procrustes: rmse 0.164338  max resid 0.2940792 \n## Run 11 stress 8.739823e-05 \n## ... Procrustes: rmse 0.1642355  max resid 0.2939257 \n## Run 12 stress 8.615763e-05 \n## ... Procrustes: rmse 0.1644011  max resid 0.294284 \n## Run 13 stress 8.141975e-05 \n## ... Procrustes: rmse 3.270816e-05  max resid 4.801379e-05 \n## ... Similar to previous best\n## Run 14 stress 0.04464277 \n## Run 15 stress 9.871908e-05 \n## ... Procrustes: rmse 0.1642129  max resid 0.2938779 \n## Run 16 stress 9.402821e-05 \n## ... Procrustes: rmse 0.0003988158  max resid 0.0006542663 \n## ... Similar to previous best\n## Run 17 stress 0.04464305 \n## Run 18 stress 9.184133e-05 \n## ... Procrustes: rmse 0.0003928295  max resid 0.0006440916 \n## ... Similar to previous best\n## Run 19 stress 0.04464326 \n## Run 20 stress 9.871912e-05 \n## ... Procrustes: rmse 3.296845e-05  max resid 4.443342e-05 \n## ... Similar to previous best\n## *** Best solution repeated 6 times\n## Warning in metaMDS(marsh_comm, distance = \"euclidean\", k = 2, try = 100):\n## stress is (nearly) zero: you may have insufficient data\nmarsh.nmds.jc = metaMDS(marsh_comm, distance = \"jaccard\", k = 2, try = 100)\n## Square root transformation\n## Wisconsin double standardization\n## Run 0 stress 0.01585851 \n## Run 1 stress 0.2028672 \n## Run 2 stress 0.01585851 \n## ... Procrustes: rmse 7.052779e-07  max resid 1.38537e-06 \n## ... Similar to previous best\n## Run 3 stress 0.01585852 \n## ... Procrustes: rmse 1.871625e-05  max resid 3.244532e-05 \n## ... Similar to previous best\n## Run 4 stress 0.1620205 \n## Run 5 stress 0.01585852 \n## ... Procrustes: rmse 2.409283e-05  max resid 4.419377e-05 \n## ... Similar to previous best\n## Run 6 stress 0.07304488 \n## Run 7 stress 0.01585851 \n## ... Procrustes: rmse 5.968909e-06  max resid 1.164504e-05 \n## ... Similar to previous best\n## Run 8 stress 0.07304488 \n## Run 9 stress 0.2028672 \n## Run 10 stress 0.07304488 \n## Run 11 stress 0.2181459 \n## Run 12 stress 0.01585851 \n## ... Procrustes: rmse 4.681874e-06  max resid 9.056923e-06 \n## ... Similar to previous best\n## Run 13 stress 0.01585852 \n## ... Procrustes: rmse 1.493732e-05  max resid 2.483101e-05 \n## ... Similar to previous best\n## Run 14 stress 0.01585852 \n## ... Procrustes: rmse 2.778786e-05  max resid 5.242743e-05 \n## ... Similar to previous best\n## Run 15 stress 0.2181459 \n## Run 16 stress 0.01585853 \n## ... Procrustes: rmse 3.727039e-05  max resid 7.116065e-05 \n## ... Similar to previous best\n## Run 17 stress 0.2028672 \n## Run 18 stress 0.01585851 \n## ... Procrustes: rmse 2.316432e-06  max resid 3.584337e-06 \n## ... Similar to previous best\n## Run 19 stress 0.01585852 \n## ... Procrustes: rmse 2.870655e-05  max resid 5.464561e-05 \n## ... Similar to previous best\n## Run 20 stress 0.2028672 \n## *** Best solution repeated 10 times\n\nplot(marsh.nmds.bc, display = \"sites\", type = \"text\")\n\n\n\n\n\n\n\n\nThe output is a list, so need to extract data to plot in ggplot\n\nnmds_output = bind_rows(bc = data.frame(marsh.nmds.bc[[\"points\"]]),\n                        ec = data.frame(marsh.nmds.ec[[\"points\"]]),\n                        jc = data.frame(marsh.nmds.jc[[\"points\"]])) |&gt; \n  mutate(site = rep(unique(marsh_spp$site), times = 3),\n         Dissimilarity = rep(c(\"Bray\", \"Euclidean\", \"Jaccard\"),\n                             each = length(unique(site))))\n\nggplot(nmds_output, aes(MDS1, MDS2, color = as.factor(site)))+\n  geom_point(size = 4)+ \n  facet_wrap(~Dissimilarity)+\n  labs(color = 'site')+\n  scale_color_viridis_d(option = 'turbo')+\n  theme_bw()"
  },
  {
    "objectID": "ws8.html#diversity-partitioning-1",
    "href": "ws8.html#diversity-partitioning-1",
    "title": "Workshop 8: Community data: vegan and multivariate methods",
    "section": "Diversity partitioning",
    "text": "Diversity partitioning\nAnalysis of species replacement (turnover) and richness differences (or nestedness) based on Podani or Baselga Family Indices. From Chapter 8 - Numerical Ecology with R\n\nlibrary(adespatial)\n## Warning: package 'adespatial' was built under R version 4.4.2\n## Registered S3 methods overwritten by 'adegraphics':\n##   method         from\n##   biplot.dudi    ade4\n##   kplot.foucart  ade4\n##   kplot.mcoa     ade4\n##   kplot.mfa      ade4\n##   kplot.pta      ade4\n##   kplot.sepan    ade4\n##   kplot.statis   ade4\n##   scatter.coa    ade4\n##   scatter.dudi   ade4\n##   scatter.nipals ade4\n##   scatter.pco    ade4\n##   score.acm      ade4\n##   score.mix      ade4\n##   score.pca      ade4\n##   screeplot.dudi ade4\n## Registered S3 method overwritten by 'spdep':\n##   method   from\n##   plot.mst ape\n## Registered S3 methods overwritten by 'adespatial':\n##   method             from       \n##   plot.multispati    adegraphics\n##   print.multispati   ade4       \n##   summary.multispati ade4\n\nbeta.div.comp(marsh_comm, coef = \"BJ\")\n## $repl\n##           15        16        28        30        32\n## 16 0.2285714                                        \n## 28 0.2777778 0.4102564                              \n## 30 0.3076923 0.3243243 0.4878049                    \n## 32 0.3888889 0.3888889 0.3888889 0.3428571          \n## 51 0.4000000 0.4500000 0.4102564 0.4000000 0.3888889\n## \n## $rich\n##            15         16         28         30         32\n## 16 0.18447205                                            \n## 28 0.16903073 0.00000000                                 \n## 30 0.12980769 0.03465003 0.02382303                      \n## 32 0.16213152 0.03216374 0.03216374 0.06739927           \n## 51 0.12000000 0.01341463 0.01474359 0.01463415 0.04700855\n## \n## $D\n##           15        16        28        30        32\n## 16 0.4130435                                        \n## 28 0.4468085 0.4102564                              \n## 30 0.4375000 0.3589744 0.5116279                    \n## 32 0.5510204 0.4210526 0.4210526 0.4102564          \n## 51 0.5200000 0.4634146 0.4250000 0.4146341 0.4358974\n## \n## $part\n##      BDtotal         Repl          Nes Repl/BDtotal  Nes/BDtotal \n##   0.22135130   0.18650321   0.03484809   0.84256658   0.15743342 \n## \n## $Note\n## [1] \"Baselga family, Jaccard\"\n\nmarsh_spp.2 = marsh_l |&gt;\n  mutate(PA = if_else(Count &gt; 0, 1, 0)) |&gt; \n  group_by(site, Species) |&gt; \n  summarise(mean_count = mean(Count, na.rm = TRUE),\n            mean_PA = mean(PA, na.rm = TRUE)) \n## `summarise()` has grouped output by 'site'. You can override using the\n## `.groups` argument.\n\nLet’s explore how presence/absence and counts varies between species and pools\n\nPA_dist = ggplot(marsh_spp.2, aes(x = Species, y = site, fill = mean_PA))+\n  geom_raster()+\n  scale_fill_viridis_c(option = 'mako')+\n  labs(y = 'site')+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\nCo_dist = ggplot(marsh_spp.2, aes(x = Species, y = site, fill = mean_count))+\n  geom_raster()+\n  scale_fill_viridis_c(option = 'mako')+\n  labs(y = 'site')+ \n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\nggarrange(PA_dist, Co_dist,\n          nrow = 2, align = 'v')"
  },
  {
    "objectID": "ws8.html#exercises",
    "href": "ws8.html#exercises",
    "title": "Workshop 8: Community data: vegan and multivariate methods",
    "section": "Exercises",
    "text": "Exercises\nFor these exercises use the LDWF Pontchartrain seine sampling dataset. This dataset is the abundance for each species (in wide format) for 16 sites over 1 date.\n\nUsing the Pontchartrain dataset calculate the mean and SD for species richness, Shannon, Simpson, and inverse Simpson for each sampling site.\nPlot the dominance (Whittiker) and K-dominance curves for each site.\nPlot the \\(\\alpha\\), \\(\\beta\\), and \\(\\gamma\\) diversity for each site for each sampling date in 2007. Use either additive or multiplicative \\(\\beta\\) diversity. Plot diversity over time.\nPlot the Bray-Curtis and Jaccard dissimilarity for each site."
  }
]