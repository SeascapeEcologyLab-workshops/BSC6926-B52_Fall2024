[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "comp.html",
    "href": "comp.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing environment, but using R alone is no fun. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. In the sections below are the instructions for installing R and R Studio on your operating system.\n\nWindows\n\nIf you already have R and RStudio installed\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check which version of R you are using, start RStudio and the first thing that appears in the console indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. You can check here for more information on how to remove old versions from your system if you wish to do so.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from the CRAN website.\nRun the .exe file that was just downloaded\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Windows 10/11 (where x, y, and z represent version numbers)\nDouble click the file to install it\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nmacOS\n\nIf you already have R and RStudio installed\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check the version of R you are using, start RStudio and the first thing that appears on the terminal indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from the CRAN website.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.15+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nLinux\n\nFollow the instructions for your distribution from CRAN, they provide information to get the most recent version of R for common distributions. For most distributions, you could use your package manager (e.g., for Debian/Ubuntu run sudo apt-get install r-base, and for Fedora sudo yum install R), but we don’t recommend this approach as the versions provided by this are usually out of date. In any case, make sure you have at least R 3.3.1.\nGo to the RStudio download page\nUnder Installers select the version that matches your distribution, and install it with your preferred method (e.g., with Debian/Ubuntu sudo dpkg -i   rstudio-x.yy.zzz-amd64.deb at the terminal).\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BSC 6926 B52 Fall 2024",
    "section": "",
    "text": "BSC 6926 B52: R workshop on population and community ecological modeling\nThis is the course website for the R workshop that coincides with PCB 5423 (Advanced Ecology). This website will have the Quarto markdown lessons for each workshop. Find the course schedule and Syllabus here. This course will be based in R and information about downloading R and Rstudio can be found here.\n\n\nClass Resources\n\nZoom link\nGithub repository\nTextbook for R exercises (S) Stevens, M.H.H. 2010. A primer of ecology with R. ISBN 978-0-387-89881-0 (Electronically available at FIU Library) E-book version\n\n\n\nR Resources\n\nR for Data Science by Hadley Wickham and Garret Grolemund – An introduction to programming with R: https://r4ds.hadley.nz/\n\nQuick-R by datacamp: Quick overview on R programming and statistical approaches. There are more tutorials, but you will be required to register\n\nRStudio Cloud Training Exercises: https://rstudio.cloud/learn/primers\n\nVirtual Ecology Portal/EcoVirtual R Package: Website that provides various examples of population and community models that will be discussed in class and the workshop. There is also an R package (EcoVirtual) you can use to run various models included on this website: http://ecovirtual.ib.usp.br/doku.php?id=start\n\nModernDive: Introductory book on R and statistical inference: https://moderndive.com/index.html\nRstudio: learn R https://education.rstudio.com/learn/beginner/"
  },
  {
    "objectID": "sylb.html",
    "href": "sylb.html",
    "title": "Syllabus",
    "section": "",
    "text": "BSC 6926 B52: R workshop on population and community ecological modeling\nFall 2024\nTuesdays 1 - 2:30 pm\nFormat:\n    - In-person + Face-to-Face: Glenn Hubert Library 260\n    - Remote: Zoom link\n\nInstructors: Dr. Rolando O. Santos, Dr. W Ryan James, Dr. Nathan Dorn\n   Rolando Santos\n   rsantosc@fiu.edu (preferable; include BSC6926 in subject line)\n   O:305-919-4104\n   Office: MSB 353 (when in BBC), OE-148 (when in MMC)\n   W. Ryan James\n   wjames@fiu.edu (preferable; include BSC6926 in subject line)\n   Nathan Dorn\n   ndorn@fiu.edu (preferable include BSC6926 in subject line)\n   O: 305-919-4234\n   Office: MSB 351\n\n\nCourse description and learning outcome:\nThis workshop is connected to PCB5423 course, and it will be a co-requisite and will be offered to students enrolled in this course. The workshop is designed to provide an active learning experience by analyzing and illustrating several of the topics that will be discussed in PCB5423 by using ecological models and analytical tools. Specifically, R programming language will be used to learn and implement ecological models and analytical tools and discuss ecological fundamentals using quantitative examples. R is becoming one of the most used programming platforms to analyze and illustrate ecological patterns/data; thus, we hope to introduce novice and beginner coders to this fantastic programming language.\n\n\nWhen and where:\nIn-Person Sessions: Lectures and hands-on programming/modeling exercises will be an integral part of the workshop’s learning experience; thus, most sessions will be based on face-to-face meetings to facilitate learning and assistance during the workshop sessions. In-person sessions will be offered only at BBC.\nRemote Lectures: I will use Zoom to teach remotely if our face-to-face class cannot meet as regularly scheduled. I will contact you using CANVAS and email you the details of the Zoom link. Also, I will use Zoom for remote lectures when I expect to be out of town for fieldwork or meetings. I will announce any changes to the schedule one week or more in advance.\nOffice hours: Tuesdays and Thursdays, 3:00 – 4:00 pm, or by appointment. Please request a Zoom link by email or pass by my office for office hours meetings. I am constantly in/out of my office since my lab spaces are not in MSB; thus, please send me an email or talk to me after the workshop lectures to set up a meeting at my office.\n\n\nTeaching schedule:\nChanges to this schedule and other announcements regarding the course will be posted in CANVAS (sent FIU email addresses only).\n\n\n\nLearning materials:\nTextbook for R exercises (S) Stevens, M.H.H. 2010. A primer of ecology with R. ISBN 978-0-387-89881-0 (Electronically available at FIU Library)\n   E-book version: https://hankstevens.github.io/Primer-of-Ecology/\nOther learning materials: required R scripts/files and readings for the workshop exercises will be posted to CANVAS and the workshop website https://seascapeecologylab-workshops.github.io/BSC6926-B52_Fall2024/.\nPlease bring a laptop to class so you can follow the R scripts during class and perform workshop exercises. Please, contact us if you do not have access to a laptop\nR and R studio are free software environment for statistical computing and graphics required for the workshop. Please download it to your laptops:\n   Download R: https://cran.r-project.org/bin/windows/base/\n   Download Rstudio: https://www.rstudio.com/products/rstudio/download/\nMaterials and links on R programming and statistical analyses helpful in learning R and the workshop exercises/homework/project\n\nR for Data Science by Hadley Wickham and Garret Grolemund – An introduction to programming with R: https://r4ds.had.co.nz/\n\nQuick-R by datacamp: Quick overview on R programming and statistical approaches.There are more tutorials, but you will be required to register\n\nRStudio Cloud Training Exercises: https://rstudio.cloud/learn/primers\n\nVirtual Ecology Portal/EcoVirtual R Package: Website that provides various examples of population and community models that will be discussed in class and the workshop. There is also an R package (EcoVirtual) you can use to run various models included on this website: http://ecovirtual.ib.usp.br/doku.php?id=start\n\nModernDive: Introductory book on R and statistical inference: https://moderndive.com/index.html\n\n\n\nTeaching:\nLectures and R programming exercises will be part of each workshop session to introduce several topics on population and community modeling and analyses and provide context to the ecological fundamentals taught in PCB5423. The grade will be based on participation, homework exercises, and final project (see below).\n\n\nGrading:\nThe final grade will be composed of 2 assignments/tasks. These two assignments/tasks are: 1) Class participation (attendance and class exercises) and 2) R exercises homework.\nClass participation (Total 10 pts) will count for 25% of your final grade. This grade will consist of attending, participating, and submitting R exercises (0, 1). After each workshop, you will be asked to do and submit the results of a series of R exercises that you will try to answer to the best of your knowledge. Class discussion includes asking and answering questions, insightful comments and suggestions, and helping peers.\nR homework exercises (Total 75 pts – 25 pts/hw) will count for 75% of your grade. After several R “lab”/workshop sessions, students will turn in an assignment showing proof that they ran some of the code in R and understood the outputs of the models. The programming/coding aspect of the homework can be completed as a collective effort of student teams; however, students should independently answer and submit the homework questions. Please submit homework answers as PDFs or Word following a Markdown or Quarto format and the R files showing the code used to answer the questions.\n\n\nRubric: \nGrade scale is A: 100-90; B: 89-80; C: &lt;79. This is a graduate-level workshop; thus, if you are taking this course, it is because you have a genuine interest in ecological learning and developing your academic career. For this reason, I think final grades should be pass (A or B) or no pass (C). I will give students a C (or less) who didn’t commit to the work.\nStudents will be graded on their performance in the above areas ONLY. Future career plans will have ZERO influence on the grade you receive in this class. Incomplete grades will be considered only under extraordinary circumstances.\n\n\nMake-up policy: \nI will provide make-up opportunities only when students present valid excuses (e.g., medical/family emergencies, COVID-19-related emergencies and precautions, major fieldwork trips, or conferences). Regardless of the reason, please contact me to identify alternative methods for completing course requirements, depending on the type of assignment missed and the severity of missed assignments. Below is a guideline of potential make-up scenarios/methods (Subject to change): - Participation – Due to the limited number of sessions, I will award a participation point for only one missed session with a validated and accepted excuse. - Homework – Make-up alternatives only for medical (including COVID-19) emergencies. The make-up will consist of submitting the homework materials at a later date (e.g., 48-72 hours after the submission deadline), depending on the gravity of the emergency.\n\n\nFIU Discrimination, Harassment and Sexual Misconduct Policy Statement (Title IX):\nFlorida International University (the University) is committed to encouraging and sustaining a learning and living environment that is free from discrimination based on sex, including gender, gender expression, gender identity, and sexual orientation. Discrimination based on sex encompasses Sexual Misconduct, Sexual Harassment, Gender-Based Harassment, Domestic Violence, Dating Violence, and/or Stalking https://dei.fiu.edu/civil-rights-and-accessibility/index.html.\n\nFIU is committed to eliminating sexual harassment. In accordance with the FIU Faculty Senate guidelines, this syllabus includes a warning that any misconduct will be reported. FIU’s sexual harassment policy is available at: https://dei.fiu.edu/civil-rights-and-accessibility/sexual-misconduct/index.html\n\n\nProfessional and academic integrity:\nStudents are encouraged to employ critical thinking and rely on data and verifiable sources to interrogate all assigned readings and subject matter in this course as a way of determining whether they agree with their classmates and/or their instructor. No lesson is intended to espouse, promote, advance, inculcate, or compel a particular feeling, perception, viewpoint, or belief.\nFIU is a community dedicated to generating and imparting knowledge through excellent teaching and research, the rigorous and respectful exchange of ideas, and community service. All students should respect others’ right to have an equitable opportunity to learn and honestly demonstrate the quality of their learning. Therefore, all students are expected to adhere to a standard of academic conduct, which demonstrates respect for themselves, their fellow students, and the University’s educational mission. The University deems all students to understand that if they are found responsible for academic misconduct (e.g., cheating, plagiarism, academic dishonesty), they will be subject to the Academic Misconduct procedures and sanctions, as outlined in the Student Handbook.\n\n\nHonesty Code Statement:\nFIU defines academic misconduct in the Student Conduct and Honor Code (Code) as “any act or omission by a Student, which violates the concept of academic integrity and undermines the academic mission of the University in violation of the Code.” Code violations include, but are not limited to: academic dishonesty, bribery, cheating, commercial use, complicity, falsification, and plagiarism. The Code is available here: https://regulations.fiu.edu/regulation=FIU-2501"
  },
  {
    "objectID": "ws1.html",
    "href": "ws1.html",
    "title": "Workshop 1: Introduction to R",
    "section": "",
    "text": "R is a programming language that has become the standard in Ecology due to its flexibility and open source nature. R can be used from simple math to complex models and is very useful for generating figures. R, like all computer languages, uses a specific syntax to run commands that it is programmed to do. In other words, R will only do what it is commanded to do, and therefore, many common errors are due to errors in syntax (e.g. misspellings, missed commas, or unclosed brackets).\nThis example gives a basic intro into R syntax that can be useful for ecological research. This script gives examples of how to:\n\nBasic operations in R\nAssigning objects\nTypes of data structures in R\nFunctions in R\nUsing Packages in R\n\nHow to install and load packages\n\nWorking with dataframes and tibbles\nIndexing\nExercises\n\nR script: github\nR script of workshop 1"
  },
  {
    "objectID": "ws1.html#getting-to-know-the-basics",
    "href": "ws1.html#getting-to-know-the-basics",
    "title": "Workshop 1: Introduction to R",
    "section": "",
    "text": "R is a programming language that has become the standard in Ecology due to its flexibility and open source nature. R can be used from simple math to complex models and is very useful for generating figures. R, like all computer languages, uses a specific syntax to run commands that it is programmed to do. In other words, R will only do what it is commanded to do, and therefore, many common errors are due to errors in syntax (e.g. misspellings, missed commas, or unclosed brackets).\nThis example gives a basic intro into R syntax that can be useful for ecological research. This script gives examples of how to:\n\nBasic operations in R\nAssigning objects\nTypes of data structures in R\nFunctions in R\nUsing Packages in R\n\nHow to install and load packages\n\nWorking with dataframes and tibbles\nIndexing\nExercises\n\nR script: github\nR script of workshop 1"
  },
  {
    "objectID": "ws1.html#basic-operations-in-r",
    "href": "ws1.html#basic-operations-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Basic operations in R",
    "text": "Basic operations in R\nR is useful for basic operations and follows math rules (i.e. PEMDAS). R will all code on a line unless there is a # to the left.\n\n# addition \n1+1 \n## [1] 2\n\n1+1 # + 2 (won't run anything to right of #)\n## [1] 2\n\n# subtraction\n5-2 \n## [1] 3\n\n# multiplication\n4*5\n## [1] 20\n\n# division\n33/5\n## [1] 6.6\n\n# exponents can be done 2 ways\n2^2\n## [1] 4\n2**2\n## [1] 4\n\n# follows PEMDAS\n1+5*4\n## [1] 21\n# different answer than above\n(1+5)*4\n## [1] 24\n\nNote the [1] appears next to your result. R is just letting you know that this line begins with the first value in your result. Some commands return more than one value, and their results may fill up multiple lines. For example, the command 100:130 returns 31 values; it creates a sequence of integers from 100 to 130. Notice that new bracketed numbers appear at the start of the first and second lines of output. These numbers just mean that the second line begins with that value. You can mostly ignore the numbers that appear in brackets:\n\n100:130\n##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118\n## [20] 119 120 121 122 123 124 125 126 127 128 129 130"
  },
  {
    "objectID": "ws1.html#assigning-objects",
    "href": "ws1.html#assigning-objects",
    "title": "Workshop 1: Introduction to R",
    "section": "Assigning objects",
    "text": "Assigning objects\nWhen working in R it is useful to store data as an object. Assigning objects can be done in multiple ways, but the most common are &lt;- and =. These objects are stored in the R environment and can be called. Objects can be assigned multiple times, but only the last assignment is what is stored. Also it is important to know that R is case sensative and capital and lower case numbers are different.\n\n# assign an object\na = 4 \na\n## [1] 4\n\nb &lt;- 23\n\na+3 \n## [1] 7\n\nb/2\n## [1] 11.5\n\na*b\n## [1] 92\n\nc = 8\nc = 14\nc\n## [1] 14\n\nd = 15 \nD = 1 \nd\n## [1] 15\nD\n## [1] 1"
  },
  {
    "objectID": "ws1.html#types-of-data-structures-in-r",
    "href": "ws1.html#types-of-data-structures-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Types of data structures in R",
    "text": "Types of data structures in R\nR has 6 basic data types. (In addition to the five listed below, there is also raw which will not be discussed in this workshop.)\n\ninteger\nnumeric (real or decimal)\ncharacter\nlogical\ncomplex\n\nintegers are whole numbers\nnumeric are numbers with decimals. Integers and numeric are different because of how the underlying data is stored. Other programming languages can use something similar as decimal, float, or double data types, which all slightly differ in how data is stored but are numbers that include decimals.\ncharacters are strings of letters and numbers (e.g. \"abc\" and \"b1x\") and are designated in R by \" \". When using characters, \" \" are required because in R letters without quotations are objects and c = 'd' is different than c = d\nlogical is TRUE or FALSE. One thing to note is that T is the same as TRUE and F is the same as FALSE. Because T and F are special in R they cannot be used to name objects (but t and f are ok because R is case sensative). This is true for other cases as well like NA and NULL.\ncomplex numbers have both real and imaginary parts (1+4i)\nElements of these data types may be combined to form data structures, such as atomic vectors. When we call a vector atomic, we mean that the vector only holds data of a single data type. A vector is the most common and basic data structure in R and is pretty much the workhorse of R. Technically, vectors can be one of two types: + atomic vectors + lists although the term “vector” most commonly refers to the atomic types not to lists. Lists differ because they can take on different data structures and can be more complex.\nThere are different ways to make vectors\n\n\n# make a numeric vector\na = c(1.1,5,3,4)\na\n## [1] 1.1 5.0 3.0 4.0\n\n# make a integer vector\nb = 1:15\nb\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n# make a character vector \nc = c('a', 'b', 'c')\nc \n## [1] \"a\" \"b\" \"c\"\n\nBecause characters can be both letters and numbers, numbers in a vector with letters are stored as a character. These cannot be used for math operations, but integers and numeric data types can be used for math.\n\na = 4.4\na / 1 \n## [1] 4.4\n\n\nb = 6L # L can be used to keep a numeric as an integer, R typically defaults to numeric\nb*3\n## [1] 18\n\n# character\nc = '1'\nc*4\n## Error in c * 4: non-numeric argument to binary operator\n\nAnother common way to store data is in a dataframe or tibble (special type of dataframe from the tidyverse package we will see below). This is a collection of atomic vectors with the same length.\n\nb = data.frame(c1 = c(1,2,3), c2 = c('a','b','c'))\nb\n##   c1 c2\n## 1  1  a\n## 2  2  b\n## 3  3  c"
  },
  {
    "objectID": "ws1.html#functions-in-r",
    "href": "ws1.html#functions-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Functions in R",
    "text": "Functions in R\nR comes with functions that are used to do tasks. Functions take arguments to complete a task. Functions have the general format function(argument1 = , argument2,...) The types of data used and output of the function is specific to that function. Below are just a few useful examples.\n\n# summary statistics of sequence of numbers\na = c(1.1,5,3,4)\nmean(a) #mean\n## [1] 3.275\nmedian(a) #median\n## [1] 3.5\nsd(a) #standard deviation\n## [1] 1.664081\nquantile(a, 0.5) # quantile at 0.5 (median)\n## 50% \n## 3.5\n\n# make a sequence of numbers\nb = 1:15\nb\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nc = seq(1,15,1) #more flexibility than :\nc\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nseq(4,20,2)\n## [1]  4  6  8 10 12 14 16 18 20\n\n# information about objects\nd = c('a', 'b', 'c')\ntypeof(d) \n## [1] \"character\"\ntypeof(c)\n## [1] \"double\"\nlength(d)\n## [1] 3\n\n# dataframe/tibble specific functions\ne = data.frame(c1 = c(1,2,3), c2 = c('a','b','c'))\nnames(e) # column names\n## [1] \"c1\" \"c2\"\nnrow(e) # number of rows\n## [1] 3\nlength(e) # for dataframe number of columns\n## [1] 2\nstr(e)# structure of data\n## 'data.frame':    3 obs. of  2 variables:\n##  $ c1: num  1 2 3\n##  $ c2: chr  \"a\" \"b\" \"c\""
  },
  {
    "objectID": "ws1.html#using-packages-in-r",
    "href": "ws1.html#using-packages-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Using Packages in R",
    "text": "Using Packages in R\nR comes with a lot of base functions that are available for use when you open R, but this does not contain all of the functions useful to your tasks in R. Since R is open source, many R users have created Packages that contain functions that can be downloaded. Which includes the very common tidyverse.\n\nHow to install and load packages\nPackages can be downloaded from CRAN or from Github. To download directly from Github other packages are needed.\n\ninstall.packages('tidyverse') #from cran\n\nOnce downloaded, packages can be loaded into the R environment with library() function. Packages have to be loaded each R session. In addition functions can be called directly from a package with :: in the format of packageName::function().\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "ws1.html#tidyverse",
    "href": "ws1.html#tidyverse",
    "title": "Workshop 1: Introduction to R",
    "section": "tidyverse",
    "text": "tidyverse\ntidyverse is a collection of packages that use similar syntax and are used for data science in R. Coding in tidyverse is typically easy to read and understand, and has useful functions that have been adopted into newer versions of base R (e.g. piping). Tibbles are the tidyverse version of a dataframe.\n\nc = tibble(c1 = c(1,2,3), c2 = c('a','b','c'))\nc\n## # A tibble: 3 × 2\n##      c1 c2   \n##   &lt;dbl&gt; &lt;chr&gt;\n## 1     1 a    \n## 2     2 b    \n## 3     3 c"
  },
  {
    "objectID": "ws1.html#working-with-dataframes-and-tibbles",
    "href": "ws1.html#working-with-dataframes-and-tibbles",
    "title": "Workshop 1: Introduction to R",
    "section": "Working with dataframes and tibbles",
    "text": "Working with dataframes and tibbles\nUsing either dataframes or tibbles will likely be the most common data structure for ecological data. Making these data structures is easy with the data.frame() or tibble() functions. Tibbles have more flexibility than dataframes and are part of the tidyverse. Dataframes are base R. When reading in tabular data, read.csv() will create a dataframe, while read_csv() will generate a tibble. read_csv() can be paired with url() to use data directly from the internet from sites like github. Note that if from github the raw file (click on raw tab when looking at github file) is needed for this to work. Similar to reading in data, dataframes and tibbles can be saved as .csv with write.csv() or write_csv().\n\nlibrary(tidyverse)\n# create a dataframe\n\ndf = data.frame(name = c('GOOG', 'AMC', 'GME'),\n                Jan = c(1000, 2, 4),\n                Feb = c(1010, 15, 30),\n                March = c(1005, 25, 180))\n\ndf\n##   name  Jan  Feb March\n## 1 GOOG 1000 1010  1005\n## 2  AMC    2   15    25\n## 3  GME    4   30   180\n\n# create a tibble\ntib = tibble(name = c('GOOG', 'AMC', 'GME'),\n             Jan = c(1000, 2, 4),\n             Feb = c(1010, 15, 30),\n             March = c(1005, 25, 180))\n\ntib\n## # A tibble: 3 × 4\n##   name    Jan   Feb March\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 GOOG   1000  1010  1005\n## 2 AMC       2    15    25\n## 3 GME       4    30   180\n\n#read in data file on computer\n# change file path to path location on computer\nread.csv('data/LDWFBayAnchovy2007.csv')\n##        species           basin       date  num seines\n## 1  Bay Anchovy       Barataria 2007-01-01  271      5\n## 2  Bay Anchovy       Barataria 2007-02-01   10      7\n## 3  Bay Anchovy       Barataria 2007-03-01   37      8\n## 4  Bay Anchovy       Barataria 2007-04-01  354      9\n## 5  Bay Anchovy       Barataria 2007-05-01  879     10\n## 6  Bay Anchovy       Barataria 2007-06-01 1429     10\n## 7  Bay Anchovy       Barataria 2007-07-01  542     13\n## 8  Bay Anchovy       Barataria 2007-08-01  171      3\n## 9  Bay Anchovy       Barataria 2007-09-01  481     13\n## 10 Bay Anchovy       Barataria 2007-10-01 1317     19\n## 11 Bay Anchovy       Barataria 2007-11-01  636     13\n## 12 Bay Anchovy       Barataria 2007-12-01  176     10\n## 13 Bay Anchovy       Calcasieu 2007-01-01  403      2\n## 14 Bay Anchovy       Calcasieu 2007-02-01  293      2\n## 15 Bay Anchovy       Calcasieu 2007-03-01   17      2\n## 16 Bay Anchovy       Calcasieu 2007-04-01  107      4\n## 17 Bay Anchovy       Calcasieu 2007-05-01    5      2\n## 18 Bay Anchovy       Calcasieu 2007-06-01  114      5\n## 19 Bay Anchovy       Calcasieu 2007-07-01  875      6\n## 20 Bay Anchovy       Calcasieu 2007-08-01  240      5\n## 21 Bay Anchovy       Calcasieu 2007-09-01  665     11\n## 22 Bay Anchovy       Calcasieu 2007-10-01 1165     11\n## 23 Bay Anchovy       Calcasieu 2007-11-01  306     10\n## 24 Bay Anchovy       Calcasieu 2007-12-01  303      7\n## 25 Bay Anchovy   Pontchartrain 2007-01-01  200      9\n## 26 Bay Anchovy   Pontchartrain 2007-02-01  147      8\n## 27 Bay Anchovy   Pontchartrain 2007-03-01  556     10\n## 28 Bay Anchovy   Pontchartrain 2007-04-01 1065     14\n## 29 Bay Anchovy   Pontchartrain 2007-05-01  750     13\n## 30 Bay Anchovy   Pontchartrain 2007-06-01  183     13\n## 31 Bay Anchovy   Pontchartrain 2007-07-01  668     13\n## 32 Bay Anchovy   Pontchartrain 2007-08-01  703      9\n## 33 Bay Anchovy   Pontchartrain 2007-09-01  945     24\n## 34 Bay Anchovy   Pontchartrain 2007-10-01  931     20\n## 35 Bay Anchovy   Pontchartrain 2007-11-01  502     18\n## 36 Bay Anchovy   Pontchartrain 2007-12-01 1459     19\n## 37 Bay Anchovy      Terrebonne 2007-01-01  367     11\n## 38 Bay Anchovy      Terrebonne 2007-02-01  110      6\n## 39 Bay Anchovy      Terrebonne 2007-03-01 2701     13\n## 40 Bay Anchovy      Terrebonne 2007-04-01 5068     13\n## 41 Bay Anchovy      Terrebonne 2007-05-01 4313     12\n## 42 Bay Anchovy      Terrebonne 2007-06-01 2636     13\n## 43 Bay Anchovy      Terrebonne 2007-07-01 1751     13\n## 44 Bay Anchovy      Terrebonne 2007-08-01 1295     11\n## 45 Bay Anchovy      Terrebonne 2007-09-01 5691     25\n## 46 Bay Anchovy      Terrebonne 2007-10-01 2496     25\n## 47 Bay Anchovy      Terrebonne 2007-11-01 2213     24\n## 48 Bay Anchovy      Terrebonne 2007-12-01 1448     18\n## 49 Bay Anchovy Vermilion-Teche 2007-01-01  656      5\n## 50 Bay Anchovy Vermilion-Teche 2007-02-01  587      7\n## 51 Bay Anchovy Vermilion-Teche 2007-03-01  645      5\n## 52 Bay Anchovy Vermilion-Teche 2007-04-01 1710      7\n## 53 Bay Anchovy Vermilion-Teche 2007-05-01 1290      7\n## 54 Bay Anchovy Vermilion-Teche 2007-06-01 2655      7\n## 55 Bay Anchovy Vermilion-Teche 2007-07-01  755      7\n## 56 Bay Anchovy Vermilion-Teche 2007-08-01  943      6\n## 57 Bay Anchovy Vermilion-Teche 2007-09-01  940     14\n## 58 Bay Anchovy Vermilion-Teche 2007-10-01 2017     14\n## 59 Bay Anchovy Vermilion-Teche 2007-11-01 2286      8\n## 60 Bay Anchovy Vermilion-Teche 2007-12-01 4556     14\n\nread_csv('data/LDWFBayAnchovy2007.csv')\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 60 × 5\n##    species     basin     date         num seines\n##    &lt;chr&gt;       &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Bay Anchovy Barataria 2007-01-01   271      5\n##  2 Bay Anchovy Barataria 2007-02-01    10      7\n##  3 Bay Anchovy Barataria 2007-03-01    37      8\n##  4 Bay Anchovy Barataria 2007-04-01   354      9\n##  5 Bay Anchovy Barataria 2007-05-01   879     10\n##  6 Bay Anchovy Barataria 2007-06-01  1429     10\n##  7 Bay Anchovy Barataria 2007-07-01   542     13\n##  8 Bay Anchovy Barataria 2007-08-01   171      3\n##  9 Bay Anchovy Barataria 2007-09-01   481     13\n## 10 Bay Anchovy Barataria 2007-10-01  1317     19\n## # ℹ 50 more rows\n\n# read in data file from github\n# need to use raw file\nread_csv(url('https://raw.githubusercontent.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/main/data/LDWFBayAnchovy2007.csv'))\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 60 × 5\n##    species     basin     date         num seines\n##    &lt;chr&gt;       &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Bay Anchovy Barataria 2007-01-01   271      5\n##  2 Bay Anchovy Barataria 2007-02-01    10      7\n##  3 Bay Anchovy Barataria 2007-03-01    37      8\n##  4 Bay Anchovy Barataria 2007-04-01   354      9\n##  5 Bay Anchovy Barataria 2007-05-01   879     10\n##  6 Bay Anchovy Barataria 2007-06-01  1429     10\n##  7 Bay Anchovy Barataria 2007-07-01   542     13\n##  8 Bay Anchovy Barataria 2007-08-01   171      3\n##  9 Bay Anchovy Barataria 2007-09-01   481     13\n## 10 Bay Anchovy Barataria 2007-10-01  1317     19\n## # ℹ 50 more rows\n\n# save dataframe or tibble as new csv\nwrite.csv(df, 'data/df.csv')\n\nwrite_csv(df, 'data/df.csv')"
  },
  {
    "objectID": "ws1.html#indexing",
    "href": "ws1.html#indexing",
    "title": "Workshop 1: Introduction to R",
    "section": "Indexing",
    "text": "Indexing\nOnce data is stored in an object, being able to retrieve those values is useful. Referred to as indexing, the syntax is specific to how the data is stored. With indexing specific values within your object can be modified.\n\n# vector \nb = 1:15\n# 3rd object \nb[3]\n## [1] 3\n\n# make a character vector \nc = c('a', 'b', 'c')\nc\n## [1] \"a\" \"b\" \"c\"\n# 2nd object\nc[2]\n## [1] \"b\"\n# change \nc[2] = 'new'\nc\n## [1] \"a\"   \"new\" \"c\"\n\n# dataframe and tibbles\nmtcars\n##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n# first column\nmtcars[1]\n##                      mpg\n## Mazda RX4           21.0\n## Mazda RX4 Wag       21.0\n## Datsun 710          22.8\n## Hornet 4 Drive      21.4\n## Hornet Sportabout   18.7\n## Valiant             18.1\n## Duster 360          14.3\n## Merc 240D           24.4\n## Merc 230            22.8\n## Merc 280            19.2\n## Merc 280C           17.8\n## Merc 450SE          16.4\n## Merc 450SL          17.3\n## Merc 450SLC         15.2\n## Cadillac Fleetwood  10.4\n## Lincoln Continental 10.4\n## Chrysler Imperial   14.7\n## Fiat 128            32.4\n## Honda Civic         30.4\n## Toyota Corolla      33.9\n## Toyota Corona       21.5\n## Dodge Challenger    15.5\n## AMC Javelin         15.2\n## Camaro Z28          13.3\n## Pontiac Firebird    19.2\n## Fiat X1-9           27.3\n## Porsche 914-2       26.0\n## Lotus Europa        30.4\n## Ford Pantera L      15.8\n## Ferrari Dino        19.7\n## Maserati Bora       15.0\n## Volvo 142E          21.4\n# first row\nmtcars[1,]\n##           mpg cyl disp  hp drat   wt  qsec vs am gear carb\n## Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n# 2nd row of first column\nmtcars[2,1]\n## [1] 21\n# can call specific columns (called as a vector)\nmtcars$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\nmtcars$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n#same for tibble\nd = mtcars %&gt;% as_tibble\nd[1]\n## # A tibble: 32 × 1\n##      mpg\n##    &lt;dbl&gt;\n##  1  21  \n##  2  21  \n##  3  22.8\n##  4  21.4\n##  5  18.7\n##  6  18.1\n##  7  14.3\n##  8  24.4\n##  9  22.8\n## 10  19.2\n## # ℹ 22 more rows\nd$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\nd$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n# specific row in specific column\nmtcars$cyl[1]\n## [1] 6\nd$cyl[1]\n## [1] 6"
  },
  {
    "objectID": "ws1.html#exercises",
    "href": "ws1.html#exercises",
    "title": "Workshop 1: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nComplete following exercises and turn in r script on canvas\n\nMake two vectors, object a containing the values 2, 3, 4, and 5 and object bcontaining the values 50, 100, 38, and 42.\nMultiply object a by 3 and assign it to a new object, divide object b by 5 and assign it to a new object, then add the new two objects together.\nCreate a new data.frame/tibble with the four objects created above\nSave the data.frame/tibble created in exercise 3 as a .csv\nLoad in files a.csv and b.csv (found on github and canvas) and assign each as an object."
  },
  {
    "objectID": "ws2.html",
    "href": "ws2.html",
    "title": "Workshop 2: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with tidyverse, data wrangling, and ggplot:\n\nIndexing\ntidyverse\n\ntidy data\npiping Working with dataframes\n\nCombining dataframes and tibbles\nFigures with ggplot2\n\nCombining plots\n\nPractice Exercises\n\nR script: github\nR script of workshop 2\nResources to create R project"
  },
  {
    "objectID": "ws2.html#tidyverse-data-wrangling-and-ggplot",
    "href": "ws2.html#tidyverse-data-wrangling-and-ggplot",
    "title": "Workshop 2: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with tidyverse, data wrangling, and ggplot:\n\nIndexing\ntidyverse\n\ntidy data\npiping Working with dataframes\n\nCombining dataframes and tibbles\nFigures with ggplot2\n\nCombining plots\n\nPractice Exercises\n\nR script: github\nR script of workshop 2\nResources to create R project"
  },
  {
    "objectID": "ws2.html#indexing",
    "href": "ws2.html#indexing",
    "title": "Workshop 2: Introduction to R",
    "section": "Indexing",
    "text": "Indexing\nOnce data is stored in an object, being able to retrieve those values is useful. Referred to as indexing, the syntax is specific to how the data is stored. With indexing specific values within your object can be modified.\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#First lets bring a dataset from R and assign it to an object\nmtcars_df = mtcars \n\n#Convert to data.frame to tibble\nmtcars_df = as_tibble(mtcars_df)\n\n#Use \"$\" to call or index a specific column\nmpg = mtcars_df$mpg\ngear = mtcars_df$gear\n\n#Use brackets [] to call a specific value position within a vector or \n# or column within a dataframe\n\n#fifth object \nmpg[5]\n## [1] 18.7\nmpg #Let's check\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n\n# vector \nb = 1:15\n# 3rd object \nb[3]\n## [1] 3\n\n# make a character vector \nc = c('a', 'b', 'c')\nc\n## [1] \"a\" \"b\" \"c\"\n\n# 2nd object\nc[2]\n## [1] \"b\"\n\n# change \nc[2] = 'new'\nc\n## [1] \"a\"   \"new\" \"c\"\n\n#Indexing within a table: [rows, columns]\n\n# first row\nmtcars[1,]\n##           mpg cyl disp  hp drat   wt  qsec vs am gear carb\n## Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n\n# 2nd row of first column\nmtcars[2,1]\n## [1] 21\n## [1] 21\n# can call specific columns (called as a vector)\nmtcars$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n\n# specific row (value) in specific column\nmtcars$cyl[1]\n## [1] 6\n\n\nCreating and indexing lists\nList = a collection of objects (e.g., vectors, data.frames, matrices, lists) assigned to a object or list\n\nlist_example = list(a = seq(20,30, by = 5), b = c('a', 'b', 'c'), c = mtcars_df)\n\n#Calling a object within the list\nlist_example$a #Element name a\n## [1] 20 25 30\nlist_example[1] #Preserving - new list with only with first element\n## $a\n## [1] 20 25 30\nlist_example[[1]] #Simplifying - first element of list\n## [1] 20 25 30\n\nlist_example$c\n## # A tibble: 32 × 11\n##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n## # ℹ 22 more rows\nlist_example[3]\n## $c\n## # A tibble: 32 × 11\n##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n## # ℹ 22 more rows\n\n#Get the first value within the second object of the list\nlist_example[[2]][1]\n## [1] \"a\"\n\n#First value of first column on the tibble assigned as the third object in the list\nlist_example[[3]][[1]][1]\n## [1] 21\n\ncolnames(list_example[[3]][1])\n## [1] \"mpg\""
  },
  {
    "objectID": "ws2.html#tidyverse",
    "href": "ws2.html#tidyverse",
    "title": "Workshop 2: Introduction to R",
    "section": "tidyverse",
    "text": "tidyverse\ntidyverse is a collection of packages that use similar syntax and are used for data science in R. Coding in tidyverse is typically easy to read and understand, and has useful functions that have been adopted into newer versions of base R (e.g. piping). Tibbles are the tidyverse version of a dataframe.\n\nc = tibble(c1 = c(1,2,3), c2 = c('a','b','c'))\nc\n## # A tibble: 3 × 2\n##      c1 c2   \n##   &lt;dbl&gt; &lt;chr&gt;\n## 1     1 a    \n## 2     2 b    \n## 3     3 c\n\n\ntidy data\nData is collected and stored in many different ways, which can make it difficult to analyze. One of the goals of tidyverse is to easily turn messy data into tidy data which can easily be analyzed. In tidy data:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nTwo functions pivot_longer() and pivot_wider() are useful in manipulating data stored in rows and columns. ***Note that pivot_longer() and pivot_wider() have replaced gather() and spread() in newer versions of tidyverse\n\n#tidying data \nstock = tibble(name = c('GOOG', 'AMC', 'GME'),\n               Jan = c(1000, 2, 4),\n               Feb = c(1010, 15, 30),\n               March = c(1005, 25, 180))\n\ndf = pivot_longer(stock,\n               cols = Jan:March, \n               names_to = 'Month',\n               values_to = 'Price')\n\ndf\n## # A tibble: 9 × 3\n##   name  Month Price\n##   &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n## 1 GOOG  Jan    1000\n## 2 GOOG  Feb    1010\n## 3 GOOG  March  1005\n## 4 AMC   Jan       2\n## 5 AMC   Feb      15\n## 6 AMC   March    25\n## 7 GME   Jan       4\n## 8 GME   Feb      30\n## 9 GME   March   180\n\n# wide format\nfish = tibble(species = rep(c('Salmon', 'Cod'),times = 3),\n              year = rep(c(1999,2005,2020), each = 2),\n              catch = c(50, 60, 40, 50, 60, 100))\nfish \n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Cod      1999    60\n## 3 Salmon   2005    40\n## 4 Cod      2005    50\n## 5 Salmon   2020    60\n## 6 Cod      2020   100\n\n\npivot_wider(fish,\n            id_cols = species,\n            names_from = year,\n            values_from = catch)\n## # A tibble: 2 × 4\n##   species `1999` `2005` `2020`\n##   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n## 1 Salmon      50     40     60\n## 2 Cod         60     50    100\n\n\n\npiping\nTidyverse has an operator %&gt;% known as a pipe that is useful for when you want to do multiple actions to the same data. It takes the output of the left of the %&gt;% and makes it the first argument of what is on the right. Allowing to reduce code and make things tidier. In newer versions of R, there is a base pipe |&gt; that can be used as well. To use |&gt;you will need to turn it on in global options. Note you can use ctrl + shift + m as a shortcut for |&gt;\n\n# this code\ndf = as_tibble(mtcars)\ndf = filter(df, mpg &gt; 20)\ndf = mutate(df, color = 'red')\ndf = select(df, mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red\n\n# can become\n\ndf = mtcars %&gt;%\n  as_tibble()%&gt;%\n  filter(mpg &gt; 20)%&gt;%\n  mutate(color = 'red')%&gt;%\n  select(mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red\n\n# or with base r\ndf = mtcars |&gt;\n  as_tibble()|&gt;\n  filter(mpg &gt; 20)|&gt;\n  mutate(color = 'red')|&gt;\n  select(mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red"
  },
  {
    "objectID": "ws2.html#renaming-and-making-columns",
    "href": "ws2.html#renaming-and-making-columns",
    "title": "Workshop 2: Introduction to R",
    "section": "Renaming and making columns",
    "text": "Renaming and making columns\nThere are a few different ways to create a new column. The base R way is to use $ with the object name of the dataframe on the left and the new column name on the right. This can be used to do vector operations as well. The other way is to the mutate() function which is part of the dplyr package in tidyverse. This function alows for more flexibility and can be very useful. The easiest way to rename columns is with dplyr functions like rename() or within function like select().\n\ndf = tibble(name = c('GOOG', 'AMC', 'GME'),\n            Jan = c(1000, 2, 4),\n            Feb = c(1010, 15, 30),\n            March = c(1005, 25, 180))\n\ndf$new = 'new column'\n\ndf$tot = df$Jan + df$Feb + df$March\n\ndf \n## # A tibble: 3 × 6\n##   name    Jan   Feb March new          tot\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015\n## 2 AMC       2    15    25 new column    42\n## 3 GME       4    30   180 new column   214\n\n# using mutate\ndf = df |&gt; \n  mutate(newCol = 'blue')\n\n# multiple columns at a time\ndf = df |&gt;\n  mutate(sum = Jan + Feb + March, \n         big = sum &gt; 500)\ndf\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE \n## 2 AMC       2    15    25 new column    42 blue      42 FALSE\n## 3 GME       4    30   180 new column   214 blue     214 FALSE\n\n# rename columns\ndf |&gt;\n  rename(Name = name, January = Jan, February = Feb)\n## # A tibble: 3 × 9\n##   Name  January February March new          tot newCol   sum big  \n##   &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG     1000     1010  1005 new column  3015 blue    3015 TRUE \n## 2 AMC         2       15    25 new column    42 blue      42 FALSE\n## 3 GME         4       30   180 new column   214 blue     214 FALSE\n\n# rename, reorder, only include certain columns \ndf |&gt;\n  select(Name = name, January = Jan, sum, everything())\n## # A tibble: 3 × 9\n##   Name  January   sum   Feb March new          tot newCol big  \n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;lgl&gt;\n## 1 GOOG     1000  3015  1010  1005 new column  3015 blue   TRUE \n## 2 AMC         2    42    15    25 new column    42 blue   FALSE\n## 3 GME         4   214    30   180 new column   214 blue   FALSE\n\n# order data frame\ndf |&gt; \n  arrange(sum)\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 AMC       2    15    25 new column    42 blue      42 FALSE\n## 2 GME       4    30   180 new column   214 blue     214 FALSE\n## 3 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE\n\ndf |&gt; \n  arrange(desc(sum))\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE \n## 2 GME       4    30   180 new column   214 blue     214 FALSE\n## 3 AMC       2    15    25 new column    42 blue      42 FALSE"
  },
  {
    "objectID": "ws2.html#summarizing-data",
    "href": "ws2.html#summarizing-data",
    "title": "Workshop 2: Introduction to R",
    "section": "Summarizing data",
    "text": "Summarizing data\nThere are a few different useful ways to summarize the data in a dataframe or tibble. If you want to know everything about the dataframe, then the base function summary() is useful. If you would like to have more control to create summary tables, then dplyr::summarize() or dplyr::summarise() are great. This can be paired with group_by() to summarize over specific groups of data.\n\nsummary(iris)\n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \n\niris |&gt; \n  summarize(mean(Petal.Width),\n            sd(Petal.Width))\n##   mean(Petal.Width) sd(Petal.Width)\n## 1          1.199333       0.7622377\n\niris |&gt; \n  group_by(Species)|&gt;\n  summarize(mean(Petal.Width),\n            sd(Petal.Width))\n## # A tibble: 3 × 3\n##   Species    `mean(Petal.Width)` `sd(Petal.Width)`\n##   &lt;fct&gt;                    &lt;dbl&gt;             &lt;dbl&gt;\n## 1 setosa                   0.246             0.105\n## 2 versicolor               1.33              0.198\n## 3 virginica                2.03              0.275"
  },
  {
    "objectID": "ws2.html#combining-mulitple-dataframes",
    "href": "ws2.html#combining-mulitple-dataframes",
    "title": "Workshop 2: Introduction to R",
    "section": "Combining mulitple dataframes",
    "text": "Combining mulitple dataframes\nCombining data together is very common, and depending on the type of combination needed.\n\nBinding\nIf data has the same column names and needs to paste together, then rbind() and dplyr::bind_rows() are the tools need. For rbind(), the column names need to have the same name. bind_rows() does not have this problem.\n\n# bind data together \nsal = tibble(species = rep(c('Salmon'),times = 3),\n              year = c(1999,2005,2020),\n              catch = c(50, 60, 40))\n\ncod = tibble(species = rep('Cod', times = 3),\n             year = c(1999,2005,2020),\n             catch = c(50, 60, 100))\n\ncrab = tibble(species = rep('Crab', times = 3),\n              catch = c(50, 60, 100),\n              effort = c(20, 30, 50))\n\nrbind(sal,cod)\n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Salmon   2005    60\n## 3 Salmon   2020    40\n## 4 Cod      1999    50\n## 5 Cod      2005    60\n## 6 Cod      2020   100\n\n#Why error?\nrbind(sal, crab)\n## Error in match.names(clabs, names(xi)): names do not match previous names\n\n#Flexibility on the order\n\nbind_rows(sal, cod)\n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Salmon   2005    60\n## 3 Salmon   2020    40\n## 4 Cod      1999    50\n## 5 Cod      2005    60\n## 6 Cod      2020   100\n#vs\nbind_rows(sal, crab)\n## # A tibble: 6 × 4\n##   species  year catch effort\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n## 1 Salmon   1999    50     NA\n## 2 Salmon   2005    60     NA\n## 3 Salmon   2020    40     NA\n## 4 Crab       NA    50     20\n## 5 Crab       NA    60     30\n## 6 Crab       NA   100     50\n\n\n\nMerge/Join\nIf two data frames contain different columns of data, then they can be merged together with the family of join functions.\n+left_join() = uses left df as template and joins all matching columns from right df +right_join() = uses right df as template and joins all matching columns from left df +inner_join() = only matches columns contained in both dfs +full_join() = combines all rows in both dfs\n\nleft = tibble(name = c('a', 'b', 'c'),\n              n = c(1, 6, 7), \n              bio = c(100, 43, 57))\n\nright = tibble(name = c('a', 'b', 'd', 'e'),\n               cals = c(500, 450, 570, 600))\n\nleft_join(left, right, by = 'name')\n## # A tibble: 3 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 c         7    57    NA\n\nright_join(left, right, by = 'name')\n## # A tibble: 4 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 d        NA    NA   570\n## 4 e        NA    NA   600\n\ninner_join(left, right, by = 'name')\n## # A tibble: 2 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n\nfull_join(left, right, by = 'name')\n## # A tibble: 5 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 c         7    57    NA\n## 4 d        NA    NA   570\n## 5 e        NA    NA   600\n\n# multiple matches\nfish = tibble(species = rep(c('Salmon', 'Cod'),times = 3),\n              year = rep(c(1999,2005,2020), each = 2),\n              catch = c(50, 60, 40, 50, 60, 100))\n\ncol = tibble(species = c('Salmon', 'Cod'),\n             coast = c('West', 'East'))\n\nleft_join(fish, col, by = 'species')\n## # A tibble: 6 × 4\n##   species  year catch coast\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1 Salmon   1999    50 West \n## 2 Cod      1999    60 East \n## 3 Salmon   2005    40 West \n## 4 Cod      2005    50 East \n## 5 Salmon   2020    60 West \n## 6 Cod      2020   100 East"
  },
  {
    "objectID": "ws2.html#figures-with-ggplot2",
    "href": "ws2.html#figures-with-ggplot2",
    "title": "Workshop 2: Introduction to R",
    "section": "Figures with ggplot2",
    "text": "Figures with ggplot2\nThe ggplot2 package is part of the packages that load with tidyverse and has become the standard in ecology. The syntax builds upon on a base function and is very customizable see cheat sheet and R for data science\nThe base of all ggplot2 begins with ggplot() and geom_...() are built upon them\n\n# read in data\ndf = read_csv(url('https://raw.githubusercontent.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/main/data/LDWFBayAnchovy2007.csv'))\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# plot number of Bay anchovy caught per month\nggplot(df, aes(x = date, y = num))+\n  geom_point()\n\n\n\n\nShow color based on basin number and add line connecting dots\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()\n\n\n\n\nChange labels and style of plot\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  theme_classic()\n\n\n\n\nModify the size of axis label text and legend position\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance', color = 'Basin')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom')\n\n\n\n\nOnly plot specific range of the dates on x axis\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  scale_x_date(limits = c(lubridate::ymd('2007-04-01'), lubridate::ymd('2007-10-01')))+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n## Warning: Removed 25 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n## Warning: Removed 25 rows containing missing values or values outside the scale range\n## (`geom_line()`).\n\n\n\n\nSplit each trial into own grid\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  facet_wrap(~basin)+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\n\n\n\nModify the date labels on x axis (list of date abbreviations) and make 1 column of plots\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  facet_wrap(~basin, ncol = 1)+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\n\n\n\nModify the label and size of strip text\n\n# doesn't change the order\nlabels = c('Calcasieu' = 'CAL',\n          'Vermilion-Teche' = 'VER',\n          'Terrebonne' = 'TER',\n          'Barataria' = 'BAR',\n          'Pontchartrain' = 'PON')\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  facet_wrap(~basin, ncol = 1, labeller = as_labeller(labels))+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank(),\n        strip.text = element_text(size = 12))\n\n\n\n\nRemake figure with the mean Abundance and min and max values from each basin and the summarized line through the points\n\nggplot(df, aes(x = date, y = num))+\n  geom_pointrange(stat = \"summary\",\n                  fun.min = 'min',\n                  fun.max = 'max',\n                  fun = 'mean')+\n  stat_summary(aes(y = num), fun = mean, geom = 'line')+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12))\n\n\n\n\nMake box plot of number of seines per month within each basin\n\nggplot(df, aes(x = basin, y = seines))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  theme_bw()\n\n\n\n\nChange order of x axis (make basin order from west to east) and color of plot. Colors can be both hex code or from names that R has. A help website for picking colors is here.\n\n\ndf = df %&gt;% \n  mutate(basin = factor(basin, levels = c('Calcasieu',\n          'Vermilion-Teche',\n          'Terrebonne',\n          'Barataria',\n          'Pontchartrain' )))\n\ncolors = c('Calcasieu' = 'darkred',\n          'Vermilion-Teche' = 'cadetblue4',\n          'Terrebonne' = '#FFC125',\n          'Barataria' = '#5d478b',\n          'Pontchartrain' = 'grey55')\n\nggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()\n\n\n\n\nModify the labels and remove the legend\n\nggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()+\n  theme(axis.title = element_text(size = 18), \n        axis.text.y = element_text(size = 18, colour = \"black\"), \n        axis.text.x = element_text(size = 10, colour = \"black\"), \n        legend.position = 'none',\n        legend.title = element_blank())\n\n\n\n\n\nCombining plots\nSometimes we would like to combine different sub figures together to make a single figure. There are a few packages that can do this with ggpubr and patchwork some of the most common. I like ggpubr and use this one, but people seem to like patchwork.\n\nlibrary(ggpubr)\nlibrary(wesanderson)\n\na = ggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()+\n  theme(axis.title = element_text(size = 14), \n        axis.text.y = element_text(size = 14, colour = \"black\"), \n        axis.text.x = element_text(size = 10, colour = \"black\"), \n        legend.position = 'none',\n        legend.title = element_blank())\n\nb = ggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance', color = 'Basin')+\n  theme_bw()+\n  scale_color_manual(values = colors)+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom')\n\n# plot combined\nggarrange(a,b,\n          labels = c('a)','b)'),\n          ncol = 1)\n\n\n\n\n# arrange vertically and move position of labels\nggarrange(a,b,\n          labels = c('a)','b)'),\n          ncol = 1,\n          align = 'v',\n          hjust=-1.5)\n\n\n\n\n# common legend\na = ggplot(mtcars, aes(wt, fill = as.character(cyl), \n                       color = as.character(cyl)))+\n  geom_density(alpha = 0.4)+\n  labs(x = 'Weight of car (tonnes)', \n       fill = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'),\n                     guide = \"none\")+\n  scale_fill_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n\nb = ggplot(mtcars, aes(mpg, color = as.character(cyl),\n                       fill = as.character(cyl)))+\n  geom_density(alpha = 0.4)+\n  labs(x = 'Miles/gallon',\n       fill = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'),\n                     guide = \"none\")+\n  scale_fill_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n  \n\nc = ggplot(mtcars, aes(wt, mpg, group = cyl, color = as.character(cyl)))+\n  geom_point(size = 2)+\n  geom_smooth(method = 'lm',size = 1)+\n  labs(x = 'Weight of car (tonnes)', \n       y = 'Miles/gallon',\n       color = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\nggarrange(a,b,c, \n          labels = c('A','B','C'),\n          nrow = 2,ncol = 2,\n          common.legend = F)\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggarrange(a,b,c, \n          labels = c('A','B','C'),\n          nrow = 2, ncol = 2,\n          common.legend = T,\n          legend = 'top')\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggarrange(ggarrange(a,b, labels = c('A','B'), common.legend = T),c,\n          labels = c('','C'),\n          nrow = 2,\n          legend = 'none')\n## `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "ws2.html#exercises",
    "href": "ws2.html#exercises",
    "title": "Workshop 2: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nRead in the LDWFBayAnchovy2007.csv and create a column that calculates the catch per unit effort (CPUE) for Bay anchovy within the dataframe.\nCreate a dataframe or tibble that contains the basin names for the LDWFBayAnchovy2007.csv dataset (Barataria, Terrebonne, Ponchartrain, Vermilion-Teche, and Calcasieu) and the and abbreviation for each basin as a new column.\nMerge the dataframe/tibbles from exercises 1 and 2.\nPlot the CPUE for each basin both over time and as a summary of the entire year using a different color for each basin."
  }
]