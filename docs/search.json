[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "comp.html",
    "href": "comp.html",
    "title": "BSC6926fall2024",
    "section": "",
    "text": "R and RStudio\nR and RStudio are separate downloads and installations. R is the underlying statistical computing environment, but using R alone is no fun. RStudio is a graphical integrated development environment (IDE) that makes using R much easier and more interactive. You need to install R before you install RStudio. In the sections below are the instructions for installing R and R Studio on your operating system.\n\nWindows\n\nIf you already have R and RStudio installed\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check which version of R you are using, start RStudio and the first thing that appears in the console indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it. You can check here for more information on how to remove old versions from your system if you wish to do so.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from the CRAN website.\nRun the .exe file that was just downloaded\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Windows 10/11 (where x, y, and z represent version numbers)\nDouble click the file to install it\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nmacOS\n\nIf you already have R and RStudio installed\n\nOpen RStudio, and click on “Help” &gt; “Check for updates”. If a new version is available, quit RStudio, and download the latest version for RStudio.\nTo check the version of R you are using, start RStudio and the first thing that appears on the terminal indicates the version of R you are running. Alternatively, you can type sessionInfo(), which will also display which version of R you are running. Go on the CRAN website and check whether a more recent version is available. If so, please download and install it.\n\n\n\nIf you don’t have R and RStudio installed\n\nDownload R from the CRAN website.\nSelect the .pkg file for the latest R version\nDouble click on the downloaded file to install R\nIt is also a good idea to install XQuartz (needed by some packages)\nGo to the RStudio download page\nUnder Installers select RStudio x.yy.zzz - Mac OS X 10.15+ (64-bit) (where x, y, and z represent version numbers)\nDouble click the file to install RStudio\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages.\n\n\n\n\nLinux\n\nFollow the instructions for your distribution from CRAN, they provide information to get the most recent version of R for common distributions. For most distributions, you could use your package manager (e.g., for Debian/Ubuntu run sudo apt-get install r-base, and for Fedora sudo yum install R), but we don’t recommend this approach as the versions provided by this are usually out of date. In any case, make sure you have at least R 3.3.1.\nGo to the RStudio download page\nUnder Installers select the version that matches your distribution, and install it with your preferred method (e.g., with Debian/Ubuntu sudo dpkg -i   rstudio-x.yy.zzz-amd64.deb at the terminal).\nOnce it’s installed, open RStudio to make sure it works and you don’t get any error messages."
  },
  {
    "objectID": "hw1.html",
    "href": "hw1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf or html document containing answers and code.\nIn two weeks (09/30/24 by 11:59pm), please submit your pdf file to CANVAS using the following filename structure LastName_HW1_Filetype_Date (e.g., Santos_HW1_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "hw1.html#instructions",
    "href": "hw1.html#instructions",
    "title": "Homework 1",
    "section": "",
    "text": "Please, using quarto or rmarkdown, answer the questions below. You can use the class notes, the recommended books, and other web materials to help answer the questions. You can work on the homework in groups, but please independently submit pdf or html document containing answers and code.\nIn two weeks (09/30/24 by 11:59pm), please submit your pdf file to CANVAS using the following filename structure LastName_HW1_Filetype_Date (e.g., Santos_HW1_R_20230927). Again, you can share and work together on the code, but independently, submit your answers to the short answer questions in your own words and as markdown text under each question. Here are links to resources about quarto and rmarkdown.\nPlease reach out if you have any questions about the hw or how to make a pdf using quarto or rmarkdown."
  },
  {
    "objectID": "hw1.html#data-for-questions",
    "href": "hw1.html#data-for-questions",
    "title": "Homework 1",
    "section": "Data for questions",
    "text": "Data for questions\nFor this homework, you will be using a fisheries dataset from Everglades National Park in Florida Bay. The dataset ENP_catch.csv contains catch per unit effort (CPUE) data for three species (Red drum, Spotted seatrout, and Crevalle Jack) species in Everglades National Park between between 1980-2017. This data is on github and should be downloaded to complete the homework."
  },
  {
    "objectID": "hw1.html#questions",
    "href": "hw1.html#questions",
    "title": "Homework 1",
    "section": "Questions",
    "text": "Questions\n\n(2 pts) Load the ENP_catch.csv dataset as a dataframe or tibble. Short answer question 1: What are the dimension of the dataset?\n\n(2 pts) Convert the tibble/dataframe so that there is a column for species and one for CPUE.\n(2 pts) Calculate the mean and SD of CPUE for each year. Short answer question 3: What are the years with the highest and lowest CPUE? Is the species with the highest and lowest CPUE the same for each year?\n\n(4 pts) Add 2 new columns to the dataframe/tibble from question 2. One column should contain the proportion of the yearly total CPUE for each species. The other column should scale CPUE so that the yearly catch is relative to the maximum CPUE for that species.\n\n(5 pts) Plot the metrics (proportion of total catch, CPUE, and scaled CPUE) for each species as a multi-panel plot (one metric per panel). The plot should show the distribution of data (e.g. boxplot, point range) and not use the default color scheme.\n\n(2 pts) Classify the CPUE for each species as a below average (&lt; 40% quantile), average (between 40-60% quantile), or above average year.\n\n(5 pts) Create a conditional (i.e. TRUE/FALSE) vector to compare if CPUE is higher compared to the previous year before for each species.\nHint - this can be done with a for loop\n\n(3 pts) Plot the count of years where CPUE is higher than the previous year and the count of years where CPUE cover is lower than the previous year for each species."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BSC 6926 B52 Fall 2024",
    "section": "",
    "text": "BSC 6926 B52: R workshop on population and community ecological modeling\nThis is the course website for the R workshop that coincides with PCB 5423 (Advanced Ecology). This website will have the Quarto markdown lessons for each workshop. Find the course schedule and Syllabus here. This course will be based in R and information about downloading R and Rstudio can be found here.\n\n\nClass Resources\n\nZoom link\nGithub repository\nTextbook for R exercises (S) Stevens, M.H.H. 2010. A primer of ecology with R. ISBN 978-0-387-89881-0 (Electronically available at FIU Library) E-book version\n\n\n\nR Resources\n\nR for Data Science by Hadley Wickham and Garret Grolemund – An introduction to programming with R: https://r4ds.hadley.nz/\n\nQuick-R by datacamp: Quick overview on R programming and statistical approaches. There are more tutorials, but you will be required to register\n\nRStudio Cloud Training Exercises: https://rstudio.cloud/learn/primers\n\nVirtual Ecology Portal/EcoVirtual R Package: Website that provides various examples of population and community models that will be discussed in class and the workshop. There is also an R package (EcoVirtual) you can use to run various models included on this website: http://ecovirtual.ib.usp.br/doku.php?id=start\n\nModernDive: Introductory book on R and statistical inference: https://moderndive.com/index.html\nRstudio: learn R https://education.rstudio.com/learn/beginner/"
  },
  {
    "objectID": "sylb.html",
    "href": "sylb.html",
    "title": "Syllabus",
    "section": "",
    "text": "BSC 6926 B52: R workshop on population and community ecological modeling\nFall 2024\nTuesdays 1 - 2:30 pm\nFormat:\n    - In-person + Face-to-Face: Glenn Hubert Library 260\n    - Remote: Zoom link\n\nInstructors: Dr. Rolando O. Santos, Dr. W Ryan James, Dr. Nathan Dorn\n   Rolando Santos\n   rsantosc@fiu.edu (preferable; include BSC6926 in subject line)\n   O:305-919-4104\n   Office: MSB 353 (when in BBC), OE-148 (when in MMC)\n   W. Ryan James\n   wjames@fiu.edu (preferable; include BSC6926 in subject line)\n   Nathan Dorn\n   ndorn@fiu.edu (preferable include BSC6926 in subject line)\n   O: 305-919-4234\n   Office: MSB 351\n\n\nCourse description and learning outcome:\nThis workshop is connected to PCB5423 course, and it will be a co-requisite and will be offered to students enrolled in this course. The workshop is designed to provide an active learning experience by analyzing and illustrating several of the topics that will be discussed in PCB5423 by using ecological models and analytical tools. Specifically, R programming language will be used to learn and implement ecological models and analytical tools and discuss ecological fundamentals using quantitative examples. R is becoming one of the most used programming platforms to analyze and illustrate ecological patterns/data; thus, we hope to introduce novice and beginner coders to this fantastic programming language.\n\n\nWhen and where:\nIn-Person Sessions: Lectures and hands-on programming/modeling exercises will be an integral part of the workshop’s learning experience; thus, most sessions will be based on face-to-face meetings to facilitate learning and assistance during the workshop sessions. In-person sessions will be offered only at BBC.\nRemote Lectures: I will use Zoom to teach remotely if our face-to-face class cannot meet as regularly scheduled. I will contact you using CANVAS and email you the details of the Zoom link. Also, I will use Zoom for remote lectures when I expect to be out of town for fieldwork or meetings. I will announce any changes to the schedule one week or more in advance.\nOffice hours: Tuesdays and Thursdays, 3:00 – 4:00 pm, or by appointment. Please request a Zoom link by email or pass by my office for office hours meetings. I am constantly in/out of my office since my lab spaces are not in MSB; thus, please send me an email or talk to me after the workshop lectures to set up a meeting at my office.\n\n\nTeaching schedule:\nChanges to this schedule and other announcements regarding the course will be posted in CANVAS (sent FIU email addresses only).\n\n\n\nLearning materials:\nTextbook for R exercises (S) Stevens, M.H.H. 2010. A primer of ecology with R. ISBN 978-0-387-89881-0 (Electronically available at FIU Library)\n   E-book version: https://hankstevens.github.io/Primer-of-Ecology/\nOther learning materials: required R scripts/files and readings for the workshop exercises will be posted to CANVAS and the workshop website https://seascapeecologylab-workshops.github.io/BSC6926-B52_Fall2024/.\nPlease bring a laptop to class so you can follow the R scripts during class and perform workshop exercises. Please, contact us if you do not have access to a laptop\nR and R studio are free software environment for statistical computing and graphics required for the workshop. Please download it to your laptops:\n   Download R: https://cran.r-project.org/bin/windows/base/\n   Download Rstudio: https://www.rstudio.com/products/rstudio/download/\nMaterials and links on R programming and statistical analyses helpful in learning R and the workshop exercises/homework/project\n\nR for Data Science by Hadley Wickham and Garret Grolemund – An introduction to programming with R: https://r4ds.had.co.nz/\n\nQuick-R by datacamp: Quick overview on R programming and statistical approaches.There are more tutorials, but you will be required to register\n\nRStudio Cloud Training Exercises: https://rstudio.cloud/learn/primers\n\nVirtual Ecology Portal/EcoVirtual R Package: Website that provides various examples of population and community models that will be discussed in class and the workshop. There is also an R package (EcoVirtual) you can use to run various models included on this website: http://ecovirtual.ib.usp.br/doku.php?id=start\n\nModernDive: Introductory book on R and statistical inference: https://moderndive.com/index.html\n\n\n\nTeaching:\nLectures and R programming exercises will be part of each workshop session to introduce several topics on population and community modeling and analyses and provide context to the ecological fundamentals taught in PCB5423. The grade will be based on participation, homework exercises, and final project (see below).\n\n\nGrading:\nThe final grade will be composed of 2 assignments/tasks. These two assignments/tasks are: 1) Class participation (attendance and class exercises) and 2) R exercises homework.\nClass participation (Total 10 pts) will count for 25% of your final grade. This grade will consist of attending, participating, and submitting R exercises (0, 1). After each workshop, you will be asked to do and submit the results of a series of R exercises that you will try to answer to the best of your knowledge. Class discussion includes asking and answering questions, insightful comments and suggestions, and helping peers.\nR homework exercises (Total 75 pts – 25 pts/hw) will count for 75% of your grade. After several R “lab”/workshop sessions, students will turn in an assignment showing proof that they ran some of the code in R and understood the outputs of the models. The programming/coding aspect of the homework can be completed as a collective effort of student teams; however, students should independently answer and submit the homework questions. Please submit homework answers as PDFs or Word following a Markdown or Quarto format and the R files showing the code used to answer the questions.\n\n\nRubric: \nGrade scale is A: 100-90; B: 89-80; C: &lt;79. This is a graduate-level workshop; thus, if you are taking this course, it is because you have a genuine interest in ecological learning and developing your academic career. For this reason, I think final grades should be pass (A or B) or no pass (C). I will give students a C (or less) who didn’t commit to the work.\nStudents will be graded on their performance in the above areas ONLY. Future career plans will have ZERO influence on the grade you receive in this class. Incomplete grades will be considered only under extraordinary circumstances.\n\n\nMake-up policy: \nI will provide make-up opportunities only when students present valid excuses (e.g., medical/family emergencies, COVID-19-related emergencies and precautions, major fieldwork trips, or conferences). Regardless of the reason, please contact me to identify alternative methods for completing course requirements, depending on the type of assignment missed and the severity of missed assignments. Below is a guideline of potential make-up scenarios/methods (Subject to change): - Participation – Due to the limited number of sessions, I will award a participation point for only one missed session with a validated and accepted excuse. - Homework – Make-up alternatives only for medical (including COVID-19) emergencies. The make-up will consist of submitting the homework materials at a later date (e.g., 48-72 hours after the submission deadline), depending on the gravity of the emergency.\n\n\nFIU Discrimination, Harassment and Sexual Misconduct Policy Statement (Title IX):\nFlorida International University (the University) is committed to encouraging and sustaining a learning and living environment that is free from discrimination based on sex, including gender, gender expression, gender identity, and sexual orientation. Discrimination based on sex encompasses Sexual Misconduct, Sexual Harassment, Gender-Based Harassment, Domestic Violence, Dating Violence, and/or Stalking https://dei.fiu.edu/civil-rights-and-accessibility/index.html.\n\nFIU is committed to eliminating sexual harassment. In accordance with the FIU Faculty Senate guidelines, this syllabus includes a warning that any misconduct will be reported. FIU’s sexual harassment policy is available at: https://dei.fiu.edu/civil-rights-and-accessibility/sexual-misconduct/index.html\n\n\nProfessional and academic integrity:\nStudents are encouraged to employ critical thinking and rely on data and verifiable sources to interrogate all assigned readings and subject matter in this course as a way of determining whether they agree with their classmates and/or their instructor. No lesson is intended to espouse, promote, advance, inculcate, or compel a particular feeling, perception, viewpoint, or belief.\nFIU is a community dedicated to generating and imparting knowledge through excellent teaching and research, the rigorous and respectful exchange of ideas, and community service. All students should respect others’ right to have an equitable opportunity to learn and honestly demonstrate the quality of their learning. Therefore, all students are expected to adhere to a standard of academic conduct, which demonstrates respect for themselves, their fellow students, and the University’s educational mission. The University deems all students to understand that if they are found responsible for academic misconduct (e.g., cheating, plagiarism, academic dishonesty), they will be subject to the Academic Misconduct procedures and sanctions, as outlined in the Student Handbook.\n\n\nHonesty Code Statement:\nFIU defines academic misconduct in the Student Conduct and Honor Code (Code) as “any act or omission by a Student, which violates the concept of academic integrity and undermines the academic mission of the University in violation of the Code.” Code violations include, but are not limited to: academic dishonesty, bribery, cheating, commercial use, complicity, falsification, and plagiarism. The Code is available here: https://regulations.fiu.edu/regulation=FIU-2501"
  },
  {
    "objectID": "ws1.html",
    "href": "ws1.html",
    "title": "Workshop 1: Introduction to R",
    "section": "",
    "text": "R is a programming language that has become the standard in Ecology due to its flexibility and open source nature. R can be used from simple math to complex models and is very useful for generating figures. R, like all computer languages, uses a specific syntax to run commands that it is programmed to do. In other words, R will only do what it is commanded to do, and therefore, many common errors are due to errors in syntax (e.g. misspellings, missed commas, or unclosed brackets).\nThis example gives a basic intro into R syntax that can be useful for ecological research. This script gives examples of how to:\n\nBasic operations in R\nAssigning objects\nTypes of data structures in R\nFunctions in R\nUsing Packages in R\n\nHow to install and load packages\n\nWorking with dataframes and tibbles\nIndexing\nExercises\n\nR script: github\nR script of workshop 1"
  },
  {
    "objectID": "ws1.html#getting-to-know-the-basics",
    "href": "ws1.html#getting-to-know-the-basics",
    "title": "Workshop 1: Introduction to R",
    "section": "",
    "text": "R is a programming language that has become the standard in Ecology due to its flexibility and open source nature. R can be used from simple math to complex models and is very useful for generating figures. R, like all computer languages, uses a specific syntax to run commands that it is programmed to do. In other words, R will only do what it is commanded to do, and therefore, many common errors are due to errors in syntax (e.g. misspellings, missed commas, or unclosed brackets).\nThis example gives a basic intro into R syntax that can be useful for ecological research. This script gives examples of how to:\n\nBasic operations in R\nAssigning objects\nTypes of data structures in R\nFunctions in R\nUsing Packages in R\n\nHow to install and load packages\n\nWorking with dataframes and tibbles\nIndexing\nExercises\n\nR script: github\nR script of workshop 1"
  },
  {
    "objectID": "ws1.html#basic-operations-in-r",
    "href": "ws1.html#basic-operations-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Basic operations in R",
    "text": "Basic operations in R\nR is useful for basic operations and follows math rules (i.e. PEMDAS). R will all code on a line unless there is a # to the left.\n\n# addition \n1+1 \n## [1] 2\n\n1+1 # + 2 (won't run anything to right of #)\n## [1] 2\n\n# subtraction\n5-2 \n## [1] 3\n\n# multiplication\n4*5\n## [1] 20\n\n# division\n33/5\n## [1] 6.6\n\n# exponents can be done 2 ways\n2^2\n## [1] 4\n2**2\n## [1] 4\n\n# follows PEMDAS\n1+5*4\n## [1] 21\n# different answer than above\n(1+5)*4\n## [1] 24\n\nNote the [1] appears next to your result. R is just letting you know that this line begins with the first value in your result. Some commands return more than one value, and their results may fill up multiple lines. For example, the command 100:130 returns 31 values; it creates a sequence of integers from 100 to 130. Notice that new bracketed numbers appear at the start of the first and second lines of output. These numbers just mean that the second line begins with that value. You can mostly ignore the numbers that appear in brackets:\n\n100:130\n##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118\n## [20] 119 120 121 122 123 124 125 126 127 128 129 130"
  },
  {
    "objectID": "ws1.html#assigning-objects",
    "href": "ws1.html#assigning-objects",
    "title": "Workshop 1: Introduction to R",
    "section": "Assigning objects",
    "text": "Assigning objects\nWhen working in R it is useful to store data as an object. Assigning objects can be done in multiple ways, but the most common are &lt;- and =. These objects are stored in the R environment and can be called. Objects can be assigned multiple times, but only the last assignment is what is stored. Also it is important to know that R is case sensative and capital and lower case numbers are different.\n\n# assign an object\na = 4 \na\n## [1] 4\n\nb &lt;- 23\n\na+3 \n## [1] 7\n\nb/2\n## [1] 11.5\n\na*b\n## [1] 92\n\nc = 8\nc = 14\nc\n## [1] 14\n\nd = 15 \nD = 1 \nd\n## [1] 15\nD\n## [1] 1"
  },
  {
    "objectID": "ws1.html#types-of-data-structures-in-r",
    "href": "ws1.html#types-of-data-structures-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Types of data structures in R",
    "text": "Types of data structures in R\nR has 6 basic data types. (In addition to the five listed below, there is also raw which will not be discussed in this workshop.)\n\ninteger\nnumeric (real or decimal)\ncharacter\nlogical\ncomplex\n\nintegers are whole numbers\nnumeric are numbers with decimals. Integers and numeric are different because of how the underlying data is stored. Other programming languages can use something similar as decimal, float, or double data types, which all slightly differ in how data is stored but are numbers that include decimals.\ncharacters are strings of letters and numbers (e.g. \"abc\" and \"b1x\") and are designated in R by \" \". When using characters, \" \" are required because in R letters without quotations are objects and c = 'd' is different than c = d\nlogical is TRUE or FALSE. One thing to note is that T is the same as TRUE and F is the same as FALSE. Because T and F are special in R they cannot be used to name objects (but t and f are ok because R is case sensative). This is true for other cases as well like NA and NULL.\ncomplex numbers have both real and imaginary parts (1+4i)\nElements of these data types may be combined to form data structures, such as atomic vectors. When we call a vector atomic, we mean that the vector only holds data of a single data type. A vector is the most common and basic data structure in R and is pretty much the workhorse of R. Technically, vectors can be one of two types: + atomic vectors + lists although the term “vector” most commonly refers to the atomic types not to lists. Lists differ because they can take on different data structures and can be more complex.\nThere are different ways to make vectors\n\n\n# make a numeric vector\na = c(1.1,5,3,4)\na\n## [1] 1.1 5.0 3.0 4.0\n\n# make a integer vector\nb = 1:15\nb\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\n\n# make a character vector \nc = c('a', 'b', 'c')\nc \n## [1] \"a\" \"b\" \"c\"\n\nBecause characters can be both letters and numbers, numbers in a vector with letters are stored as a character. These cannot be used for math operations, but integers and numeric data types can be used for math.\n\na = 4.4\na / 1 \n## [1] 4.4\n\n\nb = 6L # L can be used to keep a numeric as an integer, R typically defaults to numeric\nb*3\n## [1] 18\n\n# character\nc = '1'\nc*4\n## Error in c * 4: non-numeric argument to binary operator\n\nAnother common way to store data is in a dataframe or tibble (special type of dataframe from the tidyverse package we will see below). This is a collection of atomic vectors with the same length.\n\nb = data.frame(c1 = c(1,2,3), c2 = c('a','b','c'))\nb\n##   c1 c2\n## 1  1  a\n## 2  2  b\n## 3  3  c"
  },
  {
    "objectID": "ws1.html#functions-in-r",
    "href": "ws1.html#functions-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Functions in R",
    "text": "Functions in R\nR comes with functions that are used to do tasks. Functions take arguments to complete a task. Functions have the general format function(argument1 = , argument2,...) The types of data used and output of the function is specific to that function. Below are just a few useful examples.\n\n# summary statistics of sequence of numbers\na = c(1.1,5,3,4)\nmean(a) #mean\n## [1] 3.275\nmedian(a) #median\n## [1] 3.5\nsd(a) #standard deviation\n## [1] 1.664081\nquantile(a, 0.5) # quantile at 0.5 (median)\n## 50% \n## 3.5\n\n# make a sequence of numbers\nb = 1:15\nb\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nc = seq(1,15,1) #more flexibility than :\nc\n##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15\nseq(4,20,2)\n## [1]  4  6  8 10 12 14 16 18 20\n\n# information about objects\nd = c('a', 'b', 'c')\ntypeof(d) \n## [1] \"character\"\ntypeof(c)\n## [1] \"double\"\nlength(d)\n## [1] 3\n\n# dataframe/tibble specific functions\ne = data.frame(c1 = c(1,2,3), c2 = c('a','b','c'))\nnames(e) # column names\n## [1] \"c1\" \"c2\"\nnrow(e) # number of rows\n## [1] 3\nlength(e) # for dataframe number of columns\n## [1] 2\nstr(e)# structure of data\n## 'data.frame':    3 obs. of  2 variables:\n##  $ c1: num  1 2 3\n##  $ c2: chr  \"a\" \"b\" \"c\""
  },
  {
    "objectID": "ws1.html#using-packages-in-r",
    "href": "ws1.html#using-packages-in-r",
    "title": "Workshop 1: Introduction to R",
    "section": "Using Packages in R",
    "text": "Using Packages in R\nR comes with a lot of base functions that are available for use when you open R, but this does not contain all of the functions useful to your tasks in R. Since R is open source, many R users have created Packages that contain functions that can be downloaded. Which includes the very common tidyverse.\n\nHow to install and load packages\nPackages can be downloaded from CRAN or from Github. To download directly from Github other packages are needed.\n\ninstall.packages('tidyverse') #from cran\n\nOnce downloaded, packages can be loaded into the R environment with library() function. Packages have to be loaded each R session. In addition functions can be called directly from a package with :: in the format of packageName::function().\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "ws1.html#tidyverse",
    "href": "ws1.html#tidyverse",
    "title": "Workshop 1: Introduction to R",
    "section": "tidyverse",
    "text": "tidyverse\ntidyverse is a collection of packages that use similar syntax and are used for data science in R. Coding in tidyverse is typically easy to read and understand, and has useful functions that have been adopted into newer versions of base R (e.g. piping). Tibbles are the tidyverse version of a dataframe.\n\nc = tibble(c1 = c(1,2,3), c2 = c('a','b','c'))\nc\n## # A tibble: 3 × 2\n##      c1 c2   \n##   &lt;dbl&gt; &lt;chr&gt;\n## 1     1 a    \n## 2     2 b    \n## 3     3 c"
  },
  {
    "objectID": "ws1.html#working-with-dataframes-and-tibbles",
    "href": "ws1.html#working-with-dataframes-and-tibbles",
    "title": "Workshop 1: Introduction to R",
    "section": "Working with dataframes and tibbles",
    "text": "Working with dataframes and tibbles\nUsing either dataframes or tibbles will likely be the most common data structure for ecological data. Making these data structures is easy with the data.frame() or tibble() functions. Tibbles have more flexibility than dataframes and are part of the tidyverse. Dataframes are base R. When reading in tabular data, read.csv() will create a dataframe, while read_csv() will generate a tibble. read_csv() can be paired with url() to use data directly from the internet from sites like github. Note that if from github the raw file (click on raw tab when looking at github file) is needed for this to work. Similar to reading in data, dataframes and tibbles can be saved as .csv with write.csv() or write_csv().\n\nlibrary(tidyverse)\n# create a dataframe\n\ndf = data.frame(name = c('GOOG', 'AMC', 'GME'),\n                Jan = c(1000, 2, 4),\n                Feb = c(1010, 15, 30),\n                March = c(1005, 25, 180))\n\ndf\n##   name  Jan  Feb March\n## 1 GOOG 1000 1010  1005\n## 2  AMC    2   15    25\n## 3  GME    4   30   180\n\n# create a tibble\ntib = tibble(name = c('GOOG', 'AMC', 'GME'),\n             Jan = c(1000, 2, 4),\n             Feb = c(1010, 15, 30),\n             March = c(1005, 25, 180))\n\ntib\n## # A tibble: 3 × 4\n##   name    Jan   Feb March\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 GOOG   1000  1010  1005\n## 2 AMC       2    15    25\n## 3 GME       4    30   180\n\n#read in data file on computer\n# change file path to path location on computer\nread.csv('data/LDWFBayAnchovy2007.csv')\n##        species           basin       date  num seines\n## 1  Bay Anchovy       Barataria 2007-01-01  271      5\n## 2  Bay Anchovy       Barataria 2007-02-01   10      7\n## 3  Bay Anchovy       Barataria 2007-03-01   37      8\n## 4  Bay Anchovy       Barataria 2007-04-01  354      9\n## 5  Bay Anchovy       Barataria 2007-05-01  879     10\n## 6  Bay Anchovy       Barataria 2007-06-01 1429     10\n## 7  Bay Anchovy       Barataria 2007-07-01  542     13\n## 8  Bay Anchovy       Barataria 2007-08-01  171      3\n## 9  Bay Anchovy       Barataria 2007-09-01  481     13\n## 10 Bay Anchovy       Barataria 2007-10-01 1317     19\n## 11 Bay Anchovy       Barataria 2007-11-01  636     13\n## 12 Bay Anchovy       Barataria 2007-12-01  176     10\n## 13 Bay Anchovy       Calcasieu 2007-01-01  403      2\n## 14 Bay Anchovy       Calcasieu 2007-02-01  293      2\n## 15 Bay Anchovy       Calcasieu 2007-03-01   17      2\n## 16 Bay Anchovy       Calcasieu 2007-04-01  107      4\n## 17 Bay Anchovy       Calcasieu 2007-05-01    5      2\n## 18 Bay Anchovy       Calcasieu 2007-06-01  114      5\n## 19 Bay Anchovy       Calcasieu 2007-07-01  875      6\n## 20 Bay Anchovy       Calcasieu 2007-08-01  240      5\n## 21 Bay Anchovy       Calcasieu 2007-09-01  665     11\n## 22 Bay Anchovy       Calcasieu 2007-10-01 1165     11\n## 23 Bay Anchovy       Calcasieu 2007-11-01  306     10\n## 24 Bay Anchovy       Calcasieu 2007-12-01  303      7\n## 25 Bay Anchovy   Pontchartrain 2007-01-01  200      9\n## 26 Bay Anchovy   Pontchartrain 2007-02-01  147      8\n## 27 Bay Anchovy   Pontchartrain 2007-03-01  556     10\n## 28 Bay Anchovy   Pontchartrain 2007-04-01 1065     14\n## 29 Bay Anchovy   Pontchartrain 2007-05-01  750     13\n## 30 Bay Anchovy   Pontchartrain 2007-06-01  183     13\n## 31 Bay Anchovy   Pontchartrain 2007-07-01  668     13\n## 32 Bay Anchovy   Pontchartrain 2007-08-01  703      9\n## 33 Bay Anchovy   Pontchartrain 2007-09-01  945     24\n## 34 Bay Anchovy   Pontchartrain 2007-10-01  931     20\n## 35 Bay Anchovy   Pontchartrain 2007-11-01  502     18\n## 36 Bay Anchovy   Pontchartrain 2007-12-01 1459     19\n## 37 Bay Anchovy      Terrebonne 2007-01-01  367     11\n## 38 Bay Anchovy      Terrebonne 2007-02-01  110      6\n## 39 Bay Anchovy      Terrebonne 2007-03-01 2701     13\n## 40 Bay Anchovy      Terrebonne 2007-04-01 5068     13\n## 41 Bay Anchovy      Terrebonne 2007-05-01 4313     12\n## 42 Bay Anchovy      Terrebonne 2007-06-01 2636     13\n## 43 Bay Anchovy      Terrebonne 2007-07-01 1751     13\n## 44 Bay Anchovy      Terrebonne 2007-08-01 1295     11\n## 45 Bay Anchovy      Terrebonne 2007-09-01 5691     25\n## 46 Bay Anchovy      Terrebonne 2007-10-01 2496     25\n## 47 Bay Anchovy      Terrebonne 2007-11-01 2213     24\n## 48 Bay Anchovy      Terrebonne 2007-12-01 1448     18\n## 49 Bay Anchovy Vermilion-Teche 2007-01-01  656      5\n## 50 Bay Anchovy Vermilion-Teche 2007-02-01  587      7\n## 51 Bay Anchovy Vermilion-Teche 2007-03-01  645      5\n## 52 Bay Anchovy Vermilion-Teche 2007-04-01 1710      7\n## 53 Bay Anchovy Vermilion-Teche 2007-05-01 1290      7\n## 54 Bay Anchovy Vermilion-Teche 2007-06-01 2655      7\n## 55 Bay Anchovy Vermilion-Teche 2007-07-01  755      7\n## 56 Bay Anchovy Vermilion-Teche 2007-08-01  943      6\n## 57 Bay Anchovy Vermilion-Teche 2007-09-01  940     14\n## 58 Bay Anchovy Vermilion-Teche 2007-10-01 2017     14\n## 59 Bay Anchovy Vermilion-Teche 2007-11-01 2286      8\n## 60 Bay Anchovy Vermilion-Teche 2007-12-01 4556     14\n\nread_csv('data/LDWFBayAnchovy2007.csv')\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 60 × 5\n##    species     basin     date         num seines\n##    &lt;chr&gt;       &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Bay Anchovy Barataria 2007-01-01   271      5\n##  2 Bay Anchovy Barataria 2007-02-01    10      7\n##  3 Bay Anchovy Barataria 2007-03-01    37      8\n##  4 Bay Anchovy Barataria 2007-04-01   354      9\n##  5 Bay Anchovy Barataria 2007-05-01   879     10\n##  6 Bay Anchovy Barataria 2007-06-01  1429     10\n##  7 Bay Anchovy Barataria 2007-07-01   542     13\n##  8 Bay Anchovy Barataria 2007-08-01   171      3\n##  9 Bay Anchovy Barataria 2007-09-01   481     13\n## 10 Bay Anchovy Barataria 2007-10-01  1317     19\n## # ℹ 50 more rows\n\n# read in data file from github\n# need to use raw file\nread_csv(url('https://raw.githubusercontent.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/main/data/LDWFBayAnchovy2007.csv'))\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 60 × 5\n##    species     basin     date         num seines\n##    &lt;chr&gt;       &lt;chr&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n##  1 Bay Anchovy Barataria 2007-01-01   271      5\n##  2 Bay Anchovy Barataria 2007-02-01    10      7\n##  3 Bay Anchovy Barataria 2007-03-01    37      8\n##  4 Bay Anchovy Barataria 2007-04-01   354      9\n##  5 Bay Anchovy Barataria 2007-05-01   879     10\n##  6 Bay Anchovy Barataria 2007-06-01  1429     10\n##  7 Bay Anchovy Barataria 2007-07-01   542     13\n##  8 Bay Anchovy Barataria 2007-08-01   171      3\n##  9 Bay Anchovy Barataria 2007-09-01   481     13\n## 10 Bay Anchovy Barataria 2007-10-01  1317     19\n## # ℹ 50 more rows\n\n# save dataframe or tibble as new csv\nwrite.csv(df, 'data/df.csv')\n\nwrite_csv(df, 'data/df.csv')"
  },
  {
    "objectID": "ws1.html#indexing",
    "href": "ws1.html#indexing",
    "title": "Workshop 1: Introduction to R",
    "section": "Indexing",
    "text": "Indexing\nOnce data is stored in an object, being able to retrieve those values is useful. Referred to as indexing, the syntax is specific to how the data is stored. With indexing specific values within your object can be modified.\n\n# vector \nb = 1:15\n# 3rd object \nb[3]\n## [1] 3\n\n# make a character vector \nc = c('a', 'b', 'c')\nc\n## [1] \"a\" \"b\" \"c\"\n# 2nd object\nc[2]\n## [1] \"b\"\n# change \nc[2] = 'new'\nc\n## [1] \"a\"   \"new\" \"c\"\n\n# dataframe and tibbles\nmtcars\n##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n# first column\nmtcars[1]\n##                      mpg\n## Mazda RX4           21.0\n## Mazda RX4 Wag       21.0\n## Datsun 710          22.8\n## Hornet 4 Drive      21.4\n## Hornet Sportabout   18.7\n## Valiant             18.1\n## Duster 360          14.3\n## Merc 240D           24.4\n## Merc 230            22.8\n## Merc 280            19.2\n## Merc 280C           17.8\n## Merc 450SE          16.4\n## Merc 450SL          17.3\n## Merc 450SLC         15.2\n## Cadillac Fleetwood  10.4\n## Lincoln Continental 10.4\n## Chrysler Imperial   14.7\n## Fiat 128            32.4\n## Honda Civic         30.4\n## Toyota Corolla      33.9\n## Toyota Corona       21.5\n## Dodge Challenger    15.5\n## AMC Javelin         15.2\n## Camaro Z28          13.3\n## Pontiac Firebird    19.2\n## Fiat X1-9           27.3\n## Porsche 914-2       26.0\n## Lotus Europa        30.4\n## Ford Pantera L      15.8\n## Ferrari Dino        19.7\n## Maserati Bora       15.0\n## Volvo 142E          21.4\n# first row\nmtcars[1,]\n##           mpg cyl disp  hp drat   wt  qsec vs am gear carb\n## Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n# 2nd row of first column\nmtcars[2,1]\n## [1] 21\n# can call specific columns (called as a vector)\nmtcars$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\nmtcars$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n#same for tibble\nd = mtcars %&gt;% as_tibble\nd[1]\n## # A tibble: 32 × 1\n##      mpg\n##    &lt;dbl&gt;\n##  1  21  \n##  2  21  \n##  3  22.8\n##  4  21.4\n##  5  18.7\n##  6  18.1\n##  7  14.3\n##  8  24.4\n##  9  22.8\n## 10  19.2\n## # ℹ 22 more rows\nd$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\nd$cyl\n##  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n# specific row in specific column\nmtcars$cyl[1]\n## [1] 6\nd$cyl[1]\n## [1] 6"
  },
  {
    "objectID": "ws1.html#exercises",
    "href": "ws1.html#exercises",
    "title": "Workshop 1: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nComplete following exercises and turn in r script on canvas\n\nMake two vectors, object a containing the values 2, 3, 4, and 5 and object bcontaining the values 50, 100, 38, and 42.\nMultiply object a by 3 and assign it to a new object, divide object b by 5 and assign it to a new object, then add the new two objects together.\nCreate a new data.frame/tibble with the four objects created above\nSave the data.frame/tibble created in exercise 3 as a .csv\nLoad in files a.csv and b.csv (found on github and canvas) and assign each as an object."
  },
  {
    "objectID": "ws2.html",
    "href": "ws2.html",
    "title": "Workshop 2: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with tidyverse, data wrangling, and ggplot:\n\nIndexing\ntidyverse\n\ntidy data\npiping Working with dataframes\n\nCombining dataframes and tibbles\nFigures with ggplot2\n\nCombining plots\n\nPractice Exercises\n\nR script: github\nR script of workshop 2\nResources to create R project"
  },
  {
    "objectID": "ws2.html#tidyverse-data-wrangling-and-ggplot",
    "href": "ws2.html#tidyverse-data-wrangling-and-ggplot",
    "title": "Workshop 2: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with tidyverse, data wrangling, and ggplot:\n\nIndexing\ntidyverse\n\ntidy data\npiping Working with dataframes\n\nCombining dataframes and tibbles\nFigures with ggplot2\n\nCombining plots\n\nPractice Exercises\n\nR script: github\nR script of workshop 2\nResources to create R project"
  },
  {
    "objectID": "ws2.html#indexing",
    "href": "ws2.html#indexing",
    "title": "Workshop 2: Introduction to R",
    "section": "Indexing",
    "text": "Indexing\nOnce data is stored in an object, being able to retrieve those values is useful. Referred to as indexing, the syntax is specific to how the data is stored. With indexing specific values within your object can be modified.\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n#First lets bring a dataset from R and assign it to an object\nmtcars_df = mtcars \n\n#Convert to data.frame to tibble\nmtcars_df = as_tibble(mtcars_df)\n\n#Use \"$\" to call or index a specific column\nmpg = mtcars_df$mpg\ngear = mtcars_df$gear\n\n#Use brackets [] to call a specific value position within a vector or \n# or column within a dataframe\n\n#fifth object \nmpg[5]\n## [1] 18.7\nmpg #Let's check\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n\n# vector \nb = 1:15\n# 3rd object \nb[3]\n## [1] 3\n\n# make a character vector \nc = c('a', 'b', 'c')\nc\n## [1] \"a\" \"b\" \"c\"\n\n# 2nd object\nc[2]\n## [1] \"b\"\n\n# change \nc[2] = 'new'\nc\n## [1] \"a\"   \"new\" \"c\"\n\n#Indexing within a table: [rows, columns]\n\n# first row\nmtcars[1,]\n##           mpg cyl disp  hp drat   wt  qsec vs am gear carb\n## Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4\n\n# 2nd row of first column\nmtcars[2,1]\n## [1] 21\n## [1] 21\n# can call specific columns (called as a vector)\nmtcars$mpg\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n\n# specific row (value) in specific column\nmtcars$cyl[1]\n## [1] 6\n\n\nCreating and indexing lists\nList = a collection of objects (e.g., vectors, data.frames, matrices, lists) assigned to a object or list\n\nlist_example = list(a = seq(20,30, by = 5), b = c('a', 'b', 'c'), c = mtcars_df)\n\n#Calling a object within the list\nlist_example$a #Element name a\n## [1] 20 25 30\nlist_example[1] #Preserving - new list with only with first element\n## $a\n## [1] 20 25 30\nlist_example[[1]] #Simplifying - first element of list\n## [1] 20 25 30\n\nlist_example$c\n## # A tibble: 32 × 11\n##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n## # ℹ 22 more rows\nlist_example[3]\n## $c\n## # A tibble: 32 × 11\n##      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n##  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n##  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n##  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n##  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n##  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n##  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n##  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n##  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n## 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n## # ℹ 22 more rows\n\n#Get the first value within the second object of the list\nlist_example[[2]][1]\n## [1] \"a\"\n\n#First value of first column on the tibble assigned as the third object in the list\nlist_example[[3]][[1]][1]\n## [1] 21\n\ncolnames(list_example[[3]][1])\n## [1] \"mpg\""
  },
  {
    "objectID": "ws2.html#tidyverse",
    "href": "ws2.html#tidyverse",
    "title": "Workshop 2: Introduction to R",
    "section": "tidyverse",
    "text": "tidyverse\ntidyverse is a collection of packages that use similar syntax and are used for data science in R. Coding in tidyverse is typically easy to read and understand, and has useful functions that have been adopted into newer versions of base R (e.g. piping). Tibbles are the tidyverse version of a dataframe.\n\nc = tibble(c1 = c(1,2,3), c2 = c('a','b','c'))\nc\n## # A tibble: 3 × 2\n##      c1 c2   \n##   &lt;dbl&gt; &lt;chr&gt;\n## 1     1 a    \n## 2     2 b    \n## 3     3 c\n\n\ntidy data\nData is collected and stored in many different ways, which can make it difficult to analyze. One of the goals of tidyverse is to easily turn messy data into tidy data which can easily be analyzed. In tidy data:\n\nEvery column is a variable.\nEvery row is an observation.\nEvery cell is a single value.\n\nTwo functions pivot_longer() and pivot_wider() are useful in manipulating data stored in rows and columns. ***Note that pivot_longer() and pivot_wider() have replaced gather() and spread() in newer versions of tidyverse\n\n#tidying data \nstock = tibble(name = c('GOOG', 'AMC', 'GME'),\n               Jan = c(1000, 2, 4),\n               Feb = c(1010, 15, 30),\n               March = c(1005, 25, 180))\n\ndf = pivot_longer(stock,\n               cols = Jan:March, \n               names_to = 'Month',\n               values_to = 'Price')\n\ndf\n## # A tibble: 9 × 3\n##   name  Month Price\n##   &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n## 1 GOOG  Jan    1000\n## 2 GOOG  Feb    1010\n## 3 GOOG  March  1005\n## 4 AMC   Jan       2\n## 5 AMC   Feb      15\n## 6 AMC   March    25\n## 7 GME   Jan       4\n## 8 GME   Feb      30\n## 9 GME   March   180\n\n# wide format\nfish = tibble(species = rep(c('Salmon', 'Cod'),times = 3),\n              year = rep(c(1999,2005,2020), each = 2),\n              catch = c(50, 60, 40, 50, 60, 100))\nfish \n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Cod      1999    60\n## 3 Salmon   2005    40\n## 4 Cod      2005    50\n## 5 Salmon   2020    60\n## 6 Cod      2020   100\n\n\npivot_wider(fish,\n            id_cols = species,\n            names_from = year,\n            values_from = catch)\n## # A tibble: 2 × 4\n##   species `1999` `2005` `2020`\n##   &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n## 1 Salmon      50     40     60\n## 2 Cod         60     50    100\n\n\n\npiping\nTidyverse has an operator %&gt;% known as a pipe that is useful for when you want to do multiple actions to the same data. It takes the output of the left of the %&gt;% and makes it the first argument of what is on the right. Allowing to reduce code and make things tidier. In newer versions of R, there is a base pipe |&gt; that can be used as well. To use |&gt;you will need to turn it on in global options. Note you can use ctrl + shift + m as a shortcut for |&gt;\n\n# this code\ndf = as_tibble(mtcars)\ndf = filter(df, mpg &gt; 20)\ndf = mutate(df, color = 'red')\ndf = select(df, mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red\n\n# can become\n\ndf = mtcars %&gt;%\n  as_tibble()%&gt;%\n  filter(mpg &gt; 20)%&gt;%\n  mutate(color = 'red')%&gt;%\n  select(mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red\n\n# or with base r\ndf = mtcars |&gt;\n  as_tibble()|&gt;\n  filter(mpg &gt; 20)|&gt;\n  mutate(color = 'red')|&gt;\n  select(mpg, cyl, color)\n\nhead(df)\n## # A tibble: 6 × 3\n##     mpg   cyl color\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1  21       6 red  \n## 2  21       6 red  \n## 3  22.8     4 red  \n## 4  21.4     6 red  \n## 5  24.4     4 red  \n## 6  22.8     4 red"
  },
  {
    "objectID": "ws2.html#renaming-and-making-columns",
    "href": "ws2.html#renaming-and-making-columns",
    "title": "Workshop 2: Introduction to R",
    "section": "Renaming and making columns",
    "text": "Renaming and making columns\nThere are a few different ways to create a new column. The base R way is to use $ with the object name of the dataframe on the left and the new column name on the right. This can be used to do vector operations as well. The other way is to the mutate() function which is part of the dplyr package in tidyverse. This function alows for more flexibility and can be very useful. The easiest way to rename columns is with dplyr functions like rename() or within function like select().\n\ndf = tibble(name = c('GOOG', 'AMC', 'GME'),\n            Jan = c(1000, 2, 4),\n            Feb = c(1010, 15, 30),\n            March = c(1005, 25, 180))\n\ndf$new = 'new column'\n\ndf$tot = df$Jan + df$Feb + df$March\n\ndf \n## # A tibble: 3 × 6\n##   name    Jan   Feb March new          tot\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015\n## 2 AMC       2    15    25 new column    42\n## 3 GME       4    30   180 new column   214\n\n# using mutate\ndf = df |&gt; \n  mutate(newCol = 'blue')\n\n# multiple columns at a time\ndf = df |&gt;\n  mutate(sum = Jan + Feb + March, \n         big = sum &gt; 500)\ndf\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE \n## 2 AMC       2    15    25 new column    42 blue      42 FALSE\n## 3 GME       4    30   180 new column   214 blue     214 FALSE\n\n# rename columns\ndf |&gt;\n  rename(Name = name, January = Jan, February = Feb)\n## # A tibble: 3 × 9\n##   Name  January February March new          tot newCol   sum big  \n##   &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG     1000     1010  1005 new column  3015 blue    3015 TRUE \n## 2 AMC         2       15    25 new column    42 blue      42 FALSE\n## 3 GME         4       30   180 new column   214 blue     214 FALSE\n\n# rename, reorder, only include certain columns \ndf |&gt;\n  select(Name = name, January = Jan, sum, everything())\n## # A tibble: 3 × 9\n##   Name  January   sum   Feb March new          tot newCol big  \n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;lgl&gt;\n## 1 GOOG     1000  3015  1010  1005 new column  3015 blue   TRUE \n## 2 AMC         2    42    15    25 new column    42 blue   FALSE\n## 3 GME         4   214    30   180 new column   214 blue   FALSE\n\n# order data frame\ndf |&gt; \n  arrange(sum)\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 AMC       2    15    25 new column    42 blue      42 FALSE\n## 2 GME       4    30   180 new column   214 blue     214 FALSE\n## 3 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE\n\ndf |&gt; \n  arrange(desc(sum))\n## # A tibble: 3 × 9\n##   name    Jan   Feb March new          tot newCol   sum big  \n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;lgl&gt;\n## 1 GOOG   1000  1010  1005 new column  3015 blue    3015 TRUE \n## 2 GME       4    30   180 new column   214 blue     214 FALSE\n## 3 AMC       2    15    25 new column    42 blue      42 FALSE"
  },
  {
    "objectID": "ws2.html#summarizing-data",
    "href": "ws2.html#summarizing-data",
    "title": "Workshop 2: Introduction to R",
    "section": "Summarizing data",
    "text": "Summarizing data\nThere are a few different useful ways to summarize the data in a dataframe or tibble. If you want to know everything about the dataframe, then the base function summary() is useful. If you would like to have more control to create summary tables, then dplyr::summarize() or dplyr::summarise() are great. This can be paired with group_by() to summarize over specific groups of data.\n\nsummary(iris)\n##   Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n##  Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n##  1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n##  Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n##  Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n##  3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n##  Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n##        Species  \n##  setosa    :50  \n##  versicolor:50  \n##  virginica :50  \n##                 \n##                 \n## \n\niris |&gt; \n  summarize(mean(Petal.Width),\n            sd(Petal.Width))\n##   mean(Petal.Width) sd(Petal.Width)\n## 1          1.199333       0.7622377\n\niris |&gt; \n  group_by(Species)|&gt;\n  summarize(mean(Petal.Width),\n            sd(Petal.Width))\n## # A tibble: 3 × 3\n##   Species    `mean(Petal.Width)` `sd(Petal.Width)`\n##   &lt;fct&gt;                    &lt;dbl&gt;             &lt;dbl&gt;\n## 1 setosa                   0.246             0.105\n## 2 versicolor               1.33              0.198\n## 3 virginica                2.03              0.275"
  },
  {
    "objectID": "ws2.html#combining-mulitple-dataframes",
    "href": "ws2.html#combining-mulitple-dataframes",
    "title": "Workshop 2: Introduction to R",
    "section": "Combining mulitple dataframes",
    "text": "Combining mulitple dataframes\nCombining data together is very common, and depending on the type of combination needed.\n\nBinding\nIf data has the same column names and needs to paste together, then rbind() and dplyr::bind_rows() are the tools need. For rbind(), the column names need to have the same name. bind_rows() does not have this problem.\n\n# bind data together \nsal = tibble(species = rep(c('Salmon'),times = 3),\n              year = c(1999,2005,2020),\n              catch = c(50, 60, 40))\n\ncod = tibble(species = rep('Cod', times = 3),\n             year = c(1999,2005,2020),\n             catch = c(50, 60, 100))\n\ncrab = tibble(species = rep('Crab', times = 3),\n              catch = c(50, 60, 100),\n              effort = c(20, 30, 50))\n\nrbind(sal,cod)\n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Salmon   2005    60\n## 3 Salmon   2020    40\n## 4 Cod      1999    50\n## 5 Cod      2005    60\n## 6 Cod      2020   100\n\n#Why error?\nrbind(sal, crab)\n## Error in match.names(clabs, names(xi)): names do not match previous names\n\n#Flexibility on the order\n\nbind_rows(sal, cod)\n## # A tibble: 6 × 3\n##   species  year catch\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n## 1 Salmon   1999    50\n## 2 Salmon   2005    60\n## 3 Salmon   2020    40\n## 4 Cod      1999    50\n## 5 Cod      2005    60\n## 6 Cod      2020   100\n#vs\nbind_rows(sal, crab)\n## # A tibble: 6 × 4\n##   species  year catch effort\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n## 1 Salmon   1999    50     NA\n## 2 Salmon   2005    60     NA\n## 3 Salmon   2020    40     NA\n## 4 Crab       NA    50     20\n## 5 Crab       NA    60     30\n## 6 Crab       NA   100     50\n\n\n\nMerge/Join\nIf two data frames contain different columns of data, then they can be merged together with the family of join functions.\n+left_join() = uses left df as template and joins all matching columns from right df +right_join() = uses right df as template and joins all matching columns from left df +inner_join() = only matches columns contained in both dfs +full_join() = combines all rows in both dfs\n\nleft = tibble(name = c('a', 'b', 'c'),\n              n = c(1, 6, 7), \n              bio = c(100, 43, 57))\n\nright = tibble(name = c('a', 'b', 'd', 'e'),\n               cals = c(500, 450, 570, 600))\n\nleft_join(left, right, by = 'name')\n## # A tibble: 3 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 c         7    57    NA\n\nright_join(left, right, by = 'name')\n## # A tibble: 4 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 d        NA    NA   570\n## 4 e        NA    NA   600\n\ninner_join(left, right, by = 'name')\n## # A tibble: 2 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n\nfull_join(left, right, by = 'name')\n## # A tibble: 5 × 4\n##   name      n   bio  cals\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         1   100   500\n## 2 b         6    43   450\n## 3 c         7    57    NA\n## 4 d        NA    NA   570\n## 5 e        NA    NA   600\n\n# multiple matches\nfish = tibble(species = rep(c('Salmon', 'Cod'),times = 3),\n              year = rep(c(1999,2005,2020), each = 2),\n              catch = c(50, 60, 40, 50, 60, 100))\n\ncol = tibble(species = c('Salmon', 'Cod'),\n             coast = c('West', 'East'))\n\nleft_join(fish, col, by = 'species')\n## # A tibble: 6 × 4\n##   species  year catch coast\n##   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n## 1 Salmon   1999    50 West \n## 2 Cod      1999    60 East \n## 3 Salmon   2005    40 West \n## 4 Cod      2005    50 East \n## 5 Salmon   2020    60 West \n## 6 Cod      2020   100 East"
  },
  {
    "objectID": "ws2.html#figures-with-ggplot2",
    "href": "ws2.html#figures-with-ggplot2",
    "title": "Workshop 2: Introduction to R",
    "section": "Figures with ggplot2",
    "text": "Figures with ggplot2\nThe ggplot2 package is part of the packages that load with tidyverse and has become the standard in ecology. The syntax builds upon on a base function and is very customizable see cheat sheet and R for data science\nThe base of all ggplot2 begins with ggplot() and geom_...() are built upon them\n\n# read in data\ndf = read_csv(url('https://raw.githubusercontent.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/main/data/LDWFBayAnchovy2007.csv'))\n## Rows: 60 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): species, basin\n## dbl  (2): num, seines\n## date (1): date\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# plot number of Bay anchovy caught per month\nggplot(df, aes(x = date, y = num))+\n  geom_point()\n\n\n\n\nShow color based on basin number and add line connecting dots\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()\n\n\n\n\nChange labels and style of plot\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  theme_classic()\n\n\n\n\nModify the size of axis label text and legend position\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance', color = 'Basin')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom')\n\n\n\n\nOnly plot specific range of the dates on x axis\n\nggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  scale_x_date(limits = c(lubridate::ymd('2007-04-01'), lubridate::ymd('2007-10-01')))+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n## Warning: Removed 25 rows containing missing values or values outside the scale range\n## (`geom_point()`).\n## Warning: Removed 25 rows containing missing values or values outside the scale range\n## (`geom_line()`).\n\n\n\n\nSplit each trial into own grid\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  facet_wrap(~basin)+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\n\n\n\nModify the date labels on x axis (list of date abbreviations) and make 1 column of plots\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  facet_wrap(~basin, ncol = 1)+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank())\n\n\n\n\nModify the label and size of strip text\n\n# doesn't change the order\nlabels = c('Calcasieu' = 'CAL',\n          'Vermilion-Teche' = 'VER',\n          'Terrebonne' = 'TER',\n          'Barataria' = 'BAR',\n          'Pontchartrain' = 'PON')\n\nggplot(df, aes(x = date, y = num))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  facet_wrap(~basin, ncol = 1, labeller = as_labeller(labels))+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom',\n        legend.title = element_blank(),\n        strip.text = element_text(size = 12))\n\n\n\n\nRemake figure with the mean Abundance and min and max values from each basin and the summarized line through the points\n\nggplot(df, aes(x = date, y = num))+\n  geom_pointrange(stat = \"summary\",\n                  fun.min = 'min',\n                  fun.max = 'max',\n                  fun = 'mean')+\n  stat_summary(aes(y = num), fun = mean, geom = 'line')+\n  labs(x = 'Date', y = 'Bay anchovy abundance')+\n  scale_x_date(date_breaks = '2 months', date_labels = '%m/%y')+\n  theme_classic()+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12))\n\n\n\n\nMake box plot of number of seines per month within each basin\n\nggplot(df, aes(x = basin, y = seines))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  theme_bw()\n\n\n\n\nChange order of x axis (make basin order from west to east) and color of plot. Colors can be both hex code or from names that R has. A help website for picking colors is here.\n\n\ndf = df %&gt;% \n  mutate(basin = factor(basin, levels = c('Calcasieu',\n          'Vermilion-Teche',\n          'Terrebonne',\n          'Barataria',\n          'Pontchartrain' )))\n\ncolors = c('Calcasieu' = 'darkred',\n          'Vermilion-Teche' = 'cadetblue4',\n          'Terrebonne' = '#FFC125',\n          'Barataria' = '#5d478b',\n          'Pontchartrain' = 'grey55')\n\nggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()\n\n\n\n\nModify the labels and remove the legend\n\nggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()+\n  theme(axis.title = element_text(size = 18), \n        axis.text.y = element_text(size = 18, colour = \"black\"), \n        axis.text.x = element_text(size = 10, colour = \"black\"), \n        legend.position = 'none',\n        legend.title = element_blank())\n\n\n\n\n\nCombining plots\nSometimes we would like to combine different sub figures together to make a single figure. There are a few packages that can do this with ggpubr and patchwork some of the most common. I like ggpubr and use this one, but people seem to like patchwork.\n\nlibrary(ggpubr)\nlibrary(wesanderson)\n\na = ggplot(df, aes(x = basin, y = seines, fill = basin))+\n  geom_boxplot()+\n  labs(x = NULL, y = '# of seines')+\n  scale_fill_manual(values = colors)+\n  theme_bw()+\n  theme(axis.title = element_text(size = 14), \n        axis.text.y = element_text(size = 14, colour = \"black\"), \n        axis.text.x = element_text(size = 10, colour = \"black\"), \n        legend.position = 'none',\n        legend.title = element_blank())\n\nb = ggplot(df, aes(x = date, y = num, color = basin))+\n  geom_point()+\n  geom_line()+\n  labs(x = 'Date', y = 'Bay anchovy abundance', color = 'Basin')+\n  theme_bw()+\n  scale_color_manual(values = colors)+\n  theme(axis.title = element_text(size = 14),\n        axis.text = element_text(size = 12),\n        legend.position = 'bottom')\n\n# plot combined\nggarrange(a,b,\n          labels = c('a)','b)'),\n          ncol = 1)\n\n\n\n\n# arrange vertically and move position of labels\nggarrange(a,b,\n          labels = c('a)','b)'),\n          ncol = 1,\n          align = 'v',\n          hjust=-1.5)\n\n\n\n\n# common legend\na = ggplot(mtcars, aes(wt, fill = as.character(cyl), \n                       color = as.character(cyl)))+\n  geom_density(alpha = 0.4)+\n  labs(x = 'Weight of car (tonnes)', \n       fill = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'),\n                     guide = \"none\")+\n  scale_fill_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n\nb = ggplot(mtcars, aes(mpg, color = as.character(cyl),\n                       fill = as.character(cyl)))+\n  geom_density(alpha = 0.4)+\n  labs(x = 'Miles/gallon',\n       fill = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'),\n                     guide = \"none\")+\n  scale_fill_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n  \n\nc = ggplot(mtcars, aes(wt, mpg, group = cyl, color = as.character(cyl)))+\n  geom_point(size = 2)+\n  geom_smooth(method = 'lm',size = 1)+\n  labs(x = 'Weight of car (tonnes)', \n       y = 'Miles/gallon',\n       color = '# of engine cylinders')+\n  scale_color_manual(values = wes_palette('GrandBudapest1'))+\n  theme_bw()+\n  theme(axis.title = element_text(size = 10), \n        axis.text.y = element_text(size = 10, colour = \"black\"), \n        axis.text.x = element_text(size = 8, colour = \"black\"), \n        legend.position = 'bottom',\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        strip.text.x = element_text(size = 10),\n        legend.text = element_text(size = 7))\n## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n## ℹ Please use `linewidth` instead.\n\n\nggarrange(a,b,c, \n          labels = c('A','B','C'),\n          nrow = 2,ncol = 2,\n          common.legend = F)\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggarrange(a,b,c, \n          labels = c('A','B','C'),\n          nrow = 2, ncol = 2,\n          common.legend = T,\n          legend = 'top')\n## `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggarrange(ggarrange(a,b, labels = c('A','B'), common.legend = T),c,\n          labels = c('','C'),\n          nrow = 2,\n          legend = 'none')\n## `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "ws2.html#exercises",
    "href": "ws2.html#exercises",
    "title": "Workshop 2: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nRead in the LDWFBayAnchovy2007.csv and create a column that calculates the catch per unit effort (CPUE) for Bay anchovy within the dataframe.\nCreate a dataframe or tibble that contains the basin names for the LDWFBayAnchovy2007.csv dataset (Barataria, Terrebonne, Ponchartrain, Vermilion-Teche, and Calcasieu) and the and abbreviation for each basin as a new column.\nMerge the dataframe/tibbles from exercises 1 and 2.\nPlot the CPUE for each basin both over time and as a summary of the entire year using a different color for each basin."
  },
  {
    "objectID": "ws3.html",
    "href": "ws3.html",
    "title": "Workshop 3: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with conditional statements, for loops, vector operations, and quarto/rmarkdown:\n\nConditional statements\n\nbase R\ndpylr\n\nFor loops\nVector operations\n\ndates with lubridate\npurr\n\nQuarto/rmarkdown\nExercises\n\nR script: [github]https://github.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/blob/main/workshopScripts/workshop3.R)\nR script of workshop 3\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "ws3.html#conditional-statements-for-loops-vector-operations-quartormardown",
    "href": "ws3.html#conditional-statements-for-loops-vector-operations-quartormardown",
    "title": "Workshop 3: Introduction to R",
    "section": "",
    "text": "This workshop continues basics of R working more with conditional statements, for loops, vector operations, and quarto/rmarkdown:\n\nConditional statements\n\nbase R\ndpylr\n\nFor loops\nVector operations\n\ndates with lubridate\npurr\n\nQuarto/rmarkdown\nExercises\n\nR script: [github]https://github.com/SeascapeEcologyLab-workshops/BSC6926-B52_Fall2024/blob/main/workshopScripts/workshop3.R)\nR script of workshop 3\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "ws3.html#conditional-statements",
    "href": "ws3.html#conditional-statements",
    "title": "Workshop 3: Introduction to R",
    "section": "Conditional statements",
    "text": "Conditional statements\nIn programing there are times that if something is true then you want an operation to occur, but not when a condition is not true. ### Base R These can be done with if and if else statements in base R. These are written if a condition is true then the operation is done. They can be built upon with else if if the first condition is false to do test a second condition. If you want it to be If true and if false do something else then if and else structure can be used.\n\nb = 5 \n\nif (b == 5){\n  cat('b = 5 \\n') # \\n is carriage return to end line when printing\n}\n## b = 5\n\nif (TRUE){\n  c = 6\n}else(\n  c = 10\n)\nc \n## [1] 6\n\nif (F){\n  c = 6\n}else(\n  c = 10\n)\n## [1] 10\nc \n## [1] 10\n\nif (b == 10){\n  cat('b = 10 \\n')\n}else if (b == 5){\n  cat('it worked \\n')\n}else{\n  cat('nothing \\n')\n}\n## it worked\n\n\ndplyr functions\ndplyr has two functions that are very useful for conditional statements. Because they are a function they can be vectorized which will be useful as you see below. if_else() is a function that based on if the input is TRUE or FALSE produces a different answer. case_when() is more flexible and allows for multple outputs based on conditions being TRUE\n\nx = 1:20\n\nif_else(x &gt; 10,\n        'x &gt; 10',\n        'x &lt; 10')\n##  [1] \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\" \"x &lt; 10\"\n##  [9] \"x &lt; 10\" \"x &lt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\"\n## [17] \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\" \"x &gt; 10\"\n\n\ncase_when(x &lt; 6 ~ 'x &lt; 6',\n          between(x, 6, 15) ~ '6 &lt;= x &lt;= 15',\n          x &gt; 15 ~ 'x &gt; 15')\n##  [1] \"x &lt; 6\"        \"x &lt; 6\"        \"x &lt; 6\"        \"x &lt; 6\"        \"x &lt; 6\"       \n##  [6] \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\"\n## [11] \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\" \"6 &lt;= x &lt;= 15\"\n## [16] \"x &gt; 15\"       \"x &gt; 15\"       \"x &gt; 15\"       \"x &gt; 15\"       \"x &gt; 15\""
  },
  {
    "objectID": "ws3.html#for-loops",
    "href": "ws3.html#for-loops",
    "title": "Workshop 3: Introduction to R",
    "section": "For loops",
    "text": "For loops\nAnother useful tool in programming is for loops. For loops repeat a process for a certain number of iterations. These can be useful iterate over a dataset or when using information in a time series. The for loop works over the number sequence indicated and does the code within the loop (inside of {}) for each number in the sequence. The iteration is typically indicated with i, but is just an object that is replaced at the begining of each loop and can be anything.\n\nfor(i in 1:10){ #Sequence - i object within the sequence from 1 to 10\n  print(i)      #body - the operation to do something (function, operation, etc)\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\n#The iterator could be assigned to any letter or word assigment\nfor(turtle in 5:10){\n  print(turtle)\n}\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\nfor(flower in 1:nrow(iris)){\n  cat('The species for this iteration is ',     #Adding text per row based on name species\n      as.character(iris$Species[flower]), '\\n') #note of importance of \"\\n\n}\n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica\n\nd = seq(1,15, 2) #8 elements\nd\n## [1]  1  3  5  7  9 11 13 15\nfor(i in 1:length(d)){\n  b = d[i] + 1                            #for each i add 1\n  cat('d =',d[i], 'b = d + 1 =', b, '\\n' )#then add string\n}\n## d = 1 b = d + 1 = 2 \n## d = 3 b = d + 1 = 4 \n## d = 5 b = d + 1 = 6 \n## d = 7 b = d + 1 = 8 \n## d = 9 b = d + 1 = 10 \n## d = 11 b = d + 1 = 12 \n## d = 13 b = d + 1 = 14 \n## d = 15 b = d + 1 = 16\n\n#Using seq_along\nd = seq(1,15, 2) #8 elements\nd\n## [1]  1  3  5  7  9 11 13 15\nfor(i in seq_along(d)){\n  b = d[i] + 1                            #for each i add 1\n  cat('d =',d[i], 'b = d + 1 =', b, '\\n' )#then add string\n}\n## d = 1 b = d + 1 = 2 \n## d = 3 b = d + 1 = 4 \n## d = 5 b = d + 1 = 6 \n## d = 7 b = d + 1 = 8 \n## d = 9 b = d + 1 = 10 \n## d = 11 b = d + 1 = 12 \n## d = 13 b = d + 1 = 14 \n## d = 15 b = d + 1 = 16\n\nb = 1:10\nfor (i in 2:10){    #Call a section of vector to start sequence\n  z = b[i] - b[i-1]\n  \n  cat('z =', z, 'b[i] =', b[i], 'b[i-1] =', b[i-1], '\\n')\n}\n## z = 1 b[i] = 2 b[i-1] = 1 \n## z = 1 b[i] = 3 b[i-1] = 2 \n## z = 1 b[i] = 4 b[i-1] = 3 \n## z = 1 b[i] = 5 b[i-1] = 4 \n## z = 1 b[i] = 6 b[i-1] = 5 \n## z = 1 b[i] = 7 b[i-1] = 6 \n## z = 1 b[i] = 8 b[i-1] = 7 \n## z = 1 b[i] = 9 b[i-1] = 8 \n## z = 1 b[i] = 10 b[i-1] = 9\n\n\nstart = 10 \npop = tibble(time = 0:10, n = NA) #Output vector size 10\npop$n[pop$time == 0] = start\npop\n## # A tibble: 11 × 2\n##     time     n\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## 11    10    NA\nfor (t in 1:10){ #sequence \n  growth = rnorm(n =1, mean = 3, sd = 1) #extracting random value normal dist\n  pop$n[pop$time == t] = growth + pop$n[pop$time == (t-1)]\n}\npop\n## # A tibble: 11 × 2\n##     time     n\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0  10  \n##  2     1  15.2\n##  3     2  19.6\n##  4     3  23.1\n##  5     4  26.5\n##  6     5  30.5\n##  7     6  35.5\n##  8     7  38.5\n##  9     8  42.5\n## 10     9  46.6\n## 11    10  50.0"
  },
  {
    "objectID": "ws3.html#vector-operations",
    "href": "ws3.html#vector-operations",
    "title": "Workshop 3: Introduction to R",
    "section": "Vector operations",
    "text": "Vector operations\nAs we have seen above, we can do operations over vectors. We sometimes want to do this to vectors stored in dataframes/tibbles, and the mutate() function makes this easy. This can be applied to multiple columns at once with across()\n\niris |&gt; \n  mutate(petalArea = Petal.Length*Petal.Width)\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species petalArea\n## 1            5.1         3.5          1.4         0.2     setosa      0.28\n## 2            4.9         3.0          1.4         0.2     setosa      0.28\n## 3            4.7         3.2          1.3         0.2     setosa      0.26\n## 4            4.6         3.1          1.5         0.2     setosa      0.30\n## 5            5.0         3.6          1.4         0.2     setosa      0.28\n## 6            5.4         3.9          1.7         0.4     setosa      0.68\n## 7            4.6         3.4          1.4         0.3     setosa      0.42\n## 8            5.0         3.4          1.5         0.2     setosa      0.30\n## 9            4.4         2.9          1.4         0.2     setosa      0.28\n## 10           4.9         3.1          1.5         0.1     setosa      0.15\n## 11           5.4         3.7          1.5         0.2     setosa      0.30\n## 12           4.8         3.4          1.6         0.2     setosa      0.32\n## 13           4.8         3.0          1.4         0.1     setosa      0.14\n## 14           4.3         3.0          1.1         0.1     setosa      0.11\n## 15           5.8         4.0          1.2         0.2     setosa      0.24\n## 16           5.7         4.4          1.5         0.4     setosa      0.60\n## 17           5.4         3.9          1.3         0.4     setosa      0.52\n## 18           5.1         3.5          1.4         0.3     setosa      0.42\n## 19           5.7         3.8          1.7         0.3     setosa      0.51\n## 20           5.1         3.8          1.5         0.3     setosa      0.45\n## 21           5.4         3.4          1.7         0.2     setosa      0.34\n## 22           5.1         3.7          1.5         0.4     setosa      0.60\n## 23           4.6         3.6          1.0         0.2     setosa      0.20\n## 24           5.1         3.3          1.7         0.5     setosa      0.85\n## 25           4.8         3.4          1.9         0.2     setosa      0.38\n## 26           5.0         3.0          1.6         0.2     setosa      0.32\n## 27           5.0         3.4          1.6         0.4     setosa      0.64\n## 28           5.2         3.5          1.5         0.2     setosa      0.30\n## 29           5.2         3.4          1.4         0.2     setosa      0.28\n## 30           4.7         3.2          1.6         0.2     setosa      0.32\n## 31           4.8         3.1          1.6         0.2     setosa      0.32\n## 32           5.4         3.4          1.5         0.4     setosa      0.60\n## 33           5.2         4.1          1.5         0.1     setosa      0.15\n## 34           5.5         4.2          1.4         0.2     setosa      0.28\n## 35           4.9         3.1          1.5         0.2     setosa      0.30\n## 36           5.0         3.2          1.2         0.2     setosa      0.24\n## 37           5.5         3.5          1.3         0.2     setosa      0.26\n## 38           4.9         3.6          1.4         0.1     setosa      0.14\n## 39           4.4         3.0          1.3         0.2     setosa      0.26\n## 40           5.1         3.4          1.5         0.2     setosa      0.30\n## 41           5.0         3.5          1.3         0.3     setosa      0.39\n## 42           4.5         2.3          1.3         0.3     setosa      0.39\n## 43           4.4         3.2          1.3         0.2     setosa      0.26\n## 44           5.0         3.5          1.6         0.6     setosa      0.96\n## 45           5.1         3.8          1.9         0.4     setosa      0.76\n## 46           4.8         3.0          1.4         0.3     setosa      0.42\n## 47           5.1         3.8          1.6         0.2     setosa      0.32\n## 48           4.6         3.2          1.4         0.2     setosa      0.28\n## 49           5.3         3.7          1.5         0.2     setosa      0.30\n## 50           5.0         3.3          1.4         0.2     setosa      0.28\n## 51           7.0         3.2          4.7         1.4 versicolor      6.58\n## 52           6.4         3.2          4.5         1.5 versicolor      6.75\n## 53           6.9         3.1          4.9         1.5 versicolor      7.35\n## 54           5.5         2.3          4.0         1.3 versicolor      5.20\n## 55           6.5         2.8          4.6         1.5 versicolor      6.90\n## 56           5.7         2.8          4.5         1.3 versicolor      5.85\n## 57           6.3         3.3          4.7         1.6 versicolor      7.52\n## 58           4.9         2.4          3.3         1.0 versicolor      3.30\n## 59           6.6         2.9          4.6         1.3 versicolor      5.98\n## 60           5.2         2.7          3.9         1.4 versicolor      5.46\n## 61           5.0         2.0          3.5         1.0 versicolor      3.50\n## 62           5.9         3.0          4.2         1.5 versicolor      6.30\n## 63           6.0         2.2          4.0         1.0 versicolor      4.00\n## 64           6.1         2.9          4.7         1.4 versicolor      6.58\n## 65           5.6         2.9          3.6         1.3 versicolor      4.68\n## 66           6.7         3.1          4.4         1.4 versicolor      6.16\n## 67           5.6         3.0          4.5         1.5 versicolor      6.75\n## 68           5.8         2.7          4.1         1.0 versicolor      4.10\n## 69           6.2         2.2          4.5         1.5 versicolor      6.75\n## 70           5.6         2.5          3.9         1.1 versicolor      4.29\n## 71           5.9         3.2          4.8         1.8 versicolor      8.64\n## 72           6.1         2.8          4.0         1.3 versicolor      5.20\n## 73           6.3         2.5          4.9         1.5 versicolor      7.35\n## 74           6.1         2.8          4.7         1.2 versicolor      5.64\n## 75           6.4         2.9          4.3         1.3 versicolor      5.59\n## 76           6.6         3.0          4.4         1.4 versicolor      6.16\n## 77           6.8         2.8          4.8         1.4 versicolor      6.72\n## 78           6.7         3.0          5.0         1.7 versicolor      8.50\n## 79           6.0         2.9          4.5         1.5 versicolor      6.75\n## 80           5.7         2.6          3.5         1.0 versicolor      3.50\n## 81           5.5         2.4          3.8         1.1 versicolor      4.18\n## 82           5.5         2.4          3.7         1.0 versicolor      3.70\n## 83           5.8         2.7          3.9         1.2 versicolor      4.68\n## 84           6.0         2.7          5.1         1.6 versicolor      8.16\n## 85           5.4         3.0          4.5         1.5 versicolor      6.75\n## 86           6.0         3.4          4.5         1.6 versicolor      7.20\n## 87           6.7         3.1          4.7         1.5 versicolor      7.05\n## 88           6.3         2.3          4.4         1.3 versicolor      5.72\n## 89           5.6         3.0          4.1         1.3 versicolor      5.33\n## 90           5.5         2.5          4.0         1.3 versicolor      5.20\n## 91           5.5         2.6          4.4         1.2 versicolor      5.28\n## 92           6.1         3.0          4.6         1.4 versicolor      6.44\n## 93           5.8         2.6          4.0         1.2 versicolor      4.80\n## 94           5.0         2.3          3.3         1.0 versicolor      3.30\n## 95           5.6         2.7          4.2         1.3 versicolor      5.46\n## 96           5.7         3.0          4.2         1.2 versicolor      5.04\n## 97           5.7         2.9          4.2         1.3 versicolor      5.46\n## 98           6.2         2.9          4.3         1.3 versicolor      5.59\n## 99           5.1         2.5          3.0         1.1 versicolor      3.30\n## 100          5.7         2.8          4.1         1.3 versicolor      5.33\n## 101          6.3         3.3          6.0         2.5  virginica     15.00\n## 102          5.8         2.7          5.1         1.9  virginica      9.69\n## 103          7.1         3.0          5.9         2.1  virginica     12.39\n## 104          6.3         2.9          5.6         1.8  virginica     10.08\n## 105          6.5         3.0          5.8         2.2  virginica     12.76\n## 106          7.6         3.0          6.6         2.1  virginica     13.86\n## 107          4.9         2.5          4.5         1.7  virginica      7.65\n## 108          7.3         2.9          6.3         1.8  virginica     11.34\n## 109          6.7         2.5          5.8         1.8  virginica     10.44\n## 110          7.2         3.6          6.1         2.5  virginica     15.25\n## 111          6.5         3.2          5.1         2.0  virginica     10.20\n## 112          6.4         2.7          5.3         1.9  virginica     10.07\n## 113          6.8         3.0          5.5         2.1  virginica     11.55\n## 114          5.7         2.5          5.0         2.0  virginica     10.00\n## 115          5.8         2.8          5.1         2.4  virginica     12.24\n## 116          6.4         3.2          5.3         2.3  virginica     12.19\n## 117          6.5         3.0          5.5         1.8  virginica      9.90\n## 118          7.7         3.8          6.7         2.2  virginica     14.74\n## 119          7.7         2.6          6.9         2.3  virginica     15.87\n## 120          6.0         2.2          5.0         1.5  virginica      7.50\n## 121          6.9         3.2          5.7         2.3  virginica     13.11\n## 122          5.6         2.8          4.9         2.0  virginica      9.80\n## 123          7.7         2.8          6.7         2.0  virginica     13.40\n## 124          6.3         2.7          4.9         1.8  virginica      8.82\n## 125          6.7         3.3          5.7         2.1  virginica     11.97\n## 126          7.2         3.2          6.0         1.8  virginica     10.80\n## 127          6.2         2.8          4.8         1.8  virginica      8.64\n## 128          6.1         3.0          4.9         1.8  virginica      8.82\n## 129          6.4         2.8          5.6         2.1  virginica     11.76\n## 130          7.2         3.0          5.8         1.6  virginica      9.28\n## 131          7.4         2.8          6.1         1.9  virginica     11.59\n## 132          7.9         3.8          6.4         2.0  virginica     12.80\n## 133          6.4         2.8          5.6         2.2  virginica     12.32\n## 134          6.3         2.8          5.1         1.5  virginica      7.65\n## 135          6.1         2.6          5.6         1.4  virginica      7.84\n## 136          7.7         3.0          6.1         2.3  virginica     14.03\n## 137          6.3         3.4          5.6         2.4  virginica     13.44\n## 138          6.4         3.1          5.5         1.8  virginica      9.90\n## 139          6.0         3.0          4.8         1.8  virginica      8.64\n## 140          6.9         3.1          5.4         2.1  virginica     11.34\n## 141          6.7         3.1          5.6         2.4  virginica     13.44\n## 142          6.9         3.1          5.1         2.3  virginica     11.73\n## 143          5.8         2.7          5.1         1.9  virginica      9.69\n## 144          6.8         3.2          5.9         2.3  virginica     13.57\n## 145          6.7         3.3          5.7         2.5  virginica     14.25\n## 146          6.7         3.0          5.2         2.3  virginica     11.96\n## 147          6.3         2.5          5.0         1.9  virginica      9.50\n## 148          6.5         3.0          5.2         2.0  virginica     10.40\n## 149          6.2         3.4          5.4         2.3  virginica     12.42\n## 150          5.9         3.0          5.1         1.8  virginica      9.18\n\niris |&gt;\n  mutate(petalArea = Petal.Length*Petal.Width,\n         PetalSize = if_else(condition = petalArea &gt; 0.2, true ='big',\n                             false = 'small'))\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species petalArea\n## 1            5.1         3.5          1.4         0.2     setosa      0.28\n## 2            4.9         3.0          1.4         0.2     setosa      0.28\n## 3            4.7         3.2          1.3         0.2     setosa      0.26\n## 4            4.6         3.1          1.5         0.2     setosa      0.30\n## 5            5.0         3.6          1.4         0.2     setosa      0.28\n## 6            5.4         3.9          1.7         0.4     setosa      0.68\n## 7            4.6         3.4          1.4         0.3     setosa      0.42\n## 8            5.0         3.4          1.5         0.2     setosa      0.30\n## 9            4.4         2.9          1.4         0.2     setosa      0.28\n## 10           4.9         3.1          1.5         0.1     setosa      0.15\n## 11           5.4         3.7          1.5         0.2     setosa      0.30\n## 12           4.8         3.4          1.6         0.2     setosa      0.32\n## 13           4.8         3.0          1.4         0.1     setosa      0.14\n## 14           4.3         3.0          1.1         0.1     setosa      0.11\n## 15           5.8         4.0          1.2         0.2     setosa      0.24\n## 16           5.7         4.4          1.5         0.4     setosa      0.60\n## 17           5.4         3.9          1.3         0.4     setosa      0.52\n## 18           5.1         3.5          1.4         0.3     setosa      0.42\n## 19           5.7         3.8          1.7         0.3     setosa      0.51\n## 20           5.1         3.8          1.5         0.3     setosa      0.45\n## 21           5.4         3.4          1.7         0.2     setosa      0.34\n## 22           5.1         3.7          1.5         0.4     setosa      0.60\n## 23           4.6         3.6          1.0         0.2     setosa      0.20\n## 24           5.1         3.3          1.7         0.5     setosa      0.85\n## 25           4.8         3.4          1.9         0.2     setosa      0.38\n## 26           5.0         3.0          1.6         0.2     setosa      0.32\n## 27           5.0         3.4          1.6         0.4     setosa      0.64\n## 28           5.2         3.5          1.5         0.2     setosa      0.30\n## 29           5.2         3.4          1.4         0.2     setosa      0.28\n## 30           4.7         3.2          1.6         0.2     setosa      0.32\n## 31           4.8         3.1          1.6         0.2     setosa      0.32\n## 32           5.4         3.4          1.5         0.4     setosa      0.60\n## 33           5.2         4.1          1.5         0.1     setosa      0.15\n## 34           5.5         4.2          1.4         0.2     setosa      0.28\n## 35           4.9         3.1          1.5         0.2     setosa      0.30\n## 36           5.0         3.2          1.2         0.2     setosa      0.24\n## 37           5.5         3.5          1.3         0.2     setosa      0.26\n## 38           4.9         3.6          1.4         0.1     setosa      0.14\n## 39           4.4         3.0          1.3         0.2     setosa      0.26\n## 40           5.1         3.4          1.5         0.2     setosa      0.30\n## 41           5.0         3.5          1.3         0.3     setosa      0.39\n## 42           4.5         2.3          1.3         0.3     setosa      0.39\n## 43           4.4         3.2          1.3         0.2     setosa      0.26\n## 44           5.0         3.5          1.6         0.6     setosa      0.96\n## 45           5.1         3.8          1.9         0.4     setosa      0.76\n## 46           4.8         3.0          1.4         0.3     setosa      0.42\n## 47           5.1         3.8          1.6         0.2     setosa      0.32\n## 48           4.6         3.2          1.4         0.2     setosa      0.28\n## 49           5.3         3.7          1.5         0.2     setosa      0.30\n## 50           5.0         3.3          1.4         0.2     setosa      0.28\n## 51           7.0         3.2          4.7         1.4 versicolor      6.58\n## 52           6.4         3.2          4.5         1.5 versicolor      6.75\n## 53           6.9         3.1          4.9         1.5 versicolor      7.35\n## 54           5.5         2.3          4.0         1.3 versicolor      5.20\n## 55           6.5         2.8          4.6         1.5 versicolor      6.90\n## 56           5.7         2.8          4.5         1.3 versicolor      5.85\n## 57           6.3         3.3          4.7         1.6 versicolor      7.52\n## 58           4.9         2.4          3.3         1.0 versicolor      3.30\n## 59           6.6         2.9          4.6         1.3 versicolor      5.98\n## 60           5.2         2.7          3.9         1.4 versicolor      5.46\n## 61           5.0         2.0          3.5         1.0 versicolor      3.50\n## 62           5.9         3.0          4.2         1.5 versicolor      6.30\n## 63           6.0         2.2          4.0         1.0 versicolor      4.00\n## 64           6.1         2.9          4.7         1.4 versicolor      6.58\n## 65           5.6         2.9          3.6         1.3 versicolor      4.68\n## 66           6.7         3.1          4.4         1.4 versicolor      6.16\n## 67           5.6         3.0          4.5         1.5 versicolor      6.75\n## 68           5.8         2.7          4.1         1.0 versicolor      4.10\n## 69           6.2         2.2          4.5         1.5 versicolor      6.75\n## 70           5.6         2.5          3.9         1.1 versicolor      4.29\n## 71           5.9         3.2          4.8         1.8 versicolor      8.64\n## 72           6.1         2.8          4.0         1.3 versicolor      5.20\n## 73           6.3         2.5          4.9         1.5 versicolor      7.35\n## 74           6.1         2.8          4.7         1.2 versicolor      5.64\n## 75           6.4         2.9          4.3         1.3 versicolor      5.59\n## 76           6.6         3.0          4.4         1.4 versicolor      6.16\n## 77           6.8         2.8          4.8         1.4 versicolor      6.72\n## 78           6.7         3.0          5.0         1.7 versicolor      8.50\n## 79           6.0         2.9          4.5         1.5 versicolor      6.75\n## 80           5.7         2.6          3.5         1.0 versicolor      3.50\n## 81           5.5         2.4          3.8         1.1 versicolor      4.18\n## 82           5.5         2.4          3.7         1.0 versicolor      3.70\n## 83           5.8         2.7          3.9         1.2 versicolor      4.68\n## 84           6.0         2.7          5.1         1.6 versicolor      8.16\n## 85           5.4         3.0          4.5         1.5 versicolor      6.75\n## 86           6.0         3.4          4.5         1.6 versicolor      7.20\n## 87           6.7         3.1          4.7         1.5 versicolor      7.05\n## 88           6.3         2.3          4.4         1.3 versicolor      5.72\n## 89           5.6         3.0          4.1         1.3 versicolor      5.33\n## 90           5.5         2.5          4.0         1.3 versicolor      5.20\n## 91           5.5         2.6          4.4         1.2 versicolor      5.28\n## 92           6.1         3.0          4.6         1.4 versicolor      6.44\n## 93           5.8         2.6          4.0         1.2 versicolor      4.80\n## 94           5.0         2.3          3.3         1.0 versicolor      3.30\n## 95           5.6         2.7          4.2         1.3 versicolor      5.46\n## 96           5.7         3.0          4.2         1.2 versicolor      5.04\n## 97           5.7         2.9          4.2         1.3 versicolor      5.46\n## 98           6.2         2.9          4.3         1.3 versicolor      5.59\n## 99           5.1         2.5          3.0         1.1 versicolor      3.30\n## 100          5.7         2.8          4.1         1.3 versicolor      5.33\n## 101          6.3         3.3          6.0         2.5  virginica     15.00\n## 102          5.8         2.7          5.1         1.9  virginica      9.69\n## 103          7.1         3.0          5.9         2.1  virginica     12.39\n## 104          6.3         2.9          5.6         1.8  virginica     10.08\n## 105          6.5         3.0          5.8         2.2  virginica     12.76\n## 106          7.6         3.0          6.6         2.1  virginica     13.86\n## 107          4.9         2.5          4.5         1.7  virginica      7.65\n## 108          7.3         2.9          6.3         1.8  virginica     11.34\n## 109          6.7         2.5          5.8         1.8  virginica     10.44\n## 110          7.2         3.6          6.1         2.5  virginica     15.25\n## 111          6.5         3.2          5.1         2.0  virginica     10.20\n## 112          6.4         2.7          5.3         1.9  virginica     10.07\n## 113          6.8         3.0          5.5         2.1  virginica     11.55\n## 114          5.7         2.5          5.0         2.0  virginica     10.00\n## 115          5.8         2.8          5.1         2.4  virginica     12.24\n## 116          6.4         3.2          5.3         2.3  virginica     12.19\n## 117          6.5         3.0          5.5         1.8  virginica      9.90\n## 118          7.7         3.8          6.7         2.2  virginica     14.74\n## 119          7.7         2.6          6.9         2.3  virginica     15.87\n## 120          6.0         2.2          5.0         1.5  virginica      7.50\n## 121          6.9         3.2          5.7         2.3  virginica     13.11\n## 122          5.6         2.8          4.9         2.0  virginica      9.80\n## 123          7.7         2.8          6.7         2.0  virginica     13.40\n## 124          6.3         2.7          4.9         1.8  virginica      8.82\n## 125          6.7         3.3          5.7         2.1  virginica     11.97\n## 126          7.2         3.2          6.0         1.8  virginica     10.80\n## 127          6.2         2.8          4.8         1.8  virginica      8.64\n## 128          6.1         3.0          4.9         1.8  virginica      8.82\n## 129          6.4         2.8          5.6         2.1  virginica     11.76\n## 130          7.2         3.0          5.8         1.6  virginica      9.28\n## 131          7.4         2.8          6.1         1.9  virginica     11.59\n## 132          7.9         3.8          6.4         2.0  virginica     12.80\n## 133          6.4         2.8          5.6         2.2  virginica     12.32\n## 134          6.3         2.8          5.1         1.5  virginica      7.65\n## 135          6.1         2.6          5.6         1.4  virginica      7.84\n## 136          7.7         3.0          6.1         2.3  virginica     14.03\n## 137          6.3         3.4          5.6         2.4  virginica     13.44\n## 138          6.4         3.1          5.5         1.8  virginica      9.90\n## 139          6.0         3.0          4.8         1.8  virginica      8.64\n## 140          6.9         3.1          5.4         2.1  virginica     11.34\n## 141          6.7         3.1          5.6         2.4  virginica     13.44\n## 142          6.9         3.1          5.1         2.3  virginica     11.73\n## 143          5.8         2.7          5.1         1.9  virginica      9.69\n## 144          6.8         3.2          5.9         2.3  virginica     13.57\n## 145          6.7         3.3          5.7         2.5  virginica     14.25\n## 146          6.7         3.0          5.2         2.3  virginica     11.96\n## 147          6.3         2.5          5.0         1.9  virginica      9.50\n## 148          6.5         3.0          5.2         2.0  virginica     10.40\n## 149          6.2         3.4          5.4         2.3  virginica     12.42\n## 150          5.9         3.0          5.1         1.8  virginica      9.18\n##     PetalSize\n## 1         big\n## 2         big\n## 3         big\n## 4         big\n## 5         big\n## 6         big\n## 7         big\n## 8         big\n## 9         big\n## 10      small\n## 11        big\n## 12        big\n## 13      small\n## 14      small\n## 15        big\n## 16        big\n## 17        big\n## 18        big\n## 19        big\n## 20        big\n## 21        big\n## 22        big\n## 23      small\n## 24        big\n## 25        big\n## 26        big\n## 27        big\n## 28        big\n## 29        big\n## 30        big\n## 31        big\n## 32        big\n## 33      small\n## 34        big\n## 35        big\n## 36        big\n## 37        big\n## 38      small\n## 39        big\n## 40        big\n## 41        big\n## 42        big\n## 43        big\n## 44        big\n## 45        big\n## 46        big\n## 47        big\n## 48        big\n## 49        big\n## 50        big\n## 51        big\n## 52        big\n## 53        big\n## 54        big\n## 55        big\n## 56        big\n## 57        big\n## 58        big\n## 59        big\n## 60        big\n## 61        big\n## 62        big\n## 63        big\n## 64        big\n## 65        big\n## 66        big\n## 67        big\n## 68        big\n## 69        big\n## 70        big\n## 71        big\n## 72        big\n## 73        big\n## 74        big\n## 75        big\n## 76        big\n## 77        big\n## 78        big\n## 79        big\n## 80        big\n## 81        big\n## 82        big\n## 83        big\n## 84        big\n## 85        big\n## 86        big\n## 87        big\n## 88        big\n## 89        big\n## 90        big\n## 91        big\n## 92        big\n## 93        big\n## 94        big\n## 95        big\n## 96        big\n## 97        big\n## 98        big\n## 99        big\n## 100       big\n## 101       big\n## 102       big\n## 103       big\n## 104       big\n## 105       big\n## 106       big\n## 107       big\n## 108       big\n## 109       big\n## 110       big\n## 111       big\n## 112       big\n## 113       big\n## 114       big\n## 115       big\n## 116       big\n## 117       big\n## 118       big\n## 119       big\n## 120       big\n## 121       big\n## 122       big\n## 123       big\n## 124       big\n## 125       big\n## 126       big\n## 127       big\n## 128       big\n## 129       big\n## 130       big\n## 131       big\n## 132       big\n## 133       big\n## 134       big\n## 135       big\n## 136       big\n## 137       big\n## 138       big\n## 139       big\n## 140       big\n## 141       big\n## 142       big\n## 143       big\n## 144       big\n## 145       big\n## 146       big\n## 147       big\n## 148       big\n## 149       big\n## 150       big\n\niris |&gt;\n  mutate(petalArea = Petal.Length*Petal.Width,\n         PetalSize = if_else(condition = petalArea &gt; 0.2, true ='big',\n                             false = 'small'))|&gt;\n  group_by(PetalSize)|&gt;\n  summarize(mean = mean(Petal.Width),\n            n = n())\n## # A tibble: 2 × 3\n##   PetalSize  mean     n\n##   &lt;chr&gt;     &lt;dbl&gt; &lt;int&gt;\n## 1 big       1.24    144\n## 2 small     0.117     6\n\n## across can do multiple columns at once\niris |&gt; \n  mutate(across(where(is.numeric), ~.x +1)) # add 1 to all numeric columns\n##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1            6.1         4.5          2.4         1.2     setosa\n## 2            5.9         4.0          2.4         1.2     setosa\n## 3            5.7         4.2          2.3         1.2     setosa\n## 4            5.6         4.1          2.5         1.2     setosa\n## 5            6.0         4.6          2.4         1.2     setosa\n## 6            6.4         4.9          2.7         1.4     setosa\n## 7            5.6         4.4          2.4         1.3     setosa\n## 8            6.0         4.4          2.5         1.2     setosa\n## 9            5.4         3.9          2.4         1.2     setosa\n## 10           5.9         4.1          2.5         1.1     setosa\n## 11           6.4         4.7          2.5         1.2     setosa\n## 12           5.8         4.4          2.6         1.2     setosa\n## 13           5.8         4.0          2.4         1.1     setosa\n## 14           5.3         4.0          2.1         1.1     setosa\n## 15           6.8         5.0          2.2         1.2     setosa\n## 16           6.7         5.4          2.5         1.4     setosa\n## 17           6.4         4.9          2.3         1.4     setosa\n## 18           6.1         4.5          2.4         1.3     setosa\n## 19           6.7         4.8          2.7         1.3     setosa\n## 20           6.1         4.8          2.5         1.3     setosa\n## 21           6.4         4.4          2.7         1.2     setosa\n## 22           6.1         4.7          2.5         1.4     setosa\n## 23           5.6         4.6          2.0         1.2     setosa\n## 24           6.1         4.3          2.7         1.5     setosa\n## 25           5.8         4.4          2.9         1.2     setosa\n## 26           6.0         4.0          2.6         1.2     setosa\n## 27           6.0         4.4          2.6         1.4     setosa\n## 28           6.2         4.5          2.5         1.2     setosa\n## 29           6.2         4.4          2.4         1.2     setosa\n## 30           5.7         4.2          2.6         1.2     setosa\n## 31           5.8         4.1          2.6         1.2     setosa\n## 32           6.4         4.4          2.5         1.4     setosa\n## 33           6.2         5.1          2.5         1.1     setosa\n## 34           6.5         5.2          2.4         1.2     setosa\n## 35           5.9         4.1          2.5         1.2     setosa\n## 36           6.0         4.2          2.2         1.2     setosa\n## 37           6.5         4.5          2.3         1.2     setosa\n## 38           5.9         4.6          2.4         1.1     setosa\n## 39           5.4         4.0          2.3         1.2     setosa\n## 40           6.1         4.4          2.5         1.2     setosa\n## 41           6.0         4.5          2.3         1.3     setosa\n## 42           5.5         3.3          2.3         1.3     setosa\n## 43           5.4         4.2          2.3         1.2     setosa\n## 44           6.0         4.5          2.6         1.6     setosa\n## 45           6.1         4.8          2.9         1.4     setosa\n## 46           5.8         4.0          2.4         1.3     setosa\n## 47           6.1         4.8          2.6         1.2     setosa\n## 48           5.6         4.2          2.4         1.2     setosa\n## 49           6.3         4.7          2.5         1.2     setosa\n## 50           6.0         4.3          2.4         1.2     setosa\n## 51           8.0         4.2          5.7         2.4 versicolor\n## 52           7.4         4.2          5.5         2.5 versicolor\n## 53           7.9         4.1          5.9         2.5 versicolor\n## 54           6.5         3.3          5.0         2.3 versicolor\n## 55           7.5         3.8          5.6         2.5 versicolor\n## 56           6.7         3.8          5.5         2.3 versicolor\n## 57           7.3         4.3          5.7         2.6 versicolor\n## 58           5.9         3.4          4.3         2.0 versicolor\n## 59           7.6         3.9          5.6         2.3 versicolor\n## 60           6.2         3.7          4.9         2.4 versicolor\n## 61           6.0         3.0          4.5         2.0 versicolor\n## 62           6.9         4.0          5.2         2.5 versicolor\n## 63           7.0         3.2          5.0         2.0 versicolor\n## 64           7.1         3.9          5.7         2.4 versicolor\n## 65           6.6         3.9          4.6         2.3 versicolor\n## 66           7.7         4.1          5.4         2.4 versicolor\n## 67           6.6         4.0          5.5         2.5 versicolor\n## 68           6.8         3.7          5.1         2.0 versicolor\n## 69           7.2         3.2          5.5         2.5 versicolor\n## 70           6.6         3.5          4.9         2.1 versicolor\n## 71           6.9         4.2          5.8         2.8 versicolor\n## 72           7.1         3.8          5.0         2.3 versicolor\n## 73           7.3         3.5          5.9         2.5 versicolor\n## 74           7.1         3.8          5.7         2.2 versicolor\n## 75           7.4         3.9          5.3         2.3 versicolor\n## 76           7.6         4.0          5.4         2.4 versicolor\n## 77           7.8         3.8          5.8         2.4 versicolor\n## 78           7.7         4.0          6.0         2.7 versicolor\n## 79           7.0         3.9          5.5         2.5 versicolor\n## 80           6.7         3.6          4.5         2.0 versicolor\n## 81           6.5         3.4          4.8         2.1 versicolor\n## 82           6.5         3.4          4.7         2.0 versicolor\n## 83           6.8         3.7          4.9         2.2 versicolor\n## 84           7.0         3.7          6.1         2.6 versicolor\n## 85           6.4         4.0          5.5         2.5 versicolor\n## 86           7.0         4.4          5.5         2.6 versicolor\n## 87           7.7         4.1          5.7         2.5 versicolor\n## 88           7.3         3.3          5.4         2.3 versicolor\n## 89           6.6         4.0          5.1         2.3 versicolor\n## 90           6.5         3.5          5.0         2.3 versicolor\n## 91           6.5         3.6          5.4         2.2 versicolor\n## 92           7.1         4.0          5.6         2.4 versicolor\n## 93           6.8         3.6          5.0         2.2 versicolor\n## 94           6.0         3.3          4.3         2.0 versicolor\n## 95           6.6         3.7          5.2         2.3 versicolor\n## 96           6.7         4.0          5.2         2.2 versicolor\n## 97           6.7         3.9          5.2         2.3 versicolor\n## 98           7.2         3.9          5.3         2.3 versicolor\n## 99           6.1         3.5          4.0         2.1 versicolor\n## 100          6.7         3.8          5.1         2.3 versicolor\n## 101          7.3         4.3          7.0         3.5  virginica\n## 102          6.8         3.7          6.1         2.9  virginica\n## 103          8.1         4.0          6.9         3.1  virginica\n## 104          7.3         3.9          6.6         2.8  virginica\n## 105          7.5         4.0          6.8         3.2  virginica\n## 106          8.6         4.0          7.6         3.1  virginica\n## 107          5.9         3.5          5.5         2.7  virginica\n## 108          8.3         3.9          7.3         2.8  virginica\n## 109          7.7         3.5          6.8         2.8  virginica\n## 110          8.2         4.6          7.1         3.5  virginica\n## 111          7.5         4.2          6.1         3.0  virginica\n## 112          7.4         3.7          6.3         2.9  virginica\n## 113          7.8         4.0          6.5         3.1  virginica\n## 114          6.7         3.5          6.0         3.0  virginica\n## 115          6.8         3.8          6.1         3.4  virginica\n## 116          7.4         4.2          6.3         3.3  virginica\n## 117          7.5         4.0          6.5         2.8  virginica\n## 118          8.7         4.8          7.7         3.2  virginica\n## 119          8.7         3.6          7.9         3.3  virginica\n## 120          7.0         3.2          6.0         2.5  virginica\n## 121          7.9         4.2          6.7         3.3  virginica\n## 122          6.6         3.8          5.9         3.0  virginica\n## 123          8.7         3.8          7.7         3.0  virginica\n## 124          7.3         3.7          5.9         2.8  virginica\n## 125          7.7         4.3          6.7         3.1  virginica\n## 126          8.2         4.2          7.0         2.8  virginica\n## 127          7.2         3.8          5.8         2.8  virginica\n## 128          7.1         4.0          5.9         2.8  virginica\n## 129          7.4         3.8          6.6         3.1  virginica\n## 130          8.2         4.0          6.8         2.6  virginica\n## 131          8.4         3.8          7.1         2.9  virginica\n## 132          8.9         4.8          7.4         3.0  virginica\n## 133          7.4         3.8          6.6         3.2  virginica\n## 134          7.3         3.8          6.1         2.5  virginica\n## 135          7.1         3.6          6.6         2.4  virginica\n## 136          8.7         4.0          7.1         3.3  virginica\n## 137          7.3         4.4          6.6         3.4  virginica\n## 138          7.4         4.1          6.5         2.8  virginica\n## 139          7.0         4.0          5.8         2.8  virginica\n## 140          7.9         4.1          6.4         3.1  virginica\n## 141          7.7         4.1          6.6         3.4  virginica\n## 142          7.9         4.1          6.1         3.3  virginica\n## 143          6.8         3.7          6.1         2.9  virginica\n## 144          7.8         4.2          6.9         3.3  virginica\n## 145          7.7         4.3          6.7         3.5  virginica\n## 146          7.7         4.0          6.2         3.3  virginica\n## 147          7.3         3.5          6.0         2.9  virginica\n## 148          7.5         4.0          6.2         3.0  virginica\n## 149          7.2         4.4          6.4         3.3  virginica\n## 150          6.9         4.0          6.1         2.8  virginica\n\n\niris |&gt; \n  group_by(Species) |&gt; \n  summarize(across(Sepal.Length:Petal.Length, mean)) # mean of specific columns\n## # A tibble: 3 × 4\n##   Species    Sepal.Length Sepal.Width Petal.Length\n##   &lt;fct&gt;             &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n## 1 setosa             5.01        3.43         1.46\n## 2 versicolor         5.94        2.77         4.26\n## 3 virginica          6.59        2.97         5.55\n\n\ndates with lubridate\nlubridate is a package that is apart of the tidyverse that is very useful for dates. Check out the R for data science chapter and for the R cheat sheet for working with dates.\n\n## lubridate and dates\ndf = tibble(ymd = c('1999-01-04', '2005-04-11', '2015-10-01'),\n            mdy = c('1/4/99', '4/11/05', '10/1/15'))\n\n# turn into dates\ndf = df |&gt; \n  mutate(d1 = ymd(ymd),\n         d2 = mdy(mdy),\n         d3 = dmy(mdy)) #functions to turn into dates order matters\n\ndf\n## # A tibble: 3 × 5\n##   ymd        mdy     d1         d2         d3        \n##   &lt;chr&gt;      &lt;chr&gt;   &lt;date&gt;     &lt;date&gt;     &lt;date&gt;    \n## 1 1999-01-04 1/4/99  1999-01-04 1999-01-04 1999-04-01\n## 2 2005-04-11 4/11/05 2005-04-11 2005-04-11 2005-11-04\n## 3 2015-10-01 10/1/15 2015-10-01 2015-10-01 2015-01-10\n\n# extract information from dates\ndf = df |&gt; \n  mutate(year = year(d1),\n         month = month(d1))\n\n\n\npurr\nThe newest and new standard package with tidyverse is purr with its set of map() functions. Some similarity to plyr (and base) and dplyr functions but with more consistent names and arguments. Notice that map function can have some specification for the type of output. + map() makes a list. + map_lgl() makes a logical vector. + map_int() makes an integer vector. + map_dbl() makes a double vector. + map_chr() makes a character vector.\n\ndf = iris  |&gt; \n  select(-Species)\n#summary statistics\nmap_dbl(df, mean)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##     5.843333     3.057333     3.758000     1.199333\nmap_dbl(df, median)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##         5.80         3.00         4.35         1.30\nmap_dbl(df, sd)\n## Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n##    0.8280661    0.4358663    1.7652982    0.7622377\n\nYou can also use map in a tibble to apply to a nested column with mutate(). Nested columns are one of the differences between data.frame() and tibble().\n\n#Creating models by group\ndf_cars = mtcars |&gt; \n      as_tibble() |&gt; \n      group_by(cyl) |&gt; \n      nest()\n\ndf_cars\n## # A tibble: 3 × 2\n## # Groups:   cyl [3]\n##     cyl data              \n##   &lt;dbl&gt; &lt;list&gt;            \n## 1     6 &lt;tibble [7 × 10]&gt; \n## 2     4 &lt;tibble [11 × 10]&gt;\n## 3     8 &lt;tibble [14 × 10]&gt;\ndf_cars$data[1]\n## [[1]]\n## # A tibble: 7 × 10\n##     mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb\n##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1  21    160    110  3.9   2.62  16.5     0     1     4     4\n## 2  21    160    110  3.9   2.88  17.0     0     1     4     4\n## 3  21.4  258    110  3.08  3.22  19.4     1     0     3     1\n## 4  18.1  225    105  2.76  3.46  20.2     1     0     3     1\n## 5  19.2  168.   123  3.92  3.44  18.3     1     0     4     4\n## 6  17.8  168.   123  3.92  3.44  18.9     1     0     4     4\n## 7  19.7  145    175  3.62  2.77  15.5     0     1     5     6\n\ndf_cars = df_cars |&gt; \n      mutate(models = map(data, \\(x) lm(mpg ~ wt, data = x)),\n             summary = map(models, summary),\n             r_sq = map_dbl(summary, \\(x) x$r.squared))\n\ndf_cars\n## # A tibble: 3 × 5\n## # Groups:   cyl [3]\n##     cyl data               models summary     r_sq\n##   &lt;dbl&gt; &lt;list&gt;             &lt;list&gt; &lt;list&gt;     &lt;dbl&gt;\n## 1     6 &lt;tibble [7 × 10]&gt;  &lt;lm&gt;   &lt;smmry.lm&gt; 0.465\n## 2     4 &lt;tibble [11 × 10]&gt; &lt;lm&gt;   &lt;smmry.lm&gt; 0.509\n## 3     8 &lt;tibble [14 × 10]&gt; &lt;lm&gt;   &lt;smmry.lm&gt; 0.423\n\nmap() only works with one input argument, but you can use map2() if you want two input arguments or pmap() to have more than two input arguments.\n\n###\n#Mapping over multiple arguments\n###\n\nmu = list(5, 10, -3)\nmu |&gt; \n  map(rnorm, n = 5) |&gt; #rnorm - function to extract values from a normal continuous distribution based on some parameters\n  \n  str()\n## List of 3\n##  $ : num [1:5] 5.1 3.51 5.93 6.01 4.43\n##  $ : num [1:5] 9.14 10.32 11.35 9.64 9.95\n##  $ : num [1:5] -3.15 -3.56 -3.26 -1.93 -2.37\n#&gt; List of 3\n\n#Adding SD as well\n###\n#map2 or pmap allows you to iterate over two or more vectors in parallel\n###\n\nsigma = list(1, 5, 10)\nmap2(mu, sigma, rnorm, n = 5) |&gt; str()\n## List of 3\n##  $ : num [1:5] 3.37 4.13 2.8 4.85 5.27\n##  $ : num [1:5] 8.86 19.33 20.84 -3.29 4.17\n##  $ : num [1:5] 3.77 5.76 1.95 -8.68 -14.03\n\n#or with pmap\nn = list(1, 3, 5)\nargs2 = list(mean = mu, sd = sigma, n = n)\nargs2 |&gt; \n  pmap(rnorm) |&gt; \n  str()\n## List of 3\n##  $ : num 5.87\n##  $ : num [1:3] 11.7 10.1 17\n##  $ : num [1:5] 22.33 -5.45 -7.94 -14.11 9.66"
  },
  {
    "objectID": "ws3.html#quartormardown",
    "href": "ws3.html#quartormardown",
    "title": "Workshop 3: Introduction to R",
    "section": "Quarto/rmardown",
    "text": "Quarto/rmardown\nThere are times when we want to inbed R into a document to make it easier to read. This can be done with quarto (.qmd) or rmarkdown (.rmd) files. These file types are more similar to word documents, have their own syntax, and can embed programming languages (not just R) into the document. These files can be output as html, pdf, or docx files. These are very flexible and can be used to make single documents, books, websites, and presentations. Resources about quarto and rmarkdown\nFor PDFs in Quarto and Rmarkdown. You will need to download some form of LaTex to write the PDFs. R recommends the following code\n\ninstall.packages('tinytex')\n\ntinytex::install_tinytex()"
  },
  {
    "objectID": "ws3.html#exercises",
    "href": "ws3.html#exercises",
    "title": "Workshop 3: Introduction to R",
    "section": "Exercises",
    "text": "Exercises\n\nUsing the iris data create a new tibble or dataframe that calculates the median value of all petal and sepal measurements for each species.\nSimulate population growth over 25 years of a population that has random growth from a mean of 10 individuals and a sd of 5 individuals that starts at a population size of 100.\nPlot population size over time\nCreate a quarto or rmarkdown document of the exercises."
  },
  {
    "objectID": "ws4.html",
    "href": "ws4.html",
    "title": "Workshop 4: Density independent models",
    "section": "",
    "text": "This workshop cover density independent population growth models. These are the simplest form of population models. There are two types of models that can be used discrete and continuous models.\nR script: github\nR script of workshop 4"
  },
  {
    "objectID": "ws4.html#discrete-population-models",
    "href": "ws4.html#discrete-population-models",
    "title": "Workshop 4: Density independent models",
    "section": "Discrete Population models",
    "text": "Discrete Population models\nDiscrete models assume that there are distinct generations. This is very common for populations that live in seasonal habitats - their reproduction is timed to the season, and they breed altogether in one bout. These populations experience geometric growth. Here the population at a given time point (\\(N_t\\)) is defined by the equation\n\\[ N_t = N_0\\lambda^t\\] where \\(N_0\\) is the starting population size, \\(\\lambda\\) is the finite growth rate of the population, and \\(t\\) is the time step."
  },
  {
    "objectID": "ws4.html#continuous-population-growth",
    "href": "ws4.html#continuous-population-growth",
    "title": "Workshop 4: Density independent models",
    "section": "Continuous population growth",
    "text": "Continuous population growth\nNot all populations have discrete reproduction, and therefore are continuously increasing. These populations experience exponential growth, and the population size at a given time (\\(N_t\\)) can be found with the equation\n\\[ N_t = N_0e^{rt} \\] where \\(N_0\\) is the population size at time = 0, \\(r\\) is the instantaneous per capita growth rate, and \\(t\\) is time."
  },
  {
    "objectID": "ws4.html#properties-of-density-independent-growth",
    "href": "ws4.html#properties-of-density-independent-growth",
    "title": "Workshop 4: Density independent models",
    "section": "Properties of density independent growth",
    "text": "Properties of density independent growth\nComparing the methods for geometric (discrete) and exponential (continuous) growth models we find that \\[ \\lambda = e^r\\] or \\[ ln\\lambda = r \\] these relationships can be used to distinguish between \\(\\lambda\\) and \\(r\\).\nBased on the properties there are a few general rules\n\n\nno change in population: \\(r = 0\\); \\(\\lambda = 1\\)\n\npopulation increase: \\(r &gt; 0\\); \\(\\lambda &gt; 1\\)\n\npopulation decline: \\(r &lt; 0\\); \\(\\lambda &lt; 1\\)"
  },
  {
    "objectID": "ws4.html#for-loops",
    "href": "ws4.html#for-loops",
    "title": "Workshop 4: Density independent models",
    "section": "for loops",
    "text": "for loops\nBecause the equations for density independent growth are based on the population size the time step before. for loops are very useful when using these models in R.\nFor loops repeat a process for a certain number of iterations. These can be useful iterate over a dataset or when using information in a time series. The for loop works over the number sequence indicated and does the code within the loop (i.e. the body of the loop; inside of {}) for each number in the sequence. The iteration is typically indicated with i, but is just an object that is replaced at the beginning of each loop and can be anything.\nHere is a simple example where we print the iterator i for each number in the sequence.\n\nfor(i in 1:10){ #Sequence\n  print(i)      #body\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\nThe iterator can be assigned to any object, and the sequence can be any vector of numbers.\n\nfor(turtle in 5:10){\n  print(turtle)\n}\n## [1] 5\n## [1] 6\n## [1] 7\n## [1] 8\n## [1] 9\n## [1] 10\n\nA common use of the iterator is to use it to index values to combine with other coding to repeatedly do a task.\n\nfor(flower in 1:nrow(iris)){\n  cat('The species for this iteration is ',     #Adding text per row based on name species\n      as.character(iris$Species[flower]), '\\n') #note of importance of \"\\n\n}\n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  setosa \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  versicolor \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica \n## The species for this iteration is  virginica\n\nAnother common use of for loops is to iterate over values of a vector or dataframe. This can be done by desgniating the sequence from a starting value (e.g. 1) to the length() of a vector or nrow() of a dataframe.\n\nd = seq(1,15, 2) #8 elements\nd\n## [1]  1  3  5  7  9 11 13 15\nfor(i in 1:length(d)){\n  b = d[i] + 1                            #for each i add 1\n  cat('d =',d[i], 'b = d + 1 =', b, '\\n' )#then add string\n}\n## d = 1 b = d + 1 = 2 \n## d = 3 b = d + 1 = 4 \n## d = 5 b = d + 1 = 6 \n## d = 7 b = d + 1 = 8 \n## d = 9 b = d + 1 = 10 \n## d = 11 b = d + 1 = 12 \n## d = 13 b = d + 1 = 14 \n## d = 15 b = d + 1 = 16\n\nThe iterator can be combined with math (e.g. subtraction or addition) to call mulitple values in a specific order. This example uses the the ith term and the i-1th terms to complete a task.\nNote This will be very useful in population models that depend upon previous time steps.\n\nb = 1:10\nfor (i in 2:10){    #Call a section of vector to start sequence\n  z = b[i] - b[i-1]\n  \n  cat('z =', z, 'b[i] =', b[i], 'b[i-1] =', b[i-1], '\\n')\n}\n## z = 1 b[i] = 2 b[i-1] = 1 \n## z = 1 b[i] = 3 b[i-1] = 2 \n## z = 1 b[i] = 4 b[i-1] = 3 \n## z = 1 b[i] = 5 b[i-1] = 4 \n## z = 1 b[i] = 6 b[i-1] = 5 \n## z = 1 b[i] = 7 b[i-1] = 6 \n## z = 1 b[i] = 8 b[i-1] = 7 \n## z = 1 b[i] = 9 b[i-1] = 8 \n## z = 1 b[i] = 10 b[i-1] = 9"
  },
  {
    "objectID": "ws4.html#simulate-a-population",
    "href": "ws4.html#simulate-a-population",
    "title": "Workshop 4: Density independent models",
    "section": "Simulate a population",
    "text": "Simulate a population\nNow we can use for loops to simulate a simple population.\nWe first create indicate our starting population size (\\(N_0\\)) and create a dataframe with all of our time steps and a column for the population size at each time step (\\(N_t\\)).\n\nlibrary(tidyverse)\n## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n## ✔ dplyr     1.1.4     ✔ readr     2.1.5\n## ✔ forcats   1.0.0     ✔ stringr   1.5.1\n## ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n## ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n## ✔ purrr     1.0.2     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nN_0 = 10 \nyears = 10\npop = tibble(time = 0:years, Nt = NA) #Output vector size 10\npop$Nt[pop$time == 0] = N_0\npop\n## # A tibble: 11 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    NA\n##  3     2    NA\n##  4     3    NA\n##  5     4    NA\n##  6     5    NA\n##  7     6    NA\n##  8     7    NA\n##  9     8    NA\n## 10     9    NA\n## 11    10    NA\n\nWe can use a for loop to go through each time point, randomly generate a number of individuals born from a Poisson distribution and add it to the populations size from the time before.\n*Note this simulation will change with each run because growth rate is randomly generated each time step.\n\nfor (t in 1:years){ #sequence \n  growth = rpois(1, lambda = 3) #extracting random value from Poisson Dist\n  pop$Nt[pop$time == t] = growth + pop$Nt[pop$time == (t-1)]\n}\npop\n## # A tibble: 11 × 2\n##     time    Nt\n##    &lt;int&gt; &lt;dbl&gt;\n##  1     0    10\n##  2     1    15\n##  3     2    20\n##  4     3    21\n##  5     4    25\n##  6     5    28\n##  7     6    31\n##  8     7    34\n##  9     8    39\n## 10     9    42\n## 11    10    48\n\n\nggplot(pop, aes(time, Nt))+\n  geom_point(size = 2)+\n  geom_line(linewidth = 1)+\n  labs(x = 'Time', y = expression(italic(N[t])))+\n  scale_x_continuous(breaks = seq(0,10,1))+\n  theme_classic()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 14))"
  },
  {
    "objectID": "ws4.html#average-growth-rate",
    "href": "ws4.html#average-growth-rate",
    "title": "Workshop 4: Density independent models",
    "section": "Average growth rate",
    "text": "Average growth rate\nIn real populations \\(N_t/N_{t-1}\\) are not constant. We can calculate the yearly \\(\\lambda\\) also referred to as the annual growth rate (\\(R\\)) which is \\[R = N_{t+1}/N_t\\] This can be calculated within a for loop\n\n# create column to store data\npop$R = NA\nfor (i in 1:length(pop$time)){\n  pop$R[i] = pop$Nt[i+1]/pop$Nt[i]\n}\npop\n## # A tibble: 11 × 3\n##     time    Nt     R\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    10  1.5 \n##  2     1    15  1.33\n##  3     2    20  1.05\n##  4     3    21  1.19\n##  5     4    25  1.12\n##  6     5    28  1.11\n##  7     6    31  1.10\n##  8     7    34  1.15\n##  9     8    39  1.08\n## 10     9    42  1.14\n## 11    10    48 NA\n\nWhat \\(R\\) is representing if \\(Nt\\) is population size at Time \\(t\\)?\n\n\\(\\lambda &gt; 1\\) for all years so the population is always growing\n\nThis may be the case depending on the random draws from Poisson Distribution, which may include lower sequential values from starting point\n\n\n\n\n\n\nThis can also be done in dpylr\nNote the correction. Need to use the lead() function to \\(N_{t+1}\\). The lag() function would be to represent \\(N_{t-1}\\).\n\npop = pop  |&gt;  \n  mutate(R.2 = lead(Nt) / Nt)\n\npop\n## # A tibble: 11 × 4\n##     time    Nt     R   R.2\n##    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0    10  1.5   1.5 \n##  2     1    15  1.33  1.33\n##  3     2    20  1.05  1.05\n##  4     3    21  1.19  1.19\n##  5     4    25  1.12  1.12\n##  6     5    28  1.11  1.11\n##  7     6    31  1.10  1.10\n##  8     7    34  1.15  1.15\n##  9     8    39  1.08  1.08\n## 10     9    42  1.14  1.14\n## 11    10    48 NA    NA"
  },
  {
    "objectID": "ws4.html#random-sampling",
    "href": "ws4.html#random-sampling",
    "title": "Workshop 4: Density independent models",
    "section": "Random sampling",
    "text": "Random sampling\n\nRandom numbers\nIn the above example we generated random growth from a Poisson distribution, but R can handle many other types. Since they are randomly generated, these numbers will be different each time. You can also use the set.seed() to repeat the answer.\n\nrnorm(5, mean = 0, sd = 1)\n## [1]  1.0408522  1.0484092  2.0789938  0.2423185 -1.4071999\nrunif(5, min = 0, max = 5)\n## [1] 2.975350 2.931293 2.651761 3.724573 2.875220\nrpois(10, lambda = 10)\n##  [1]  4  7  8 10  9 13  9  6  8 15\nrpois(10, lambda = 1:10)\n##  [1]  1  3  4  3  5  4  7 10  9 13\nrbinom(5, size = 2, prob = 0.5)\n## [1] 2 1 1 1 1\nrbinom(5, size = 2, prob = 0.2)\n## [1] 1 0 1 0 0\n\n# get same answer\nrnorm(5, mean = 0, sd = 1)\n## [1]  0.2858374  0.4776222  1.2394489  1.7174661 -0.9566991\n\nset.seed(14)\nrnorm(5, mean = 0, sd = 1)\n## [1] -0.66184983  1.71895416  2.12166699  1.49715368 -0.03614058\n\nset.seed(14)\nrnorm(5, mean = 0, sd = 1)\n## [1] -0.66184983  1.71895416  2.12166699  1.49715368 -0.03614058\n\nPackages like truncnorm can be useful for specialized cases of random number generation. In this case truncnorm generates numbers from a random normal distribution with within a minimum and maximum value. Note that there currently is not a\n\nlibrary(truncnorm)\n# truncnorm to truncate normal distribution\nrnorm(20, mean = 1, sd = 2)\n##  [1]  3.4638904  0.8702385  3.1379875  0.2460694  3.0863662  0.2343562\n##  [7]  1.5988432  2.3484795  0.4143674  1.9761067  2.7656036  4.7254980\n## [13]  4.2234506  1.2709591  3.1761720 -1.5336295  0.6028334  1.2777316\n## [19]  0.4413280  2.4178388\ntruncnorm::rtruncnorm(20, mean = 1, sd = 2, a=-Inf, b=Inf)\n##  [1] -0.5332209  3.8867259  2.6897586  0.2012592 -1.8555352 -1.8439849\n##  [7]  0.3435434  1.5691401  2.4386718  1.8648320  0.2961505  1.5954429\n## [13]  0.4771353  3.6173795  1.0317405  0.1376513  1.7648931  1.0822502\n## [19]  0.8815520 -1.5928480\ntruncnorm::rtruncnorm(20, mean = 1, sd = 2, a=0, b=2)\n##  [1] 0.03259992 0.37152808 1.45994701 1.44008734 0.99530685 0.06211853\n##  [7] 1.93274772 0.32162900 0.14693736 0.98817199 1.40848303 0.41730609\n## [13] 0.75023858 1.73363648 0.88728165 0.83727607 0.49600072 0.96570812\n## [19] 0.24541725 0.43970458\n\n\n\nRandom selection\nAnother type of random sampling is drawing from a sample from a vector and this can be done with sample() in base R with replacement or without replacement and based on certain probabilities.\n\n# base R \nb = 1:10\nsample(b, size =2, replace = F)\n## [1] 5 8\n\nc = 1:5 \nsample(c, size = 6, replace = T)\n## [1] 1 1 4 4 4 1\n\n# from list\nsample(c('good', 'bad'), size = 8, replace = T)\n## [1] \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"good\" \"bad\"  \"bad\"  \"bad\"\n\n# change probability\nsample(c('good', 'bad'), size = 8, replace = T, prob = c(0.2, 0.8))\n## [1] \"good\" \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"bad\"  \"bad\"\n\n# sample matrices from list \nm1 = matrix(c(6,5,4,3,2,1), ncol = 2)\nm2 = matrix(c(1,2,3,4,5,6), ncol = 2)\nm3 = matrix(c(1,2,3,4,5,6), ncol = 2, byrow = T)\n\nm = list(m1, m2, m3)\n\nsample(m, size = 4, replace = T)\n## [[1]]\n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    2\n## [2,]    3    4\n## [3,]    5    6\n## \n## [[4]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n\nsample(m, size = 4, replace = T, prob = c(0.8, 0.1, 0.1))\n## [[1]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n## \n## [[2]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n## \n## [[3]]\n##      [,1] [,2]\n## [1,]    1    4\n## [2,]    2    5\n## [3,]    3    6\n## \n## [[4]]\n##      [,1] [,2]\n## [1,]    6    3\n## [2,]    5    2\n## [3,]    4    1\n\ndplyr has a useful function sample_n() that is specialized to work with dataframes and tibbles\n\n#library(tidyverse)\ndf = tibble(cond = c('good', 'bad', 'ok'), prob = c(0.5, 0.3, 0.2))\n\ndplyr::sample_n(df, size = 2, replace = F)\n## # A tibble: 2 × 2\n##   cond   prob\n##   &lt;chr&gt; &lt;dbl&gt;\n## 1 ok      0.2\n## 2 bad     0.3\n\ndplyr::sample_n(df, size = 3, replace = T)\n## # A tibble: 3 × 2\n##   cond   prob\n##   &lt;chr&gt; &lt;dbl&gt;\n## 1 good    0.5\n## 2 bad     0.3\n## 3 bad     0.3\n\ndplyr::sample_n(df, size = 10, replace = T, weight = prob)\n## # A tibble: 10 × 2\n##    cond   prob\n##    &lt;chr&gt; &lt;dbl&gt;\n##  1 good    0.5\n##  2 good    0.5\n##  3 bad     0.3\n##  4 ok      0.2\n##  5 good    0.5\n##  6 bad     0.3\n##  7 bad     0.3\n##  8 bad     0.3\n##  9 good    0.5\n## 10 ok      0.2\n\n\n\nDensity independent continuous population models\n\\(r\\) is the instantaneous per capita growth rate. It’s value determines how population size will change over time.\nWhat are we doing here?\n\nr = c(-0.03, -0.02, 0, 0.02, 0.03)\n\nN_0 = 10\nyears = 100 #hundred time steps\npop = tibble(time = rep(0:years, times = length(r)),\n              Nt = NA, growth = rep(r, each = years+1))\npop\n## # A tibble: 505 × 3\n##     time Nt    growth\n##    &lt;int&gt; &lt;lgl&gt;  &lt;dbl&gt;\n##  1     0 NA     -0.03\n##  2     1 NA     -0.03\n##  3     2 NA     -0.03\n##  4     3 NA     -0.03\n##  5     4 NA     -0.03\n##  6     5 NA     -0.03\n##  7     6 NA     -0.03\n##  8     7 NA     -0.03\n##  9     8 NA     -0.03\n## 10     9 NA     -0.03\n## # ℹ 495 more rows\n\nfor(i in seq_along(pop$time)){\n  pop$Nt[i] = N_0  * exp(pop$growth[i] * pop$time[i])\n}\npop\n## # A tibble: 505 × 3\n##     time    Nt growth\n##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n##  1     0 10     -0.03\n##  2     1  9.70  -0.03\n##  3     2  9.42  -0.03\n##  4     3  9.14  -0.03\n##  5     4  8.87  -0.03\n##  6     5  8.61  -0.03\n##  7     6  8.35  -0.03\n##  8     7  8.11  -0.03\n##  9     8  7.87  -0.03\n## 10     9  7.63  -0.03\n## # ℹ 495 more rows\n\nAlso can be done in dplyr\n\n#Using dplyr\npop = pop  |&gt;  \n  mutate(Nt.2 = N_0 * exp(growth*time), \n         ln.Nt = log(Nt.2))\npop\n## # A tibble: 505 × 5\n##     time    Nt growth  Nt.2 ln.Nt\n##    &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n##  1     0 10     -0.03 10     2.30\n##  2     1  9.70  -0.03  9.70  2.27\n##  3     2  9.42  -0.03  9.42  2.24\n##  4     3  9.14  -0.03  9.14  2.21\n##  5     4  8.87  -0.03  8.87  2.18\n##  6     5  8.61  -0.03  8.61  2.15\n##  7     6  8.35  -0.03  8.35  2.12\n##  8     7  8.11  -0.03  8.11  2.09\n##  9     8  7.87  -0.03  7.87  2.06\n## 10     9  7.63  -0.03  7.63  2.03\n## # ℹ 495 more rows\n\nWhat ln.Nt is representing?\nLet’s see with ggplot\n\n###Let's see it using ggplot\nlibrary(ggpubr)\n\na = ggplot(pop, aes(x = time, y = Nt, color = as.factor(growth))) +\n  geom_line(linewidth = 1) +\n  labs(x = 'Time', y = expression(italic(N[t])),\n       color = expression(italic(r)),\n       title = 'Exponential')+\n  theme_bw()\n\nb = ggplot(pop, aes(x = time, y = ln.Nt, color = as.factor(growth))) +\n  geom_line(linewidth = 1) +\n    labs(x = 'Time', y = expression('ln('~italic(N[t])~')'),\n       color = expression(italic(r)),\n       title = 'Semilogarithmic')+\n  theme_bw()\n\n# plot combined\nggarrange(a,b,\n          nrow = 1,\n          common.legend = T)\n\n\n\n\nSlope of line in b is \\(r\\) (intrisic rate of increase)"
  },
  {
    "objectID": "ws4.html#exercises",
    "href": "ws4.html#exercises",
    "title": "Workshop 4: Density independent models",
    "section": "Exercises",
    "text": "Exercises\n\nDownload primer and open primer package. Upload the sparrows dataset from package and plot counts as function of years.\nCalculate the annual rate of increase (\\(\\lambda\\)) for each time step and plot \\(\\lambda\\) as function of years as a scatterplot\nHint: Look at the for loop/dplyr examples above\nChallenge: Simulate a population with varying \\(\\lambda\\) at each time step."
  }
]